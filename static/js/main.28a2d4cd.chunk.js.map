{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","queryOverride","session","database","isCustomQuery","queryToExecute","defaultQuery","state","customQueryActive","query","trim","console","error","validStartKeywords","queryStart","toUpperCase","some","keyword","startsWith","log","substring","run","res","setState","customQueryTimeout","clearTimeout","timeout","setTimeout","data","nodes","links","close","nodesMap","Map","records","forEach","record","has","get","source","target","set","name","role","location","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","u_name","Date","now","u_role","u_location","u_website","includes","replace","Array","from","values","updatedData","currentDataHash","calculateDataHash","hasChanged","lastDataHash","hasDetailedChange","hasDataChanged","isDataIdentical","JSON","stringify","length","localStorage","setItem","timeSinceLastUpdate","lastUpdateTime","updateDebounceTime","updateCount","maxUpdatesPerCycle","latestNode","newNode","find","n","fgRef","current","centerAt","zoom","nodesStr","map","sort","join","linksStr","l","newData","oldData","oldNodesMap","oldNode","oldLinksSet","Set","newLink","startPolling","pollingInterval","clearInterval","isPolling","setInterval","document","hidden","updateCountResetInterval","stopPolling","connectWebSocket","websocket","WebSocket","onopen","wsConnected","useWebSocket","onmessage","event","parse","type","onclose","onerror","disconnectWebSocket","addNodeNFC","newUser","nfcUserName","capitalizeWords","str","split","word","charAt","slice","toLowerCase","user","nfcUser","awuUser","handleChange","newQuery","value","resetQuery","validateAndCleanQuery","currentQuery","React","createRef","defaultData","this","handleVisibilityChange","addEventListener","removeEventListener","path","element","addNode","Component","NFCTrigger","useLocation","username","useParams","useEffect","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","mutatedNodes","setMutatedNodes","oneDegreeNodes","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","visibilityFocus","zoomFocus","visibilityNodes","filter","match","neighbor","nodeName","zoomNodes","searchMatches","searchNodes","mutationNodes","size","visibleNodes","xs","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","test","extractedNodes","deleteMatches","nameMatch","Boolean","matchClause","nodeMatches","handleEditChange","prev","saveNodeChanges","formattedWebsite","oldName","newName","onSubmit","placeholder","display","margin","onChange","input","id","onClick","open","backgroundColor","border","borderRadius","cursor","position","top","right","zIndex","alignItems","gap","animation","opacity","toLocaleTimeString","ref","graphData","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkColor","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","left","transform","boxShadow","onFocus","onBlur","href","rel","App","className","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uXAKMA,E,kDACJ,cAAyB,IAAD,EAAVC,EAAU,EAAVA,OAAU,4BACtB,gBAsCFC,SAvCwB,sBAuCb,4EAAAC,EAAA,yDAAOC,EAAP,+BAAqB,KAAMC,EAA3B,+BAA2C,KAChDC,EAAU,EAAKL,OAAOK,QAAQ,CAAEC,SAAU,UAK1CC,GAAgB,GADhBC,EAAiBJ,GAYVA,IAAkB,EAAKK,eAEhCF,GAAgB,GATI,OAAhBJ,GAAyBC,GAAkB,EAAKM,MAAMC,mBAIxDH,EAAiB,EAAKE,MAAME,MAC5BL,GAAgB,GAJhBC,EAAiB,EAAKC,aAYrBD,GAA4C,kBAAnBA,GAAyD,KAA1BA,EAAeK,OAvBnE,uBAwBPC,QAAQC,MAAM,iBAAkBP,GAxBzB,6BA6BHQ,EAAqB,CAAC,QAAS,SAAU,QAAS,SAAU,MAAO,SAAU,OAAQ,SAAU,QAC/FC,EAAaT,EAAeK,OAAOK,cACpBF,EAAmBG,MAAK,SAAAC,GAAO,OAAIH,EAAWI,WAAWD,MA/BrE,wBAkCPN,QAAQC,MAAM,+BAAgCP,GAlCvC,4CAuCPM,QAAQQ,IAAI,mBAAoBd,EAAee,UAAU,EAAG,KAAO,OACnET,QAAQQ,IAAI,mBAAoBf,GAxCzB,UAyCKF,EAAQmB,IAAIhB,GAzCjB,QAyCPiB,EAzCO,OA4CHlB,IACF,EAAKmB,SAAS,CAAEf,mBAAmB,IAG/B,EAAKD,MAAMiB,oBACbC,aAAa,EAAKlB,MAAMiB,oBAIpBE,EAAUC,YAAW,WACzBhB,QAAQQ,IAAI,yDACZ,EAAKI,SAAS,CACZf,mBAAmB,EACnBgB,mBAAoB,SAErB,KAEH,EAAKD,SAAS,CAAEC,mBAAoBE,KA7D/B,0DAgEPf,QAAQC,MAAM,sBAAd,MACAD,QAAQC,MAAM,aAAcP,GAC5B,EAAKkB,SAAS,CAAEK,KAAM,CAAEC,MAAO,GAAIC,MAAO,MAlEnC,4CAqEP5B,EAAQ6B,QArED,qBAwELC,EAAW,IAAIC,IACfH,EAAQ,GAGZR,EAAIY,QAAQC,SAAQ,SAACC,GACnB,GAAIA,EAAOC,IAAI,WAAaD,EAAOC,IAAI,WAAaD,EAAOE,IAAI,WAAaF,EAAOE,IAAI,WACnD,kBAAzBF,EAAOE,IAAI,WAA0D,kBAAzBF,EAAOE,IAAI,UAAwB,CAExF,IAAIC,EAASH,EAAOE,IAAI,UACpBE,EAASJ,EAAOE,IAAI,UAEnBN,EAASK,IAAIE,IAChBP,EAASS,IAAIF,EAAQ,CACnBG,KAAMH,EACNI,KAAMP,EAAOE,IAAI,cACjBM,SAAUR,EAAOE,IAAI,kBACrBO,QAAST,EAAOE,IAAI,iBACpBQ,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,WAIPhB,EAASK,IAAIG,IAChBR,EAASS,IAAID,EAAQ,CACnBE,KAAMF,EACNG,KAAMP,EAAOE,IAAI,cACjBM,SAAUR,EAAOE,IAAI,kBACrBO,QAAST,EAAOE,IAAI,iBACpBQ,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,WAIRhB,EAASK,IAAIE,IAAWP,EAASK,IAAIG,GACvCV,EAAMoB,KAAK,CAAEX,SAAQC,WAE7B7B,QAAQwC,KAAK,wBAAyB,CAAEZ,SAAQC,gBAI1CJ,EAAOgB,KAAKjB,SAAQ,SAACkB,GACnB,IAAMC,EAAOlB,EAAOE,IAAIe,GACxB,GAAIC,GAAQA,EAAKC,YAAcD,EAAKE,SAAU,CAC5C,IAAMd,EAAOY,EAAKC,WAAWb,MAAhB,eAAgCY,EAAKE,SAASC,KACtDzB,EAASK,IAAIK,IAChBV,EAASS,IAAIC,EAAM,CACjBA,OACAC,KAAMW,EAAKC,WAAWZ,MAAQ,GAC9BC,SAAUU,EAAKC,WAAWX,UAAY,GACtCC,QAASS,EAAKC,WAAWV,SAAW,GACpCC,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,gBAGP,GAAIM,GAAwB,kBAATA,EAAmB,CAE3C,IAAMZ,EAAOY,EAAKZ,MAAQY,EAAKI,QAAlB,eAAoCC,KAAKC,OACjD5B,EAASK,IAAIK,IAChBV,EAASS,IAAIC,EAAM,CACjBA,OACAC,KAAMW,EAAKX,MAAQW,EAAKO,QAAU,GAClCjB,SAAUU,EAAKV,UAAYU,EAAKQ,YAAc,GAC9CjB,QAASS,EAAKT,SAAWS,EAAKS,WAAa,GAC3CjB,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,gBAGP,GAAoB,kBAATM,GAAqBD,EAAIW,SAAS,QAAS,CAE3D,IAAMtB,EAAOY,EACRtB,EAASK,IAAIK,IAChBV,EAASS,IAAIC,EAAM,CACjBA,OACAC,KAAMP,EAAOE,IAAIe,EAAIY,QAAQ,OAAQ,UAAY,GACjDrB,SAAUR,EAAOE,IAAIe,EAAIY,QAAQ,OAAQ,cAAgB,GACzDpB,QAAST,EAAOE,IAAIe,EAAIY,QAAQ,OAAQ,aAAe,GACvDnB,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,kBAQdnB,EAAQqC,MAAMC,KAAKnC,EAASoC,UAC5BC,EAAc,CAAExC,QAAOC,SAGvBwC,EAAkB,EAAKC,kBAAkBF,GACzCG,EAAa,EAAKC,eAAiBH,EAGnCI,EAAoB,EAAKC,eAAeN,EAAa,EAAK9D,MAAMqB,MAGhEgD,EAAkBC,KAAKC,UAAUT,KAAiBQ,KAAKC,UAAU,EAAKvE,MAAMqB,MAGzD,EAAKrB,MAAMqB,KAEpCjB,QAAQQ,IAAI,kCACZR,QAAQQ,IAAI,gBAAiBmD,GAC7B3D,QAAQQ,IAAI,aAAc,EAAKsD,cAC/B9D,QAAQQ,IAAI,gBAAiBqD,GAC7B7D,QAAQQ,IAAI,4BAA6BuD,GACzC/D,QAAQQ,IAAI,kBAAmByD,GAC/BjE,QAAQQ,IAAI,uBAAwBkD,EAAYxC,MAAMkD,QACtDpE,QAAQQ,IAAI,uBAAwBkD,EAAYvC,MAAMiD,QACtDpE,QAAQQ,IAAI,qBAAsB,EAAKZ,MAAMqB,KAAKC,MAAMkD,QACxDpE,QAAQQ,IAAI,qBAAsB,EAAKZ,MAAMqB,KAAKE,MAAMiD,QAEpDP,GAAcE,EAChB/D,QAAQQ,IAAI,uCAEZR,QAAQQ,IAAI,wCAGd6D,aAAaC,QAAQ,YAAaJ,KAAKC,UAAUT,IAG3CT,EAAMD,KAAKC,MACXsB,EAAsBtB,EAAM,EAAKuB,gBAElCX,GAAcE,GAA2C,OAAtB,EAAKD,gBACxCG,IACAM,EAAsB,EAAKE,oBAA4C,OAAtB,EAAKX,eACvD,EAAKY,YAAc,EAAKC,oBAE1B,EAAKb,aAAeH,EACpB,EAAKa,eAAiBvB,EACtB,EAAKyB,cACL1E,QAAQQ,IAAI,uBAAwB+D,EAAqB,eAAgB,EAAKG,YAAa,KAE3F,EAAK9D,SAAS,CACZK,KAAMyC,EACNkB,WAAYvF,EACZmF,eAAgBX,EAAaZ,EAAM,EAAKrD,MAAM4E,iBAC7C,WACGnF,GACF2B,YAAW,WACT,IAAI6D,EAAU3D,EAAM4D,MAAK,SAACC,GAAD,OAAOA,EAAEhD,OAAS1C,KACvCwF,GAAW,EAAKG,MAAMC,UACxBjF,QAAQQ,IAAI,eAAgBqE,GAC5B,EAAKG,MAAMC,QAAQC,SAASL,EAAQ1C,EAAG0C,EAAQvC,EAAG,MAClD,EAAK0C,MAAMC,QAAQE,KAAK,SAEzB,UAKH9F,GAAe,EAAKO,MAAMgF,aAAevF,GAC3C,EAAKuB,SAAS,CAAEgE,WAAYvF,IAG9B,EAAKqF,YAAc,GApOZ,iEAvCa,EAgRxBd,kBAAoB,SAAC3C,GAEnB,IAAMmE,EAAWnE,EAAKC,MAAMmE,KAAI,SAAAN,GAAC,gBAAOA,EAAEhD,KAAT,YAAiBgD,EAAE/C,KAAnB,YAA2B+C,EAAE9C,SAA7B,YAAyC8C,EAAE7C,YAAWoD,OAAOC,KAAK,KAC7FC,EAAWvE,EAAKE,MAAMkE,KAAI,SAAAI,GAC9B,IAAM7D,EAA6B,kBAAb6D,EAAE7D,OAAsB6D,EAAE7D,OAAOG,KAAO0D,EAAE7D,OAC1DC,EAA6B,kBAAb4D,EAAE5D,OAAsB4D,EAAE5D,OAAOE,KAAO0D,EAAE5D,OAChE,MAAM,GAAN,OAAUD,EAAV,YAAoBC,MACnByD,OAAOC,KAAK,KACf,MAAM,GAAN,OAAUH,EAAV,YAAsBI,IAxRA,EA4RxBxB,eAAiB,SAAC0B,EAASC,GACzB,IAAKA,IAAYA,EAAQzE,QAAUyE,EAAQxE,MAAO,OAAO,EAGzD,GAAIuE,EAAQxE,MAAMkD,SAAWuB,EAAQzE,MAAMkD,QACvCsB,EAAQvE,MAAMiD,SAAWuB,EAAQxE,MAAMiD,OACzC,OAAO,EAIT,IAVqC,EAU/BwB,EAAc,IAAItE,IAAIqE,EAAQzE,MAAMmE,KAAI,SAAAN,GAAC,MAAI,CAACA,EAAEhD,KAAMgD,OAVvB,cAWfW,EAAQxE,OAXO,IAWrC,2BAAqC,CAAC,IAA3B2D,EAA0B,QAC7BgB,EAAUD,EAAYjE,IAAIkD,EAAQ9C,MACxC,IAAK8D,GACDA,EAAQ7D,OAAS6C,EAAQ7C,MACzB6D,EAAQ5D,WAAa4C,EAAQ5C,UAC7B4D,EAAQ3D,UAAY2C,EAAQ3C,QAC9B,OAAO,GAjB0B,8BAsBrC,IAtBqC,EAsB/B4D,EAAc,IAAIC,IAAIJ,EAAQxE,MAAMkE,KAAI,SAAAI,GAC5C,IAAM7D,EAA6B,kBAAb6D,EAAE7D,OAAsB6D,EAAE7D,OAAOG,KAAO0D,EAAE7D,OAC1DC,EAA6B,kBAAb4D,EAAE5D,OAAsB4D,EAAE5D,OAAOE,KAAO0D,EAAE5D,OAChE,MAAM,GAAN,OAAUD,EAAV,YAAoBC,OAzBe,cA4Bf6D,EAAQvE,OA5BO,IA4BrC,2BAAqC,CAAC,IAA3B6E,EAA0B,QAC7BpE,EAAmC,kBAAnBoE,EAAQpE,OAAsBoE,EAAQpE,OAAOG,KAAOiE,EAAQpE,OAC5EC,EAAmC,kBAAnBmE,EAAQnE,OAAsBmE,EAAQnE,OAAOE,KAAOiE,EAAQnE,OAClF,IAAKiE,EAAYpE,IAAZ,UAAmBE,EAAnB,YAA6BC,IAChC,OAAO,GAhC0B,8BAoCrC,OAAO,GAhUe,EAoUxBoE,aAAe,WACT,EAAKC,iBACPC,cAAc,EAAKD,iBAGrB,EAAKtF,SAAS,CAAEwF,WAAW,IAC3B,EAAKF,gBAAkBG,aAAY,WAEjC,IAAKC,SAASC,OAAQ,CAEpB,GAAI,EAAK3G,MAAMC,kBAEb,YADAG,QAAQQ,IAAI,uCAGd,EAAKrB,SAAS,KAAM,EAAKQ,iBAE1B,KAGC,EAAK6G,0BACPL,cAAc,EAAKK,0BAErB,EAAKA,yBAA2BH,aAAY,WAC1C,EAAK3B,YAAc,EACnB1E,QAAQQ,IAAI,wBACX,MA7VmB,EAiWxBiG,YAAc,WACR,EAAKP,kBACPC,cAAc,EAAKD,iBACnB,EAAKA,gBAAkB,MAErB,EAAKM,2BACPL,cAAc,EAAKK,0BACnB,EAAKA,yBAA2B,MAElC,EAAK5F,SAAS,CAAEwF,WAAW,KA1WL,EA8WxBM,iBAAmB,WACjB,IAEE,EAAKC,UAAY,IAAIC,UAAU,mCAE/B,EAAKD,UAAUE,OAAS,WACtB7G,QAAQQ,IAAI,uBACZ,EAAKI,SAAS,CAAEkG,aAAa,EAAMC,cAAc,KAGnD,EAAKJ,UAAUK,UAAY,SAACC,GAEL,iBADL/C,KAAKgD,MAAMD,EAAMhG,MACrBkG,OACVnH,QAAQQ,IAAI,uCACZ,EAAKrB,SAAS,KAAM,EAAKQ,gBAI7B,EAAKgH,UAAUS,QAAU,WACvBpH,QAAQQ,IAAI,0BACZ,EAAKI,SAAS,CAAEkG,aAAa,IAE7B9F,YAAW,WACJ,EAAKpB,MAAMwG,WACd,EAAKH,iBAEN,MAGL,EAAKU,UAAUU,QAAU,SAACpH,GACxBD,QAAQC,MAAM,mBAAoBA,GAClC,EAAKW,SAAS,CAAEkG,aAAa,KAE/B,MAAO7G,GACPD,QAAQC,MAAM,+BAAgCA,GAE9C,EAAKgG,iBAlZe,EAsZxBqB,oBAAsB,WAChB,EAAKX,YACP,EAAKA,UAAUvF,QACf,EAAKuF,UAAY,MAEnB,EAAK/F,SAAS,CAAEkG,aAAa,EAAOC,cAAc,KA3Z5B,EAocxBQ,WApcwB,uCAocX,WAAOC,EAASC,GAAhB,iBAAArI,EAAA,6DAELsI,EAAkB,SAACC,GACvB,OAAKA,EACEA,EAAIC,MAAM,KAAKvC,KAAI,SAAAwC,GAAI,OAAIA,EAAKC,OAAO,GAAG1H,cAAgByH,EAAKE,MAAM,GAAGC,iBAAezC,KAAK,KADlFoC,GAIfpI,EAAU,EAAKL,OAAOK,QAAQ,CAAEC,SAAU,UAPnC,kBASHD,EAAQmB,IAAR,kfAeJ,CACEuH,KAAMP,EAAgBF,GACtBU,QAASR,EAAgBD,GACzBU,QAAS,aA3BJ,uBA8BH,EAAKhJ,SAASqI,GA9BX,uDAgCTxH,QAAQC,MAAM,qBAAd,MAhCS,yBAkCTV,EAAQ6B,QAlCC,4EApcW,0DA0exBgH,aAAe,SAACnB,GAEd,IAAMoB,EAAWpB,EAAMpF,OAAOyG,MAG9B,GAAKD,GAAgC,KAApBA,EAAStI,OAA1B,CAMA,IACMI,EAAakI,EAAStI,OAAOK,cADR,CAAC,QAAS,SAAU,QAAS,SAAU,MAAO,SAAU,OAAQ,SAAU,QAE7DC,MAAK,SAAAC,GAAO,OAAIH,EAAWI,WAAWD,MAG5E,EAAKM,SAAS,CAAEd,MAAOuI,IAGvBrI,QAAQQ,IAAI,mDAAoD6H,QAbhE,EAAKzH,SAAS,CAAEd,MAAO,EAAKH,gBAhfR,EAkgBxB4I,WAAa,WACX,EAAK3H,SAAS,CACZd,MAAO,EAAKH,aACZE,mBAAmB,EACnBgB,mBAAoB,OAIlB,EAAKjB,MAAMiB,oBACbC,aAAa,EAAKlB,MAAMiB,qBA3gBJ,EAghBxB2H,sBAAwB,WACtB,IAAMC,EAAe,EAAK7I,MAAME,MAGhC,IAAK2I,GAAwC,kBAAjBA,GAAqD,KAAxBA,EAAa1I,OAGpE,OAFAC,QAAQQ,IAAI,2CACZ,EAAKI,SAAS,CAAEd,MAAO,EAAKH,eAK9B,IACMQ,EAAasI,EAAa1I,OAAOK,cADZ,CAAC,QAAS,SAAU,QAAS,SAAU,MAAO,SAAU,OAAQ,SAAU,QAE7DC,MAAK,SAAAC,GAAO,OAAIH,EAAWI,WAAWD,QAG5EN,QAAQQ,IAAI,sCAAuCiI,GACnD,EAAK7H,SAAS,CAAEd,MAAO,EAAKH,iBA/hB9B,EAAKT,OAASA,EACd,EAAK8F,MAAQ0D,IAAMC,YAEnB,EAAKC,YAAc,CACjB1H,MAAO,GACPC,MAAO,IAGT,EAAKvB,MAAQ,CACXqB,KAAM,EAAK2H,YACX9I,MAAM,0QAGN8E,WAAY,KACZJ,eAAgB,KAChB4B,WAAW,EACXW,cAAc,EACdD,aAAa,EACbjH,mBAAmB,EACnBgB,mBAAoB,MAItB,EAAKlB,aAAL,0QAKA,EAAKmE,aAAe,KACpB,EAAKoC,gBAAkB,KACvB,EAAKS,UAAY,KACjB,EAAKnC,eAAiB,EACtB,EAAKC,mBAAqB,IAC1B,EAAKC,YAAc,EACnB,EAAKC,mBAAqB,EApCJ,E,gEA+ZH,IAAD,OAElBkE,KAAKL,wBAELK,KAAK1J,WAGL0J,KAAKnC,mBAGLmC,KAAKC,uBAAyB,WACxBxC,SAASC,QAAU,EAAK3G,MAAMwG,UAChCpG,QAAQQ,IAAI,gCACF8F,SAASC,QAAU,EAAK3G,MAAMwG,WACxCpG,QAAQQ,IAAI,kCAIhB8F,SAASyC,iBAAiB,mBAAoBF,KAAKC,0B,6CAKnDD,KAAKpC,cACLoC,KAAKvB,sBAGDuB,KAAKjJ,MAAMiB,oBACbC,aAAa+H,KAAKjJ,MAAMiB,oBAItBgI,KAAKC,wBACPxC,SAAS0C,oBAAoB,mBAAoBH,KAAKC,0B,+BAsGxD,OACE,kBAAC,IAAD,KACA,6BACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOG,KAAK,aAAaC,QAAS,kBAAC,EAAD,CAAYC,QAASN,KAAKtB,eAC5D,kBAAC,IAAD,CAAO0B,KAAK,IAAIC,QACd,kBAAC,EAAD,CACAjI,KAAM4H,KAAKjJ,MAAMqB,KACjBmH,aAAcS,KAAKT,aACnBjJ,SAAU0J,KAAK1J,SACf6F,MAAO6D,KAAK7D,MACZJ,WAAYiE,KAAKjJ,MAAMgF,WACvB1F,OAAQ2J,KAAK3J,OACbkH,UAAWyC,KAAKjJ,MAAMwG,UACtB5B,eAAgBqE,KAAKjJ,MAAM4E,eAC3ByB,aAAc4C,KAAK5C,aACnBQ,YAAaoC,KAAKpC,YAClB5G,kBAAmBgJ,KAAKjJ,MAAMC,kBAC9B0I,WAAYM,KAAKN,sB,GAzjBDG,IAAMU,WAmkBxBC,EAAa,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QACdlH,EAAWqH,cACTC,EAAaC,cAAbD,SAqBF,OAnBNb,IAAMe,WAAU,YACM,uCAAG,4BAAArK,EAAA,6DACfoI,EADe,eACGxE,KAAKC,OADR,kBAIbkG,EAAQ3B,EAAS+B,GAJJ,8DAMjBvJ,QAAQC,MAAM,qBAAd,MANiB,2BAUnBe,YAAW,WACT0I,OAAOzH,SAAS0H,OAAO,uBACpB,KAZc,yDAAH,qDAehBC,KACG,CAAC3H,EAAUsH,IAEP,yBAAKM,MAAO,CAAEC,UAAW,SAAUC,QAAS,OAAQC,SAAU,OAAQC,MAAO,QAA7E,0BAA8GV,EAA9G,QAGKW,EAAY,SAAC,GAAsJ,IAApJjJ,EAAmJ,EAAnJA,KAAMmH,EAA6I,EAA7IA,aAAcjJ,EAA+H,EAA/HA,SAAU6F,EAAqH,EAArHA,MAAOJ,EAA8G,EAA9GA,WAAY1F,EAAkG,EAAlGA,OAAQkH,EAA0F,EAA1FA,UAAW5B,EAA+E,EAA/EA,eAAgByB,EAA+D,EAA/DA,aAAcQ,EAAiD,EAAjDA,YAAa5G,EAAoC,EAApCA,kBAAmB0I,EAAiB,EAAjBA,WAAiB,EAC1I4B,mBAAS,IADiI,mBACvKC,EADuK,KAC3JC,EAD2J,OAEtIF,mBAAS,MAF6H,mBAEvKG,EAFuK,KAEzJC,EAFyJ,OAG1IJ,mBAAS,MAHiI,mBAGvKK,EAHuK,KAG3JC,EAH2J,OAI5IN,mBAAS,MAJmI,mBAIvKO,EAJuK,KAI5JC,EAJ4J,OAKxIR,mBAAS,MAL+H,mBAKvKS,EALuK,KAK1JC,EAL0J,OAM1IV,mBAAS,MANiI,mBAMvKW,EANuK,KAM3JC,EAN2J,OAOtIZ,mBAAS,IAP6H,mBAOvKa,EAPuK,KAOzJC,EAPyJ,KAU9KxB,qBAAU,WACJ7E,GACFmG,EAAc,gBAEf,CAACnG,IAGJ6E,qBAAU,WACJzE,EAAMC,SAAWhE,EAAKC,MAAMkD,OAAS,IAAM0G,GAE7C9J,YAAW,WACLgE,EAAMC,SACRD,EAAMC,QAAQE,KAAK,EAAG,OAEvB,OAEJ,CAAClE,EAAKC,MAAO8D,EAAO8F,IAGvB,IAUMI,EAVoB,WACxB,IAAKtG,IAAe3D,EAAM,OAAO,IAAI8E,IACrC,IAAMoF,EAAY,IAAIpF,IAMtB,OALAoF,EAAUC,IAAIxG,GACd3D,EAAKE,MAAMK,SAAQ,SAAA6J,GACbA,EAAKzJ,SAAWgD,GAAYuG,EAAUC,IAAIC,EAAKxJ,QAC/CwJ,EAAKxJ,SAAW+C,GAAYuG,EAAUC,IAAIC,EAAKzJ,WAE9CuJ,EAEcG,GAIjBC,EAAkB,SAACC,EAAWC,GAClC,IAAKD,IAAcvK,EAAM,OAAO,IAAI8E,IAGpC,IAFA,IAAM2F,EAAU,IAAI3F,IAChB4F,EAAe,IAAI5F,IAAI,CAACyF,IAHiB,WAIpCI,GACP,IAAMC,EAAY,IAAI9F,IACtB9E,EAAKE,MAAMK,SAAQ,SAAA6J,GAEjB,IAAMS,EAAoC,kBAAhBT,EAAKzJ,OAAsByJ,EAAKzJ,OAAOG,KAAOsJ,EAAKzJ,OACvEmK,EAAoC,kBAAhBV,EAAKxJ,OAAsBwJ,EAAKxJ,OAAOE,KAAOsJ,EAAKxJ,OAC7E8J,EAAanK,SAAQ,SAAAuD,GACfA,IAAM+G,GAAeJ,EAAQhK,IAAIqK,IACnCF,EAAUT,IAAIW,GAEZhH,IAAMgH,GAAeL,EAAQhK,IAAIoK,IACnCD,EAAUT,IAAIU,SAIpBD,EAAUrK,SAAQ,SAAAuD,GAAC,OAAI2G,EAAQN,IAAIrG,MACnC4G,EAAanK,SAAQ,SAAAuD,GAAC,OAAI2G,EAAQN,IAAIrG,MACtC4G,EAAeE,GAjBRD,EAAI,EAAGA,EAAIH,EAAQG,IAAM,IAoBlC,OADAF,EAAQN,IAAII,GACLE,GAGHM,EAAkBtB,GAAaE,GAAehG,EAE9CqH,EAA2B,WAAfnB,EAA0B,SACZ,UAAfA,EAAyBF,EACV,eAAfE,EAA8BlG,EACf,aAAfkG,EAA4BE,EAAa,GAAK,KACzDkB,GAAkBX,EAAgBS,EAlClB,GAqClB5B,GAAcA,EAAWrK,QACLkB,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAC1CA,EAAKZ,KAAKiG,cAAc3E,SAAS+G,EAAWpC,gBAC3CrF,EAAKV,UAAYU,EAAKV,SAAS+F,cAAc3E,SAAS+G,EAAWpC,gBACjErF,EAAKX,MAAQW,EAAKX,KAAKgG,cAAc3E,SAAS+G,EAAWpC,kBAE9CxG,SAAQ,SAAA4K,GACGb,EAAgBa,EAAMrK,KA5C3B,GA6CHP,SAAQ,SAAA6K,GAAQ,OAAIH,GAAgBd,IAAIiB,SAKxC,aAAfvB,GAA6BE,EAAa5G,OAAS,GACrD4G,EAAaxJ,SAAQ,SAAA8K,GACGf,EAAgBe,EAAU,GAClC9K,SAAQ,SAAA6K,GAAQ,OAAIH,GAAgBd,IAAIiB,SAI1D,IAAME,GAA2B,WAAfzB,EACA,WACC,IAAM0B,EAAgBvL,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAC1CA,EAAKZ,KAAKiG,cAAc3E,SAAS+G,EAAWpC,gBAC3CrF,EAAKV,UAAYU,EAAKV,SAAS+F,cAAc3E,SAAS+G,EAAWpC,gBACjErF,EAAKX,MAAQW,EAAKX,KAAKgG,cAAc3E,SAAS+G,EAAWpC,kBAEtDyE,EAAc,IAAI1G,IAKxB,OAJAyG,EAAchL,SAAQ,SAAA4K,GACGb,EAAgBa,EAAMrK,KAlE5C,GAmEcP,SAAQ,SAAA6K,GAAQ,OAAII,EAAYrB,IAAIiB,SAE9CI,EAXR,GAac,aAAf3B,EACC,WACC,IAAM4B,EAAgB,IAAI3G,IAK1B,OAJAiF,EAAaxJ,SAAQ,SAAA8K,GACGf,EAAgBe,EAAU,GAClC9K,SAAQ,SAAA6K,GAAQ,OAAIK,EAActB,IAAIiB,SAE/CK,EANR,GAQDnB,EAAgBU,EAhFX,GAmFtBxC,qBAAU,WAGR,GAAIzE,EAAMC,SAAWsH,GAAUI,KAAO,EAEpC,GAAmB,UAAf7B,GAA0BF,EAAa,CACzC,IAAMgC,EAAe3L,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAAI4J,GAAU7K,IAAIiB,EAAKZ,SAClE,GAAI6K,EAAaxI,OAAS,EAAG,CAE3B,IAAMyI,EAAKD,EAAavH,KAAI,SAAAN,GAAC,OAAIA,EAAE5C,KAC7B2K,EAAKF,EAAavH,KAAI,SAAAN,GAAC,OAAIA,EAAEzC,KAC7ByK,EAAO3K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQyK,IACnBI,EAAO7K,KAAK8K,IAAL,MAAA9K,KAAI,YAAQyK,IACnBM,EAAO/K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQ0K,IACnBM,EAAOhL,KAAK8K,IAAL,MAAA9K,KAAI,YAAQ0K,IAEnBO,GAAWN,EAAOE,GAAQ,EAC1BK,GAAWH,EAAOC,GAAQ,EAC1BG,EAAQN,EAAOF,EACfS,EAASJ,EAAOD,EAIhBM,EAAQrL,KAAK4K,KAChBtD,OAAOgE,WAFM,KAEkBH,GAC/B7D,OAAOiE,YAHM,KAGmBH,EACjC,GAGFxI,EAAMC,QAAQC,SAASmI,EAASC,EAAS,KACzCtI,EAAMC,QAAQE,KAAKsI,EAAO,WAIzB,GAAmB,WAAf3C,GAA2BV,EAAY,CAC9C,IAAMwC,EAAe3L,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAAI4J,GAAU7K,IAAIiB,EAAKZ,SAClE,GAAI6K,EAAaxI,OAAS,EAAG,CAE3B,IAAMyI,EAAKD,EAAavH,KAAI,SAAAN,GAAC,OAAIA,EAAE5C,KAC7B2K,EAAKF,EAAavH,KAAI,SAAAN,GAAC,OAAIA,EAAEzC,KAC7ByK,EAAO3K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQyK,IACnBI,EAAO7K,KAAK8K,IAAL,MAAA9K,KAAI,YAAQyK,IACnBM,EAAO/K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQ0K,IACnBM,EAAOhL,KAAK8K,IAAL,MAAA9K,KAAI,YAAQ0K,IAEnBO,GAAWN,EAAOE,GAAQ,EAC1BK,GAAWH,EAAOC,GAAQ,EAC1BG,EAAQN,EAAOF,EACfS,EAASJ,EAAOD,EAIhBM,EAAQrL,KAAK4K,KAChBtD,OAAOgE,WAFM,KAEkBH,GAC/B7D,OAAOiE,YAHM,KAGmBH,EACjC,GAGFxI,EAAMC,QAAQC,SAASmI,EAASC,EAAS,KACzCtI,EAAMC,QAAQE,KAAKsI,EAAO,UAIN,eAAf3C,GAA+BlG,EACtC5D,YAAW,WACT,IAAM4L,EAAe3L,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAAI4J,GAAU7K,IAAIiB,EAAKZ,SAClE,GAAI6K,EAAaxI,OAAS,GAAKY,EAAMC,QAAS,CAE5C,IAAM4H,EAAKD,EAAavH,KAAI,SAAAN,GAAC,OAAIA,EAAE5C,KAC7B2K,EAAKF,EAAavH,KAAI,SAAAN,GAAC,OAAIA,EAAEzC,KAC7ByK,EAAO3K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQyK,IACnBI,EAAO7K,KAAK8K,IAAL,MAAA9K,KAAI,YAAQyK,IACnBM,EAAO/K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQ0K,IACnBM,EAAOhL,KAAK8K,IAAL,MAAA9K,KAAI,YAAQ0K,IAEnBO,GAAWN,EAAOE,GAAQ,EAC1BK,GAAWH,EAAOC,GAAQ,EAC1BG,EAAQN,EAAOF,EACfS,EAASJ,EAAOD,EAIhBM,EAAQrL,KAAK4K,KAChBtD,OAAOgE,WAFM,KAEkBH,GAC/B7D,OAAOiE,YAHM,KAGmBH,EACjC,GAGFxI,EAAMC,QAAQC,SAASmI,EAASC,EAAS,KACzCtI,EAAMC,QAAQE,KAAKsI,EAAO,QAE3B,KAGmB,aAAf3C,GAA6BE,EAAa5G,OAAS,GAC1DpD,YAAW,WACT,IAAM4L,EAAe3L,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAAI4J,GAAU7K,IAAIiB,EAAKZ,SAClE,GAAI6K,EAAaxI,OAAS,GAAKY,EAAMC,QAAS,CAE5C,IAAM4H,EAAKD,EAAavH,KAAI,SAAAN,GAAC,OAAIA,EAAE5C,KAC7B2K,EAAKF,EAAavH,KAAI,SAAAN,GAAC,OAAIA,EAAEzC,KAC7ByK,EAAO3K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQyK,IACnBI,EAAO7K,KAAK8K,IAAL,MAAA9K,KAAI,YAAQyK,IACnBM,EAAO/K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQ0K,IACnBM,EAAOhL,KAAK8K,IAAL,MAAA9K,KAAI,YAAQ0K,IAEnBO,GAAWN,EAAOE,GAAQ,EAC1BK,GAAWH,EAAOC,GAAQ,EAC1BG,EAAQN,EAAOF,EACfS,EAASJ,EAAOD,EAIhBM,EAAQrL,KAAK4K,KAChBtD,OAAOgE,WAFM,KAEkBH,GAC/B7D,OAAOiE,YAHM,KAGmBH,EACjC,GAGFxI,EAAMC,QAAQC,SAASmI,EAASC,EAAS,KACzCtI,EAAMC,QAAQE,KAAKsI,EAAO,QAE3B,OAGN,CAAClB,GAAWtL,EAAKC,MAAO8D,EAAO8F,EAAYF,EAAahG,EAAYwF,EAAYY,IAEnF,IAWM4C,GAAY,uCAAG,WAAOC,GAAP,2BAAAzO,EAAA,6DACnByO,EAAEC,iBADiB,kBAIMC,MAAM,2FAA4F,CACvHC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMhK,KAAKC,UAAU,CAAEgK,SAAU/D,MAPlB,cAIXgE,EAJW,gBAUEA,EAASC,OAVX,cAUXpN,EAVW,OAWXqN,EAAiBrN,EAAKsN,MAAQtN,EAAKnB,OAAS,GAElDuK,EAAciE,GACdlG,EAAa,CAAEvG,OAAQ,CAAEyG,MAAOgG,KAdf,UAgBXnP,EAAS,KAAMmP,GAhBJ,YAmBO,kDAAkDE,KAAKF,EAAevO,QAnB7E,wBAwBX0O,EAAiB,GAGjBH,EAAejL,SAAS,WAEpBqL,EAAgBJ,EAAelC,MAAM,oCAEzCqC,EAAiBC,EAAcrJ,KAAI,SAAA+G,GACjC,IAAMuC,EAAYvC,EAAMA,MAAM,4BAC9B,OAAOuC,EAAYA,EAAU,GAAK,QACjCxC,OAAOyC,UAEHN,EAAejL,SAAS,QAE3BwL,EAAcP,EAAelC,MAAM,0DAEvCqC,EAAiB,CAACI,EAAY,MAI1BC,EAAcR,EAAelC,MAAM,gBACzCqC,EAAiBK,EACfA,EAAYzJ,KAAI,SAAA+G,GACd,IAAMuC,EAAYvC,EAAMA,MAAM,4BAC9B,OAAOuC,EAAYA,EAAU,GAAK,QACjCxC,OAAOyC,SAAW,IAGzB3D,EAAgBwD,GAChB1D,EAAc,YArDC,4UA4DT5L,EAAS,KA5DA,6XAgEfa,QAAQC,MAAM,uBAAd,MAhEe,0DAAH,sDAuFZ8O,GAAmB,SAAC9H,GAAW,IAAD,EACVA,EAAMpF,OAAtBE,EAD0B,EAC1BA,KAAMuG,EADoB,EACpBA,MACdmC,GAAc,SAACuE,GAAD,sBACTA,EADS,eAEXjN,EAAOuG,QAIN2G,GAAe,uCAAG,gCAAA7P,EAAA,yDACjBoL,GAAeF,EADE,wDAIhB5C,EAAkB,SAACC,GACvB,OAAKA,EACEA,EAAIC,MAAM,KAAKvC,KAAI,SAAAwC,GAAI,OAAIA,EAAKC,OAAO,GAAG1H,cAAgByH,EAAKE,MAAM,GAAGC,iBAAezC,KAAK,KADlFoC,KAKfuH,EAAmB1E,EAAWtI,QAAQnC,SACjBmP,EAAiB3O,WAAW,YAAe2O,EAAiB3O,WAAW,cAC9F2O,EAAmB,WAAaA,GAG5B3P,EAAUL,EAAOK,UAfD,kBAiBdA,EAAQmB,IAAR,sIAGJ,CACEyO,QAAS7E,EAAavI,KACtBqN,QAAS1H,EAAgB8C,EAAWzI,MACpCC,KAAM0F,EAAgB8C,EAAWxI,MACjCC,SAAUyF,EAAgB8C,EAAWvI,UACrCC,QAASgN,IAzBO,wBA4Bd/P,EAASqL,EAAWzI,MA5BN,QA6BpBwI,EAAgB,MA7BI,kDA+BpBvK,QAAQC,MAAM,uBAAd,MA/BoB,yBAiCpBV,EAAQ6B,QAjCY,6EAAH,qDAsC7B,OACI,yBAAKmM,MAAM,OACT,0BAAM8B,SAAUzB,IACd,8BACE0B,YAAY,qCACZzF,MAAO,CAAE0F,QAAS,QAAShC,MAAO,MAAOC,OAAQ,OAAQgC,OAAQ,SAAU1F,UAAW,UACtFxB,MAAO8B,EACPqF,SAvJwB,SAACxI,GACzB,IAAMyI,EAAQzI,EAAMpF,OAAOyG,MAC3B+B,EAAcqF,GACdtH,EAAanB,GAETyI,EAAM3P,SACR8K,EAAe,MACfE,EAAc,cAkJlB,4BAAQ5D,KAAK,UAAb,QAEF,4BAAQwI,GAAG,YAAYC,QAAS,kBAAMlG,OAAOmG,KAAK,8CAA+C,YAAjG,eACA,4BAAQF,GAAG,OAAOC,QAAS,kBAAMlG,OAAOmG,KAAK,2CAA4C,YAAzF,QACA,4BACEF,GAAG,iBACHC,QAAS,kBAAMxJ,EAAYK,IAAgBR,KAC3C4D,MAAO,CACLiG,gBAAiB1J,EAAY,UAAY,UACzC6D,MAAO,QACP8F,OAAQ,OACRhG,QAAS,WACTiG,aAAc,MACdC,OAAQ,YAGT7J,EAAY,gBAAkB,kBAIhCvG,GACC,yBAAKgK,MAAO,CACVqG,SAAU,QACVC,IAAK,OACLC,MAAO,OACPrG,QAAS,WACT+F,gBAAiB,UACjB7F,MAAO,QACP+F,aAAc,MACdhG,SAAU,OACVqG,OAAQ,IACRd,QAAS,OACTe,WAAY,SACZC,IAAK,QAEL,yBAAK1G,MAAO,CACV0D,MAAO,MACPC,OAAQ,MACRwC,aAAc,MACdF,gBAAiB,OACjBU,UAAW,uBAnBf,sBAsBE,4BACEZ,QAASrH,EACTsB,MAAO,CACLiG,gBAAiB,cACjB7F,MAAO,QACP8F,OAAQ,kBACRC,aAAc,MACdjG,QAAS,UACTC,SAAU,OACViG,OAAQ,YATZ,UAkBJ,yBAAKpG,MAAO,CACVqG,SAAU,QACVC,IAAK,OACLC,MAAO,OACPrG,QAAS,WACT+F,gBAAiB1J,EAAY,UAAY,UACzC6D,MAAO,QACP+F,aAAc,MACdhG,SAAU,OACVqG,OAAQ,IACRd,QAAS,OACTe,WAAY,SACZC,IAAK,QAEL,yBAAK1G,MAAO,CACV0D,MAAO,MACPC,OAAQ,MACRwC,aAAc,MACdF,gBAAiB1J,EAAY,OAAS,OACtCoK,UAAWpK,EAAY,oBAAsB,UAE9CA,EAAY,sBAAwB,iBACpC5B,GACC,0BAAMqF,MAAO,CAAEG,SAAU,OAAQyG,QAAS,KAA1C,UACU,IAAIzN,KAAKwB,GAAgBkM,qBADnC,MAMJ,iLAQJ,kBAAC,IAAD,CACAC,IAAK3L,EACL4L,UAAW3P,EACX4P,OAAO,OACPC,UAAW,SAACnO,GAAD,OAAUA,EAAKV,UAAY,eACtC8O,YAjL8B,SAACpO,GAClBA,IACL4H,EAAgB5H,GAChB8H,EAAc,eAAK9H,IACnBgI,EAAahI,EAAKZ,MAClB8I,EAAelI,EAAKZ,MACpBgJ,EAAc,SAEdV,EAAc,MA0KtB2G,YAvK8B,SAACrO,GAErBgI,EADEhI,EACWA,EAAKZ,KAEL,OAoKvBkP,kBAAmB,WACjBtG,EAAa,MACbE,EAAe,MACfE,EAAc,MACdE,EAAgB,KAElBiG,iBAAkB,SAACvO,EAAMwO,GACvB,IAAMC,EACJhH,IACCzH,EAAKZ,KAAKiG,cAAc3E,SAAS+G,EAAWpC,gBAC1CrF,EAAKV,UAAYU,EAAKV,SAAS+F,cAAc3E,SAAS+G,EAAWpC,gBACjErF,EAAKX,MAAQW,EAAKX,KAAKgG,cAAc3E,SAAS+G,EAAWpC,gBAExDqJ,GADcnG,EAAexJ,IAAIiB,EAAKZ,MAC1BmK,GAAgBxK,IAAIiB,EAAKZ,OAE3CoP,EAAIG,YAAcD,EAAY,EAAM,GACpCF,EAAII,UAAY5O,EAAKZ,OAAS6C,EAAa,QAAU,QACrDuM,EAAIK,YAAcJ,EAAgB,MAAQ,QAC1CD,EAAIM,UAAYL,EAAgB,EAAI,EAEpCD,EAAIO,YACJP,EAAIQ,IAAIhP,EAAKR,GAAqB,IAAhBC,KAAKC,SAAgBM,EAAKL,GAAqB,IAAhBF,KAAKC,SAAgB,EAAG,EAAG,EAAID,KAAKwP,IACrFT,EAAIU,OACJV,EAAIW,SAEJX,EAAII,UAAY,OAChBJ,EAAIY,SAASpP,EAAKX,KAAMW,EAAKR,EAAI,GAAIQ,EAAKL,GAE1C6O,EAAIG,YAAc,GAEpBU,UAAW,SAAC3G,GACV,IAAMS,EAAoC,kBAAhBT,EAAKzJ,OAAsByJ,EAAKzJ,OAAOG,KAAOsJ,EAAKzJ,OACvEmK,EAAoC,kBAAhBV,EAAKxJ,OAAsBwJ,EAAKxJ,OAAOE,KAAOsJ,EAAKxJ,OAE7E,OADoBqK,GAAgBxK,IAAIoK,IAAeI,GAAgBxK,IAAIqK,GACtD,OAAS,QAEhCkG,YAAa,SAAC5G,GACZ,IAAMS,EAAoC,kBAAhBT,EAAKzJ,OAAsByJ,EAAKzJ,OAAOG,KAAOsJ,EAAKzJ,OACvEmK,EAAoC,kBAAhBV,EAAKxJ,OAAsBwJ,EAAKxJ,OAAOE,KAAOsJ,EAAKxJ,OAE7E,OADoBqK,GAAgBxK,IAAIoK,IAAeI,GAAgBxK,IAAIqK,GACtD,EAAM,KAE7BmG,cAAe,GACfC,2BAA4B,EAC5BC,2BAA4B,IAG3B9H,GAAgBE,GACf,yBAAKX,MAAO,CAAEqG,SAAU,WAAYC,IAAK,MAAOkC,KAAM,MAAOC,UAAW,wBAAyBvI,QAAS,OAAQ+F,gBAAiB,QAASC,OAAQ,kBAAmBwC,UAAW,kCAAmClC,OAAQ,MAC5N/F,EAAavI,OAAS6C,EACrB,oCACA,iDACA,2BAAG,yCACH,2BACA7C,KAAK,OACLuG,MAAOkC,EAAWzI,KAClBuN,YAAY,aACZG,SAAUV,GACVyD,QAAS,SAAC3E,GAAD,OAAOA,EAAEhM,OAAOyN,YAAc,IACvCmD,OAAQ,SAAC5E,GAAD,OAAOA,EAAEhM,OAAOyN,YAAc,iBAGtC,2BAAG,yCACH,2BACAvN,KAAK,OACLuG,MAAOkC,EAAWxI,KAClBsN,YAAY,aACZG,SAAUV,GACVyD,QAAS,SAAC3E,GAAD,OAAOA,EAAEhM,OAAOyN,YAAc,IACvCmD,OAAQ,SAAC5E,GAAD,OAAOA,EAAEhM,OAAOyN,YAAc,iBAGtC,2BAAG,6CACH,2BACAvN,KAAK,WACLuG,MAAOkC,EAAWvI,SAClBqN,YAAY,iBACZG,SAAUV,GACVyD,QAAS,SAAC3E,GAAD,OAAOA,EAAEhM,OAAOyN,YAAc,IACvCmD,OAAQ,SAAC5E,GAAD,OAAOA,EAAEhM,OAAOyN,YAAc,qBAGtC,2BAAG,4CACH,2BACAvN,KAAK,UACLuG,MAAOkC,EAAWtI,QAClBoN,YAAY,gBACZG,SAAUV,GACVyD,QAAS,SAAC3E,GAAD,OAAOA,EAAEhM,OAAOyN,YAAc,IACvCmD,OAAQ,SAAC5E,GAAD,OAAOA,EAAEhM,OAAOyN,YAAc,oBAGtC,2BAAG,4BAAQM,QAASX,IAAjB,UAGH,oCACA,4CACA,2BAAG,yCAAH,WAA2B3E,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAcvI,MACzC,2BAAG,yCAAH,WAA2BuI,QAA3B,IAA2BA,OAA3B,EAA2BA,EAActI,MACzC,2BAAG,6CAAH,WAA+BsI,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAcrI,UAC7C,2BAAG,4CAA0B,IAC5BqI,EAAapI,SAAoC,KAAzBoI,EAAapI,QACpC,uBAAGwQ,KAAMpI,EAAapI,QAASL,OAAO,SAAS8Q,IAAI,uBAClDrI,EAAapI,QAAQkC,OAAS,GAA9B,UACMkG,EAAapI,QAAQzB,UAAU,EAAG,IADxC,OAEC6J,EAAapI,SAGf,KAIJ,4BAAQ0N,QAAS,kBAAMrF,EAAgB,QAAvC,YAWetL,IC/sCJ2T,MARf,YAAwB,IAAV1T,EAAS,EAATA,OACZ,OACE,yBAAK2T,UAAU,OACb,kBAAC,EAAD,CAAW3T,OAAQA,MCKL0P,QACW,cAA7BlF,OAAOzH,SAAS6Q,UAEe,UAA7BpJ,OAAOzH,SAAS6Q,UAEhBpJ,OAAOzH,SAAS6Q,SAAS1G,MACvB,2D,aCXAlN,EAAS6T,SACbC,iIAAYC,WAAa,wCACzBF,OAAWG,MACTF,iIAAYG,YAAc,QAC1BH,iIAAYI,gBAAkB,+CAEhC,IAMFC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKrU,OAAQA,KAEfoH,SAASkN,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9T,GACLD,QAAQC,MAAMA,EAAM+T,c","file":"static/js/main.28a2d4cd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\n      latestNode: null,\n      lastUpdateTime: null,\n      isPolling: false,\n      useWebSocket: false,\n      wsConnected: false,\n      customQueryActive: false,\n      customQueryTimeout: null\n    };\n\n    // Store the default query for polling (separate from user input)\n    this.defaultQuery = `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n        RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n        v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`;\n\n    // Store the last known data hash for change detection\n    this.lastDataHash = null;\n    this.pollingInterval = null;\n    this.websocket = null;\n    this.lastUpdateTime = 0;\n    this.updateDebounceTime = 2000; // 2 seconds debounce\n    this.updateCount = 0;\n    this.maxUpdatesPerCycle = 3; // Prevent infinite loops\n  }\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    \n    // Determine which query to use\n    let queryToExecute = queryOverride;\n    let isCustomQuery = false;\n    \n    if (!queryToExecute) {\n      // For polling, use default query unless a custom query is active\n      if (newNodeName === null && !queryOverride && !this.state.customQueryActive) {\n        queryToExecute = this.defaultQuery;\n      } else {\n        // For user-initiated queries, use state.query but validate it\n        queryToExecute = this.state.query;\n        isCustomQuery = true;\n      }\n    } else if (queryOverride !== this.defaultQuery) {\n      // If a custom query is being executed\n      isCustomQuery = true;\n    }\n    \n    // Validate the query\n    if (!queryToExecute || typeof queryToExecute !== 'string' || queryToExecute.trim() === '') {\n      console.error(\"Invalid query:\", queryToExecute);\n      return;\n    }\n    \n    // Check if query starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = queryToExecute.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      console.error(\"Invalid Cypher query format:\", queryToExecute);\n      return;\n    }\n    \n    try {\n      console.log(\"Executing query:\", queryToExecute.substring(0, 100) + \"...\");\n      console.log(\"Is custom query:\", isCustomQuery);\n      res = await session.run(queryToExecute);\n      \n      // If this was a custom query, set a timeout to return to default\n      if (isCustomQuery) {\n        this.setState({ customQueryActive: true });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Set timeout to return to default query after 30 seconds\n        const timeout = setTimeout(() => {\n          console.log(\"Returning to default query after custom query timeout\");\n          this.setState({ \n            customQueryActive: false, \n            customQueryTimeout: null \n          });\n        }, 30000); // 30 seconds\n        \n        this.setState({ customQueryTimeout: timeout });\n      }\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      console.error(\"Query was:\", queryToExecute);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\") && record.get(\"source\") && record.get(\"target\") && \n          typeof record.get(\"source\") === 'string' && typeof record.get(\"target\") === 'string') {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            location: record.get(\"sourceLocation\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            location: record.get(\"targetLocation\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node && node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                location: node.properties.location || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (node && typeof node === 'object') {\n            // Handle SET query results that might have different structure\n            const name = node.name || node.u_name || `Node-${Date.now()}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.role || node.u_role || \"\",\n                location: node.location || node.u_location || \"\",\n                website: node.website || node.u_website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (typeof node === 'string' && key.includes('name')) {\n            // Handle direct string values from queries like RETURN u.name, u.role\n            const name = node;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: record.get(key.replace('name', 'role')) || \"\",\n                location: record.get(key.replace('name', 'location')) || \"\",\n                website: record.get(key.replace('name', 'website')) || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n\n    // Calculate hash of current data for change detection\n    const currentDataHash = this.calculateDataHash(updatedData);\n    const hasChanged = this.lastDataHash !== currentDataHash;\n    \n    // Also use more detailed change detection\n    const hasDetailedChange = this.hasDataChanged(updatedData, this.state.data);\n    \n    // Additional check: if the data is exactly the same, don't update\n    const isDataIdentical = JSON.stringify(updatedData) === JSON.stringify(this.state.data);\n    \n    // Store a reference to the current state data for next comparison\n    const currentStateData = this.state.data;\n    \n    console.log(\"=== Change Detection Debug ===\");\n    console.log(\"Current hash:\", currentDataHash);\n    console.log(\"Last hash:\", this.lastDataHash);\n    console.log(\"Hash changed:\", hasChanged);\n    console.log(\"Detailed change detected:\", hasDetailedChange);\n    console.log(\"Data identical:\", isDataIdentical);\n    console.log(\"Current nodes count:\", updatedData.nodes.length);\n    console.log(\"Current links count:\", updatedData.links.length);\n    console.log(\"State nodes count:\", this.state.data.nodes.length);\n    console.log(\"State links count:\", this.state.data.links.length);\n    \n    if (hasChanged || hasDetailedChange) {\n      console.log(\"Graph data has changed, updating...\");\n    } else {\n      console.log(\"No changes detected, skipping update\");\n    }\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    \n    // Only update state if there's a change or if it's the initial load\n    const now = Date.now();\n    const timeSinceLastUpdate = now - this.lastUpdateTime;\n    \n    if ((hasChanged || hasDetailedChange || this.lastDataHash === null) && \n        !isDataIdentical &&\n        (timeSinceLastUpdate > this.updateDebounceTime || this.lastDataHash === null) &&\n        this.updateCount < this.maxUpdatesPerCycle) {\n      // Update the hash only when we actually update the state\n      this.lastDataHash = currentDataHash;\n      this.lastUpdateTime = now;\n      this.updateCount++;\n      console.log(\"Updating state after\", timeSinceLastUpdate, \"ms (update #\", this.updateCount, \")\");\n      \n      this.setState({ \n        data: updatedData, \n        latestNode: newNodeName,\n        lastUpdateTime: hasChanged ? now : this.state.lastUpdateTime\n      }, () => {\n        if (newNodeName) {\n          setTimeout(() => {\n            let newNode = nodes.find((n) => n.name === newNodeName);\n            if (newNode && this.fgRef.current) {\n              console.log(\"Focusing on:\", newNode);\n              this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n              this.fgRef.current.zoom(1.25);\n            }\n          }, 2000);\n        }\n      });\n    } else {\n      // Even if no change, we might need to update latestNode for new additions\n      if (newNodeName && this.state.latestNode !== newNodeName) {\n        this.setState({ latestNode: newNodeName });\n      }\n      // Reset update count when no changes are detected\n      this.updateCount = 0;\n    }\n  };\n\n  // Calculate a simple hash of the graph data for change detection\n  calculateDataHash = (data) => {\n    // Only hash the actual data, not the random coordinates\n    const nodesStr = data.nodes.map(n => `${n.name}:${n.role}:${n.location}:${n.website}`).sort().join('|');\n    const linksStr = data.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }).sort().join('|');\n    return `${nodesStr}|${linksStr}`;\n  };\n\n  // More detailed change detection\n  hasDataChanged = (newData, oldData) => {\n    if (!oldData || !oldData.nodes || !oldData.links) return true;\n    \n    // Check if number of nodes or links changed\n    if (newData.nodes.length !== oldData.nodes.length || \n        newData.links.length !== oldData.links.length) {\n      return true;\n    }\n    \n    // Check if any node properties changed\n    const oldNodesMap = new Map(oldData.nodes.map(n => [n.name, n]));\n    for (const newNode of newData.nodes) {\n      const oldNode = oldNodesMap.get(newNode.name);\n      if (!oldNode || \n          oldNode.role !== newNode.role || \n          oldNode.location !== newNode.location || \n          oldNode.website !== newNode.website) {\n        return true;\n      }\n    }\n    \n    // Check if any links changed\n    const oldLinksSet = new Set(oldData.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }));\n    \n    for (const newLink of newData.links) {\n      const source = typeof newLink.source === 'object' ? newLink.source.name : newLink.source;\n      const target = typeof newLink.target === 'object' ? newLink.target.name : newLink.target;\n      if (!oldLinksSet.has(`${source}:${target}`)) {\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // Start polling for changes\n  startPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    \n    this.setState({ isPolling: true });\n    this.pollingInterval = setInterval(() => {\n      // Only poll if the tab is active (to save resources)\n      if (!document.hidden) {\n        // Use default query for polling, but respect custom query state\n        if (this.state.customQueryActive) {\n          console.log(\"Skipping poll - custom query active\");\n          return;\n        }\n        this.loadData(null, this.defaultQuery);\n      }\n    }, 5000); // Check every 5 seconds\n    \n    // Reset update count every 30 seconds to prevent permanent blocking\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n    }\n    this.updateCountResetInterval = setInterval(() => {\n      this.updateCount = 0;\n      console.log(\"Reset update count\");\n    }, 30000);\n  };\n\n  // Stop polling\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n      this.updateCountResetInterval = null;\n    }\n    this.setState({ isPolling: false });\n  };\n\n  // WebSocket methods for real-time updates\n  connectWebSocket = () => {\n    try {\n      // Replace with your WebSocket server URL\n      this.websocket = new WebSocket('wss://your-websocket-server.com');\n      \n      this.websocket.onopen = () => {\n        console.log('WebSocket connected');\n        this.setState({ wsConnected: true, useWebSocket: true });\n      };\n      \n      this.websocket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        if (message.type === 'graph_update') {\n          console.log('Received graph update via WebSocket');\n          this.loadData(null, this.defaultQuery); // Reload data when update is received\n        }\n      };\n      \n      this.websocket.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.setState({ wsConnected: false });\n        // Fallback to polling if WebSocket fails\n        setTimeout(() => {\n          if (!this.state.isPolling) {\n            this.startPolling();\n          }\n        }, 5000);\n      };\n      \n      this.websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.setState({ wsConnected: false });\n      };\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      // Fallback to polling\n      this.startPolling();\n    }\n  };\n\n  disconnectWebSocket = () => {\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n    this.setState({ wsConnected: false, useWebSocket: false });\n  };\n\n  // Enhanced componentDidMount to try WebSocket first, then fallback to polling\n  componentDidMount() {\n    // Validate and clean the query state first\n    this.validateAndCleanQuery();\n    \n    this.loadData();\n    \n    // Try WebSocket first, fallback to polling\n    this.connectWebSocket();\n    \n    // Add visibility change listener to pause polling when tab is not active\n    this.handleVisibilityChange = () => {\n      if (document.hidden && this.state.isPolling) {\n        console.log('Tab hidden, pausing polling');\n      } else if (!document.hidden && this.state.isPolling) {\n        console.log('Tab visible, resuming polling');\n      }\n    };\n    \n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n  }\n\n  componentWillUnmount() {\n    // Clean up both polling and WebSocket\n    this.stopPolling();\n    this.disconnectWebSocket();\n    \n    // Clear custom query timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n    \n    // Remove visibility change listener\n    if (this.handleVisibilityChange) {\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    // Helper function to capitalize first letter of each word\n    const capitalizeWords = (str) => {\n      if (!str) return str;\n      return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    };\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = 'Affiliate', \n                       u.location = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = 'Holder', \n                       nfc.location = $nfcUser + \"'s network\", \n                       nfc.website = ''\n\n         MERGE (awu:User {name: $awuUser}) \n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\n        { \n          user: capitalizeWords(newUser), \n          nfcUser: capitalizeWords(nfcUserName), \n          awuUser: \"Awu Chen\" \n        }\n        );\n      await this.loadData(newUser);\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    // Only update the query state if it's a valid Cypher query or empty\n    const newQuery = event.target.value;\n    \n    // Allow empty queries (for clearing)\n    if (!newQuery || newQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = newQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (isValidQuery) {\n      this.setState({ query: newQuery });\n    } else {\n      // If invalid, don't update the query state\n      console.log(\"Invalid Cypher query format, not updating state:\", newQuery);\n    }\n  };\n\n  // Method to reset query to default\n  resetQuery = () => {\n    this.setState({ \n      query: this.defaultQuery,\n      customQueryActive: false,\n      customQueryTimeout: null\n    });\n    \n    // Clear any existing timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n  };\n\n  // Method to validate and clean the current query state\n  validateAndCleanQuery = () => {\n    const currentQuery = this.state.query;\n    \n    // Check if current query is valid\n    if (!currentQuery || typeof currentQuery !== 'string' || currentQuery.trim() === '') {\n      console.log(\"Resetting invalid query to default\");\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = currentQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      console.log(\"Resetting invalid query to default:\", currentQuery);\n      this.setState({ query: this.defaultQuery });\n    }\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n        driver={this.driver} // Pass the driver\n        isPolling={this.state.isPolling}\n        lastUpdateTime={this.state.lastUpdateTime}\n        startPolling={this.startPolling}\n        stopPolling={this.stopPolling}\n        customQueryActive={this.state.customQueryActive}\n        resetQuery={this.resetQuery}\n    />\n  } />\n  </Routes>\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      const newUser = `User-${Date.now()}`;\n\n      try {\n        await addNode(newUser, username); // pass dynamic user\n        } catch (error) {\n          console.error(\"Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/craft-network/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap for {username}...</div>\n      };\n\n              const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver, isPolling, lastUpdateTime, startPolling, stopPolling, customQueryActive, resetQuery }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', 'latestNode', or 'mutation'\n        const [mutatedNodes, setMutatedNodes] = useState([]); // Track nodes created/modified by mutation queries\n\n        // Detect when latestNode changes (NFC addition) and set lastAction\n        useEffect(() => {\n          if (latestNode) {\n            setLastAction('latestNode');\n          }\n        }, [latestNode]);\n\n        // Initial zoom when graph first loads\n        useEffect(() => {\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\n            // Wait a bit for the graph to settle, then zoom to 2x\n            setTimeout(() => {\n              if (fgRef.current) {\n                fgRef.current.zoom(2, 1000);\n              }\n            }, 1000);\n          }\n        }, [data.nodes, fgRef, lastAction]);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\n        const visibilityFocus = focusNode || clickedNode || latestNode;\n        // For zoom: use the most recent action\n        const zoomFocus = lastAction === 'search' ? 'search' : \n                         lastAction === 'click' ? clickedNode : \n                         lastAction === 'latestNode' ? latestNode :\n                         lastAction === 'mutation' ? mutatedNodes[0] : null;\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\n        \n        // Always include search results in visibility if there's a search term\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        // Always include mutated nodes in visibility if there was a mutation\n        if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n          mutatedNodes.forEach(nodeName => {\n            const nodeNeighbors = getNDegreeNodes(nodeName, 0); // Always use 0 degree for mutations\n            nodeNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        const zoomNodes = lastAction === 'search' ? \n                         (() => {\n                           const searchMatches = data.nodes.filter(node => \n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                             (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n                           );\n                           const searchNodes = new Set();\n                           searchMatches.forEach(match => {\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\n                           });\n                           return searchNodes;\n                         })() : \n                         lastAction === 'mutation' ?\n                         (() => {\n                           const mutationNodes = new Set();\n                           mutatedNodes.forEach(nodeName => {\n                             const nodeNeighbors = getNDegreeNodes(nodeName, 1); // Always use 1 degree for mutations\n                             nodeNeighbors.forEach(neighbor => mutationNodes.add(neighbor));\n                           });\n                           return mutationNodes;\n                         })() :\n                         getNDegreeNodes(zoomFocus, visibleDegree);\n        \n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && zoomNodes.size > 0) {\n            // Zoom based on last action\n            if (lastAction === 'click' && clickedNode) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (lastAction === 'search' && inputValue) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (lastAction === 'latestNode' && latestNode) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n            // For mutation queries, zoom to the mutated nodes\n            else if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for mutation\n            }\n          }\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue, mutatedNodes]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n          // Clear other actions when searching\n          if (input.trim()) {\n            setClickedNode(null);\n            setLastAction('search');\n          }\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            setInputValue(generatedQuery);\n            handleChange({ target: { value: generatedQuery } });\n\n            await loadData(null, generatedQuery);\n\n            // Check if the generated query is a mutation query (updates the graph)\n            const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(generatedQuery.trim());\n            \n            // If it's a mutation query, reload with the default MATCH query to show the updated graph\n            if (isMutationQuery) {\n              // Extract node names from the mutation query to track what was created/modified\n              let extractedNodes = [];\n              \n              // Handle different mutation query patterns\n              if (generatedQuery.includes('DELETE')) {\n                // For DELETE queries, extract from patterns like DELETE (u:User {name: \"John\"}) or MATCH (u:User {name: \"John\"}) DELETE u\n                const deleteMatches = generatedQuery.match(/\\{name:\\s*['\"]([^'\"]+)['\"]\\}/g);\n                if (deleteMatches) {\n                  extractedNodes = deleteMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean);\n                }\n              } else if (generatedQuery.includes('SET')) {\n                // For SET queries, extract from MATCH clause like MATCH (u:User {name: \"John\"}) SET u.role = 'admin'\n                const matchClause = generatedQuery.match(/MATCH\\s*\\([^)]*\\{name:\\s*['\"]([^'\"]+)['\"][^}]*\\}\\)/i);\n                if (matchClause) {\n                  extractedNodes = [matchClause[1]];\n                }\n              } else {\n                // For CREATE/MERGE queries, extract from {name: \"nodeName\"} patterns\n                const nodeMatches = generatedQuery.match(/\\{([^}]+)\\}/g);\n                extractedNodes = nodeMatches ? \n                  nodeMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean) : [];\n              }\n              \n              setMutatedNodes(extractedNodes);\n              setLastAction('mutation');\n              \n              const defaultQuery = `\n                MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n                RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n                       v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite\n              `;\n              await loadData(null, defaultQuery);\n            }\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          setLastAction('click');\n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          // Ensure the website has \"https://\" if missing\n          let formattedWebsite = editedNode.website.trim();\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\n            formattedWebsite = \"https://\" + formattedWebsite;\n          }\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.location = $location, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: capitalizeWords(editedNode.name),\n                role: capitalizeWords(editedNode.role),\n                location: capitalizeWords(editedNode.location),\n                website: formattedWebsite, // Use the corrected website\n              }\n            );\n            await loadData(editedNode.name); // Keep the edited node as latestNode\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Show me all the artist in Kyoto...\"\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n      <button \n        id=\"toggle-polling\" \n        onClick={() => isPolling ? stopPolling() : startPolling()}\n        style={{ \n          backgroundColor: isPolling ? \"#f44336\" : \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          padding: \"8px 16px\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        }}\n      >\n        {isPolling ? \"Pause Updates\" : \"Resume Updates\"}\n      </button>\n      \n      {/* Custom query indicator and reset button */}\n      {customQueryActive && (\n        <div style={{\n          position: \"fixed\",\n          top: \"60px\",\n          right: \"10px\",\n          padding: \"8px 12px\",\n          backgroundColor: \"#FF9800\",\n          color: \"white\",\n          borderRadius: \"4px\",\n          fontSize: \"12px\",\n          zIndex: 1000,\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"8px\"\n        }}>\n          <div style={{\n            width: \"8px\",\n            height: \"8px\",\n            borderRadius: \"50%\",\n            backgroundColor: \"#fff\",\n            animation: \"pulse 1s infinite\"\n          }}></div>\n          Custom Query Active\n          <button\n            onClick={resetQuery}\n            style={{\n              backgroundColor: \"transparent\",\n              color: \"white\",\n              border: \"1px solid white\",\n              borderRadius: \"2px\",\n              padding: \"2px 6px\",\n              fontSize: \"10px\",\n              cursor: \"pointer\"\n            }}\n          >\n            Reset\n          </button>\n        </div>\n      )}\n      \n      {/* Real-time update status indicator */}\n      <div style={{ \n        position: \"fixed\", \n        top: \"10px\", \n        right: \"10px\", \n        padding: \"8px 12px\", \n        backgroundColor: isPolling ? \"#4CAF50\" : \"#f44336\", \n        color: \"white\", \n        borderRadius: \"4px\", \n        fontSize: \"12px\",\n        zIndex: 1000,\n        display: \"flex\",\n        alignItems: \"center\",\n        gap: \"8px\"\n      }}>\n        <div style={{ \n          width: \"8px\", \n          height: \"8px\", \n          borderRadius: \"50%\", \n          backgroundColor: isPolling ? \"#fff\" : \"#ccc\",\n          animation: isPolling ? \"pulse 2s infinite\" : \"none\"\n        }}></div>\n        {isPolling ? \"Live Updates Active\" : \"Updates Paused\"}\n        {lastUpdateTime && (\n          <span style={{ fontSize: \"10px\", opacity: 0.8 }}>\n            (Last: {new Date(lastUpdateTime).toLocaleTimeString()})\n          </span>\n        )}\n      </div>\n      \n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.location || \"No Location\"}\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n    setLastAction(null);\n    setMutatedNodes([]);\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())));\n    const isOneDegree = oneDegreeNodes.has(node.name);\n    const isNDegree = visibilityNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = \"gray\";\n    ctx.fillText(node.role, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {selectedNode && editedNode && (\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\n    {selectedNode.name === latestNode ? (\n      <>\n      <h3>Edit Network Info</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n      placeholder=\"Enter name\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \n      /></p>\n\n      <p><strong>Role:</strong>\n      <input \n      name=\"role\" \n      value={editedNode.role} \n      placeholder=\"Enter role\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \n      /></p>\n\n      <p><strong>Location:</strong>\n      <input \n      name=\"location\" \n      value={editedNode.location} \n      placeholder=\"Enter location\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter location\"} \n      /></p>\n\n      <p><strong>Website:</strong>\n      <input \n      name=\"website\" \n      value={editedNode.website} \n      placeholder=\"Enter website\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \n      /></p>\n\n      <p><button onClick={saveNodeChanges}>Save</button></p>\n      </>\n      ) : (\n      <>\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\n      <p><strong>Location:</strong> {selectedNode?.location}</p>\n      <p><strong>Website:</strong>{\" \"}\n      {selectedNode.website && selectedNode.website !== \"\" ? (\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n        ) : (\n        \"\"\n      )}</p>\n      </>\n    )}\n    <button onClick={() => setSelectedNode(null)}>Close</button>\n    </div>\n  )}\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}