{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","queryOverride","session","database","run","state","query","res","console","error","setState","data","nodes","links","close","nodesMap","Map","records","forEach","record","has","get","source","target","set","name","role","location","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","u_name","Date","now","u_role","u_location","u_website","includes","replace","Array","from","values","updatedData","currentDataHash","calculateDataHash","hasChanged","lastDataHash","hasDetailedChange","hasDataChanged","isDataIdentical","JSON","stringify","log","length","localStorage","setItem","timeSinceLastUpdate","lastUpdateTime","updateDebounceTime","updateCount","maxUpdatesPerCycle","latestNode","setTimeout","newNode","find","n","fgRef","current","centerAt","zoom","nodesStr","map","sort","join","linksStr","l","newData","oldData","oldNodesMap","oldNode","oldLinksSet","Set","newLink","startPolling","pollingInterval","clearInterval","isPolling","setInterval","document","hidden","updateCountResetInterval","stopPolling","connectWebSocket","websocket","WebSocket","onopen","wsConnected","useWebSocket","onmessage","event","parse","type","onclose","onerror","disconnectWebSocket","addNodeNFC","newUser","nfcUserName","capitalizeWords","str","split","word","charAt","toUpperCase","slice","toLowerCase","user","nfcUser","awuUser","handleChange","value","React","createRef","defaultData","this","handleVisibilityChange","addEventListener","removeEventListener","path","element","addNode","Component","NFCTrigger","useLocation","username","useParams","useEffect","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","mutatedNodes","setMutatedNodes","oneDegreeNodes","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","visibilityFocus","zoomFocus","visibilityNodes","trim","filter","match","neighbor","nodeName","zoomNodes","searchMatches","searchNodes","mutationNodes","size","visibleNodes","xs","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","test","extractedNodes","deleteMatches","nameMatch","Boolean","matchClause","nodeMatches","handleEditChange","prev","saveNodeChanges","formattedWebsite","startsWith","oldName","newName","onSubmit","placeholder","display","margin","onChange","input","id","onClick","open","backgroundColor","border","borderRadius","cursor","position","top","right","zIndex","alignItems","gap","animation","opacity","toLocaleTimeString","ref","graphData","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkColor","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","left","transform","boxShadow","onFocus","onBlur","href","rel","substring","App","className","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uXAKMA,E,kDACJ,cAAyB,IAAD,EAAVC,EAAU,EAAVA,OAAU,4BACtB,gBA+BFC,SAhCwB,sBAgCb,kEAAAC,EAAA,6DAAOC,EAAP,+BAAqB,KAAMC,EAA3B,+BAA2C,KAChDC,EAAU,EAAKL,OAAOK,QAAQ,CAAEC,SAAU,UADrC,kBAIKD,EAAQE,IAAIH,GAAiB,EAAKI,MAAMC,OAJ7C,OAIPC,EAJO,8DAMPC,QAAQC,MAAM,sBAAd,MACA,EAAKC,SAAS,CAAEC,KAAM,CAAEC,MAAO,GAAIC,MAAO,MAPnC,4CAUPX,EAAQY,QAVD,qBAaLC,EAAW,IAAIC,IACfH,EAAQ,GAGZN,EAAIU,QAAQC,SAAQ,SAACC,GACnB,GAAIA,EAAOC,IAAI,WAAaD,EAAOC,IAAI,WAAaD,EAAOE,IAAI,WAAaF,EAAOE,IAAI,WACnD,kBAAzBF,EAAOE,IAAI,WAA0D,kBAAzBF,EAAOE,IAAI,UAAwB,CAExF,IAAIC,EAASH,EAAOE,IAAI,UACpBE,EAASJ,EAAOE,IAAI,UAEnBN,EAASK,IAAIE,IAChBP,EAASS,IAAIF,EAAQ,CACnBG,KAAMH,EACNI,KAAMP,EAAOE,IAAI,cACjBM,SAAUR,EAAOE,IAAI,kBACrBO,QAAST,EAAOE,IAAI,iBACpBQ,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,WAIPhB,EAASK,IAAIG,IAChBR,EAASS,IAAID,EAAQ,CACnBE,KAAMF,EACNG,KAAMP,EAAOE,IAAI,cACjBM,SAAUR,EAAOE,IAAI,kBACrBO,QAAST,EAAOE,IAAI,iBACpBQ,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,WAIRhB,EAASK,IAAIE,IAAWP,EAASK,IAAIG,GACvCV,EAAMoB,KAAK,CAAEX,SAAQC,WAE7Bf,QAAQ0B,KAAK,wBAAyB,CAAEZ,SAAQC,gBAI1CJ,EAAOgB,KAAKjB,SAAQ,SAACkB,GACnB,IAAMC,EAAOlB,EAAOE,IAAIe,GACxB,GAAIC,GAAQA,EAAKC,YAAcD,EAAKE,SAAU,CAC5C,IAAMd,EAAOY,EAAKC,WAAWb,MAAhB,eAAgCY,EAAKE,SAASC,KACtDzB,EAASK,IAAIK,IAChBV,EAASS,IAAIC,EAAM,CACjBA,OACAC,KAAMW,EAAKC,WAAWZ,MAAQ,GAC9BC,SAAUU,EAAKC,WAAWX,UAAY,GACtCC,QAASS,EAAKC,WAAWV,SAAW,GACpCC,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,gBAGP,GAAIM,GAAwB,kBAATA,EAAmB,CAE3C,IAAMZ,EAAOY,EAAKZ,MAAQY,EAAKI,QAAlB,eAAoCC,KAAKC,OACjD5B,EAASK,IAAIK,IAChBV,EAASS,IAAIC,EAAM,CACjBA,OACAC,KAAMW,EAAKX,MAAQW,EAAKO,QAAU,GAClCjB,SAAUU,EAAKV,UAAYU,EAAKQ,YAAc,GAC9CjB,QAASS,EAAKT,SAAWS,EAAKS,WAAa,GAC3CjB,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,gBAGP,GAAoB,kBAATM,GAAqBD,EAAIW,SAAS,QAAS,CAE3D,IAAMtB,EAAOY,EACRtB,EAASK,IAAIK,IAChBV,EAASS,IAAIC,EAAM,CACjBA,OACAC,KAAMP,EAAOE,IAAIe,EAAIY,QAAQ,OAAQ,UAAY,GACjDrB,SAAUR,EAAOE,IAAIe,EAAIY,QAAQ,OAAQ,cAAgB,GACzDpB,QAAST,EAAOE,IAAIe,EAAIY,QAAQ,OAAQ,aAAe,GACvDnB,EAAmB,IAAhBC,KAAKC,SACRC,EAAmB,IAAhBF,KAAKC,kBAQdnB,EAAQqC,MAAMC,KAAKnC,EAASoC,UAC5BC,EAAc,CAAExC,QAAOC,SAGvBwC,EAAkB,EAAKC,kBAAkBF,GACzCG,EAAa,EAAKC,eAAiBH,EAGnCI,EAAoB,EAAKC,eAAeN,EAAa,EAAK/C,MAAMM,MAGhEgD,EAAkBC,KAAKC,UAAUT,KAAiBQ,KAAKC,UAAU,EAAKxD,MAAMM,MAGzD,EAAKN,MAAMM,KAEpCH,QAAQsD,IAAI,kCACZtD,QAAQsD,IAAI,gBAAiBT,GAC7B7C,QAAQsD,IAAI,aAAc,EAAKN,cAC/BhD,QAAQsD,IAAI,gBAAiBP,GAC7B/C,QAAQsD,IAAI,4BAA6BL,GACzCjD,QAAQsD,IAAI,kBAAmBH,GAC/BnD,QAAQsD,IAAI,uBAAwBV,EAAYxC,MAAMmD,QACtDvD,QAAQsD,IAAI,uBAAwBV,EAAYvC,MAAMkD,QACtDvD,QAAQsD,IAAI,qBAAsB,EAAKzD,MAAMM,KAAKC,MAAMmD,QACxDvD,QAAQsD,IAAI,qBAAsB,EAAKzD,MAAMM,KAAKE,MAAMkD,QAEpDR,GAAcE,EAChBjD,QAAQsD,IAAI,uCAEZtD,QAAQsD,IAAI,wCAGdE,aAAaC,QAAQ,YAAaL,KAAKC,UAAUT,IAG3CT,EAAMD,KAAKC,MACXuB,EAAsBvB,EAAM,EAAKwB,gBAElCZ,GAAcE,GAA2C,OAAtB,EAAKD,gBACxCG,IACAO,EAAsB,EAAKE,oBAA4C,OAAtB,EAAKZ,eACvD,EAAKa,YAAc,EAAKC,oBAE1B,EAAKd,aAAeH,EACpB,EAAKc,eAAiBxB,EACtB,EAAK0B,cACL7D,QAAQsD,IAAI,uBAAwBI,EAAqB,eAAgB,EAAKG,YAAa,KAE3F,EAAK3D,SAAS,CACZC,KAAMyC,EACNmB,WAAYvE,EACZmE,eAAgBZ,EAAaZ,EAAM,EAAKtC,MAAM8D,iBAC7C,WACGnE,GACFwE,YAAW,WACT,IAAIC,EAAU7D,EAAM8D,MAAK,SAACC,GAAD,OAAOA,EAAElD,OAASzB,KACvCyE,GAAW,EAAKG,MAAMC,UACxBrE,QAAQsD,IAAI,eAAgBW,GAC5B,EAAKG,MAAMC,QAAQC,SAASL,EAAQ5C,EAAG4C,EAAQzC,EAAG,MAClD,EAAK4C,MAAMC,QAAQE,KAAK,SAEzB,UAKH/E,GAAe,EAAKK,MAAMkE,aAAevE,GAC3C,EAAKU,SAAS,CAAE6D,WAAYvE,IAG9B,EAAKqE,YAAc,GAzKZ,+DAhCa,EA8MxBf,kBAAoB,SAAC3C,GAEnB,IAAMqE,EAAWrE,EAAKC,MAAMqE,KAAI,SAAAN,GAAC,gBAAOA,EAAElD,KAAT,YAAiBkD,EAAEjD,KAAnB,YAA2BiD,EAAEhD,SAA7B,YAAyCgD,EAAE/C,YAAWsD,OAAOC,KAAK,KAC7FC,EAAWzE,EAAKE,MAAMoE,KAAI,SAAAI,GAC9B,IAAM/D,EAA6B,kBAAb+D,EAAE/D,OAAsB+D,EAAE/D,OAAOG,KAAO4D,EAAE/D,OAC1DC,EAA6B,kBAAb8D,EAAE9D,OAAsB8D,EAAE9D,OAAOE,KAAO4D,EAAE9D,OAChE,MAAM,GAAN,OAAUD,EAAV,YAAoBC,MACnB2D,OAAOC,KAAK,KACf,MAAM,GAAN,OAAUH,EAAV,YAAsBI,IAtNA,EA0NxB1B,eAAiB,SAAC4B,EAASC,GACzB,IAAKA,IAAYA,EAAQ3E,QAAU2E,EAAQ1E,MAAO,OAAO,EAGzD,GAAIyE,EAAQ1E,MAAMmD,SAAWwB,EAAQ3E,MAAMmD,QACvCuB,EAAQzE,MAAMkD,SAAWwB,EAAQ1E,MAAMkD,OACzC,OAAO,EAIT,IAVqC,EAU/ByB,EAAc,IAAIxE,IAAIuE,EAAQ3E,MAAMqE,KAAI,SAAAN,GAAC,MAAI,CAACA,EAAElD,KAAMkD,OAVvB,cAWfW,EAAQ1E,OAXO,IAWrC,2BAAqC,CAAC,IAA3B6D,EAA0B,QAC7BgB,EAAUD,EAAYnE,IAAIoD,EAAQhD,MACxC,IAAKgE,GACDA,EAAQ/D,OAAS+C,EAAQ/C,MACzB+D,EAAQ9D,WAAa8C,EAAQ9C,UAC7B8D,EAAQ7D,UAAY6C,EAAQ7C,QAC9B,OAAO,GAjB0B,8BAsBrC,IAtBqC,EAsB/B8D,EAAc,IAAIC,IAAIJ,EAAQ1E,MAAMoE,KAAI,SAAAI,GAC5C,IAAM/D,EAA6B,kBAAb+D,EAAE/D,OAAsB+D,EAAE/D,OAAOG,KAAO4D,EAAE/D,OAC1DC,EAA6B,kBAAb8D,EAAE9D,OAAsB8D,EAAE9D,OAAOE,KAAO4D,EAAE9D,OAChE,MAAM,GAAN,OAAUD,EAAV,YAAoBC,OAzBe,cA4Bf+D,EAAQzE,OA5BO,IA4BrC,2BAAqC,CAAC,IAA3B+E,EAA0B,QAC7BtE,EAAmC,kBAAnBsE,EAAQtE,OAAsBsE,EAAQtE,OAAOG,KAAOmE,EAAQtE,OAC5EC,EAAmC,kBAAnBqE,EAAQrE,OAAsBqE,EAAQrE,OAAOE,KAAOmE,EAAQrE,OAClF,IAAKmE,EAAYtE,IAAZ,UAAmBE,EAAnB,YAA6BC,IAChC,OAAO,GAhC0B,8BAoCrC,OAAO,GA9Pe,EAkQxBsE,aAAe,WACT,EAAKC,iBACPC,cAAc,EAAKD,iBAGrB,EAAKpF,SAAS,CAAEsF,WAAW,IAC3B,EAAKF,gBAAkBG,aAAY,WAE5BC,SAASC,QACZ,EAAKrG,aAEN,KAGC,EAAKsG,0BACPL,cAAc,EAAKK,0BAErB,EAAKA,yBAA2BH,aAAY,WAC1C,EAAK5B,YAAc,EACnB7D,QAAQsD,IAAI,wBACX,MAtRmB,EA0RxBuC,YAAc,WACR,EAAKP,kBACPC,cAAc,EAAKD,iBACnB,EAAKA,gBAAkB,MAErB,EAAKM,2BACPL,cAAc,EAAKK,0BACnB,EAAKA,yBAA2B,MAElC,EAAK1F,SAAS,CAAEsF,WAAW,KAnSL,EAuSxBM,iBAAmB,WACjB,IAEE,EAAKC,UAAY,IAAIC,UAAU,mCAE/B,EAAKD,UAAUE,OAAS,WACtBjG,QAAQsD,IAAI,uBACZ,EAAKpD,SAAS,CAAEgG,aAAa,EAAMC,cAAc,KAGnD,EAAKJ,UAAUK,UAAY,SAACC,GAEL,iBADLjD,KAAKkD,MAAMD,EAAMlG,MACrBoG,OACVvG,QAAQsD,IAAI,uCACZ,EAAKhE,aAIT,EAAKyG,UAAUS,QAAU,WACvBxG,QAAQsD,IAAI,0BACZ,EAAKpD,SAAS,CAAEgG,aAAa,IAE7BlC,YAAW,WACJ,EAAKnE,MAAM2F,WACd,EAAKH,iBAEN,MAGL,EAAKU,UAAUU,QAAU,SAACxG,GACxBD,QAAQC,MAAM,mBAAoBA,GAClC,EAAKC,SAAS,CAAEgG,aAAa,KAE/B,MAAOjG,GACPD,QAAQC,MAAM,+BAAgCA,GAE9C,EAAKoF,iBA3Ue,EA+UxBqB,oBAAsB,WAChB,EAAKX,YACP,EAAKA,UAAUzF,QACf,EAAKyF,UAAY,MAEnB,EAAK7F,SAAS,CAAEgG,aAAa,EAAOC,cAAc,KApV5B,EAqXxBQ,WArXwB,uCAqXX,WAAOC,EAASC,GAAhB,iBAAAtH,EAAA,6DAELuH,EAAkB,SAACC,GACvB,OAAKA,EACEA,EAAIC,MAAM,KAAKvC,KAAI,SAAAwC,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBAAe1C,KAAK,KADlFoC,GAIfrH,EAAU,EAAKL,OAAOK,QAAQ,CAAEC,SAAU,UAPnC,kBASHD,EAAQE,IAAR,kfAeJ,CACE0H,KAAMR,EAAgBF,GACtBW,QAAST,EAAgBD,GACzBW,QAAS,aA3BJ,uBA8BH,EAAKlI,SAASsH,GA9BX,uDAgCT5G,QAAQC,MAAM,qBAAd,MAhCS,yBAkCTP,EAAQY,QAlCC,4EArXW,0DA2ZxBmH,aAAe,SAACpB,GACd,EAAKnG,SAAS,CAAEJ,MAAOuG,EAAMtF,OAAO2G,SA1ZpC,EAAKrI,OAASA,EACd,EAAK+E,MAAQuD,IAAMC,YAEnB,EAAKC,YAAc,CACjBzH,MAAO,GACPC,MAAO,IAGT,EAAKR,MAAQ,CACXM,KAAM,EAAK0H,YACX/H,MAAM,0QAGNiE,WAAY,KACZJ,eAAgB,KAChB6B,WAAW,EACXW,cAAc,EACdD,aAAa,GAIf,EAAKlD,aAAe,KACpB,EAAKsC,gBAAkB,KACvB,EAAKS,UAAY,KACjB,EAAKpC,eAAiB,EACtB,EAAKC,mBAAqB,IAC1B,EAAKC,YAAc,EACnB,EAAKC,mBAAqB,EA7BJ,E,gEAwVH,IAAD,OAClBgE,KAAKxI,WAGLwI,KAAKhC,mBAGLgC,KAAKC,uBAAyB,WACxBrC,SAASC,QAAU,EAAK9F,MAAM2F,UAChCxF,QAAQsD,IAAI,gCACFoC,SAASC,QAAU,EAAK9F,MAAM2F,WACxCxF,QAAQsD,IAAI,kCAIhBoC,SAASsC,iBAAiB,mBAAoBF,KAAKC,0B,6CAKnDD,KAAKjC,cACLiC,KAAKpB,sBAGDoB,KAAKC,wBACPrC,SAASuC,oBAAoB,mBAAoBH,KAAKC,0B,+BA+CxD,OACE,kBAAC,IAAD,KACA,6BACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOG,KAAK,aAAaC,QAAS,kBAAC,EAAD,CAAYC,QAASN,KAAKnB,eAC5D,kBAAC,IAAD,CAAOuB,KAAK,IAAIC,QACd,kBAAC,EAAD,CACAhI,KAAM2H,KAAKjI,MAAMM,KACjBsH,aAAcK,KAAKL,aACnBnI,SAAUwI,KAAKxI,SACf8E,MAAO0D,KAAK1D,MACZL,WAAY+D,KAAKjI,MAAMkE,WAC3B1E,OAAQyI,KAAKzI,OACTmG,UAAWsC,KAAKjI,MAAM2F,UACtB7B,eAAgBmE,KAAKjI,MAAM8D,eAC3B0B,aAAcyC,KAAKzC,aACnBQ,YAAaiC,KAAKjC,uB,GAjbF8B,IAAMU,WA2bxBC,EAAa,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QACdjH,EAAWoH,cACTC,EAAaC,cAAbD,SAqBF,OAnBNb,IAAMe,WAAU,YACM,uCAAG,4BAAAnJ,EAAA,6DACfqH,EADe,eACG1E,KAAKC,OADR,kBAIbiG,EAAQxB,EAAS4B,GAJJ,8DAMjBxI,QAAQC,MAAM,qBAAd,MANiB,2BAUnB+D,YAAW,WACT2E,OAAOxH,SAASyH,OAAO,uBACpB,KAZc,yDAAH,qDAehBC,KACG,CAAC1H,EAAUqH,IAEP,yBAAKM,MAAO,CAAEC,UAAW,SAAUC,QAAS,OAAQC,SAAU,OAAQC,MAAO,QAA7E,0BAA8GV,EAA9G,QAGKW,EAAY,SAAC,GAAuH,IAArHhJ,EAAoH,EAApHA,KAAMsH,EAA8G,EAA9GA,aAAcnI,EAAgG,EAAhGA,SAAU8E,EAAsF,EAAtFA,MAAOL,EAA+E,EAA/EA,WAAY1E,EAAmE,EAAnEA,OAAQmG,EAA2D,EAA3DA,UAAW7B,EAAgD,EAAhDA,eAAgB0B,EAAgC,EAAhCA,aAAcQ,EAAkB,EAAlBA,YAAkB,EAC3GuD,mBAAS,IADkG,mBACxIC,EADwI,KAC5HC,EAD4H,OAEvGF,mBAAS,MAF8F,mBAExIG,EAFwI,KAE1HC,EAF0H,OAG3GJ,mBAAS,MAHkG,mBAGxIK,EAHwI,KAG5HC,EAH4H,OAI7GN,mBAAS,MAJoG,mBAIxIO,EAJwI,KAI7HC,EAJ6H,OAKzGR,mBAAS,MALgG,mBAKxIS,EALwI,KAK3HC,EAL2H,OAM3GV,mBAAS,MANkG,mBAMxIW,EANwI,KAM5HC,EAN4H,OAOvGZ,mBAAS,IAP8F,mBAOxIa,EAPwI,KAO1HC,EAP0H,KAU/IxB,qBAAU,WACJ3E,GACFiG,EAAc,gBAEf,CAACjG,IAGJ2E,qBAAU,WACJtE,EAAMC,SAAWlE,EAAKC,MAAMmD,OAAS,IAAMwG,GAE7C/F,YAAW,WACLI,EAAMC,SACRD,EAAMC,QAAQE,KAAK,EAAG,OAEvB,OAEJ,CAACpE,EAAKC,MAAOgE,EAAO2F,IAGvB,IAUMI,EAVoB,WACxB,IAAKpG,IAAe5D,EAAM,OAAO,IAAIgF,IACrC,IAAMiF,EAAY,IAAIjF,IAMtB,OALAiF,EAAUC,IAAItG,GACd5D,EAAKE,MAAMK,SAAQ,SAAA4J,GACbA,EAAKxJ,SAAWiD,GAAYqG,EAAUC,IAAIC,EAAKvJ,QAC/CuJ,EAAKvJ,SAAWgD,GAAYqG,EAAUC,IAAIC,EAAKxJ,WAE9CsJ,EAEcG,GAIjBC,EAAkB,SAACC,EAAWC,GAClC,IAAKD,IAActK,EAAM,OAAO,IAAIgF,IAGpC,IAFA,IAAMwF,EAAU,IAAIxF,IAChByF,EAAe,IAAIzF,IAAI,CAACsF,IAHiB,WAIpCI,GACP,IAAMC,EAAY,IAAI3F,IACtBhF,EAAKE,MAAMK,SAAQ,SAAA4J,GAEjB,IAAMS,EAAoC,kBAAhBT,EAAKxJ,OAAsBwJ,EAAKxJ,OAAOG,KAAOqJ,EAAKxJ,OACvEkK,EAAoC,kBAAhBV,EAAKvJ,OAAsBuJ,EAAKvJ,OAAOE,KAAOqJ,EAAKvJ,OAC7E6J,EAAalK,SAAQ,SAAAyD,GACfA,IAAM4G,GAAeJ,EAAQ/J,IAAIoK,IACnCF,EAAUT,IAAIW,GAEZ7G,IAAM6G,GAAeL,EAAQ/J,IAAImK,IACnCD,EAAUT,IAAIU,SAIpBD,EAAUpK,SAAQ,SAAAyD,GAAC,OAAIwG,EAAQN,IAAIlG,MACnCyG,EAAalK,SAAQ,SAAAyD,GAAC,OAAIwG,EAAQN,IAAIlG,MACtCyG,EAAeE,GAjBRD,EAAI,EAAGA,EAAIH,EAAQG,IAAM,IAoBlC,OADAF,EAAQN,IAAII,GACLE,GAGHM,EAAkBtB,GAAaE,GAAe9F,EAE9CmH,EAA2B,WAAfnB,EAA0B,SACZ,UAAfA,EAAyBF,EACV,eAAfE,EAA8BhG,EACf,aAAfgG,EAA4BE,EAAa,GAAK,KACzDkB,EAAkBX,EAAgBS,EAlClB,GAqClB5B,GAAcA,EAAW+B,QACLjL,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAC1CA,EAAKZ,KAAKoG,cAAc9E,SAAS8G,EAAWhC,gBAC3CxF,EAAKV,UAAYU,EAAKV,SAASkG,cAAc9E,SAAS8G,EAAWhC,gBACjExF,EAAKX,MAAQW,EAAKX,KAAKmG,cAAc9E,SAAS8G,EAAWhC,kBAE9C3G,SAAQ,SAAA4K,GACGd,EAAgBc,EAAMrK,KA5C3B,GA6CHP,SAAQ,SAAA6K,GAAQ,OAAIJ,EAAgBd,IAAIkB,SAKxC,aAAfxB,GAA6BE,EAAa1G,OAAS,GACrD0G,EAAavJ,SAAQ,SAAA8K,GACGhB,EAAgBgB,EAAU,GAClC9K,SAAQ,SAAA6K,GAAQ,OAAIJ,EAAgBd,IAAIkB,SAI1D,IAAME,EAA2B,WAAf1B,EACA,WACC,IAAM2B,EAAgBvL,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAC1CA,EAAKZ,KAAKoG,cAAc9E,SAAS8G,EAAWhC,gBAC3CxF,EAAKV,UAAYU,EAAKV,SAASkG,cAAc9E,SAAS8G,EAAWhC,gBACjExF,EAAKX,MAAQW,EAAKX,KAAKmG,cAAc9E,SAAS8G,EAAWhC,kBAEtDsE,EAAc,IAAIxG,IAKxB,OAJAuG,EAAchL,SAAQ,SAAA4K,GACGd,EAAgBc,EAAMrK,KAlE5C,GAmEcP,SAAQ,SAAA6K,GAAQ,OAAII,EAAYtB,IAAIkB,SAE9CI,EAXR,GAac,aAAf5B,EACC,WACC,IAAM6B,EAAgB,IAAIzG,IAK1B,OAJA8E,EAAavJ,SAAQ,SAAA8K,GACGhB,EAAgBgB,EAAU,GAClC9K,SAAQ,SAAA6K,GAAQ,OAAIK,EAAcvB,IAAIkB,SAE/CK,EANR,GAQDpB,EAAgBU,EAhFX,GAmFtBxC,qBAAU,WAGR,GAAItE,EAAMC,SAAWoH,EAAUI,KAAO,EAEpC,GAAmB,UAAf9B,GAA0BF,EAAa,CACzC,IAAMiC,EAAe3L,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAAI4J,EAAU7K,IAAIiB,EAAKZ,SAClE,GAAI6K,EAAavI,OAAS,EAAG,CAE3B,IAAMwI,EAAKD,EAAarH,KAAI,SAAAN,GAAC,OAAIA,EAAE9C,KAC7B2K,EAAKF,EAAarH,KAAI,SAAAN,GAAC,OAAIA,EAAE3C,KAC7ByK,EAAO3K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQyK,IACnBI,EAAO7K,KAAK8K,IAAL,MAAA9K,KAAI,YAAQyK,IACnBM,EAAO/K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQ0K,IACnBM,EAAOhL,KAAK8K,IAAL,MAAA9K,KAAI,YAAQ0K,IAEnBO,GAAWN,EAAOE,GAAQ,EAC1BK,GAAWH,EAAOC,GAAQ,EAC1BG,EAAQN,EAAOF,EACfS,EAASJ,EAAOD,EAIhBM,EAAQrL,KAAK4K,KAChBvD,OAAOiE,WAFM,KAEkBH,GAC/B9D,OAAOkE,YAHM,KAGmBH,EACjC,GAGFtI,EAAMC,QAAQC,SAASiI,EAASC,EAAS,KACzCpI,EAAMC,QAAQE,KAAKoI,EAAO,WAIzB,GAAmB,WAAf5C,GAA2BV,EAAY,CAC9C,IAAMyC,EAAe3L,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAAI4J,EAAU7K,IAAIiB,EAAKZ,SAClE,GAAI6K,EAAavI,OAAS,EAAG,CAE3B,IAAMwI,EAAKD,EAAarH,KAAI,SAAAN,GAAC,OAAIA,EAAE9C,KAC7B2K,EAAKF,EAAarH,KAAI,SAAAN,GAAC,OAAIA,EAAE3C,KAC7ByK,EAAO3K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQyK,IACnBI,EAAO7K,KAAK8K,IAAL,MAAA9K,KAAI,YAAQyK,IACnBM,EAAO/K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQ0K,IACnBM,EAAOhL,KAAK8K,IAAL,MAAA9K,KAAI,YAAQ0K,IAEnBO,GAAWN,EAAOE,GAAQ,EAC1BK,GAAWH,EAAOC,GAAQ,EAC1BG,EAAQN,EAAOF,EACfS,EAASJ,EAAOD,EAIhBM,EAAQrL,KAAK4K,KAChBvD,OAAOiE,WAFM,KAEkBH,GAC/B9D,OAAOkE,YAHM,KAGmBH,EACjC,GAGFtI,EAAMC,QAAQC,SAASiI,EAASC,EAAS,KACzCpI,EAAMC,QAAQE,KAAKoI,EAAO,UAIN,eAAf5C,GAA+BhG,EACtCC,YAAW,WACT,IAAM8H,EAAe3L,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAAI4J,EAAU7K,IAAIiB,EAAKZ,SAClE,GAAI6K,EAAavI,OAAS,GAAKa,EAAMC,QAAS,CAE5C,IAAM0H,EAAKD,EAAarH,KAAI,SAAAN,GAAC,OAAIA,EAAE9C,KAC7B2K,EAAKF,EAAarH,KAAI,SAAAN,GAAC,OAAIA,EAAE3C,KAC7ByK,EAAO3K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQyK,IACnBI,EAAO7K,KAAK8K,IAAL,MAAA9K,KAAI,YAAQyK,IACnBM,EAAO/K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQ0K,IACnBM,EAAOhL,KAAK8K,IAAL,MAAA9K,KAAI,YAAQ0K,IAEnBO,GAAWN,EAAOE,GAAQ,EAC1BK,GAAWH,EAAOC,GAAQ,EAC1BG,EAAQN,EAAOF,EACfS,EAASJ,EAAOD,EAIhBM,EAAQrL,KAAK4K,KAChBvD,OAAOiE,WAFM,KAEkBH,GAC/B9D,OAAOkE,YAHM,KAGmBH,EACjC,GAGFtI,EAAMC,QAAQC,SAASiI,EAASC,EAAS,KACzCpI,EAAMC,QAAQE,KAAKoI,EAAO,QAE3B,KAGmB,aAAf5C,GAA6BE,EAAa1G,OAAS,GAC1DS,YAAW,WACT,IAAM8H,EAAe3L,EAAKC,MAAMiL,QAAO,SAAAxJ,GAAI,OAAI4J,EAAU7K,IAAIiB,EAAKZ,SAClE,GAAI6K,EAAavI,OAAS,GAAKa,EAAMC,QAAS,CAE5C,IAAM0H,EAAKD,EAAarH,KAAI,SAAAN,GAAC,OAAIA,EAAE9C,KAC7B2K,EAAKF,EAAarH,KAAI,SAAAN,GAAC,OAAIA,EAAE3C,KAC7ByK,EAAO3K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQyK,IACnBI,EAAO7K,KAAK8K,IAAL,MAAA9K,KAAI,YAAQyK,IACnBM,EAAO/K,KAAK4K,IAAL,MAAA5K,KAAI,YAAQ0K,IACnBM,EAAOhL,KAAK8K,IAAL,MAAA9K,KAAI,YAAQ0K,IAEnBO,GAAWN,EAAOE,GAAQ,EAC1BK,GAAWH,EAAOC,GAAQ,EAC1BG,EAAQN,EAAOF,EACfS,EAASJ,EAAOD,EAIhBM,EAAQrL,KAAK4K,KAChBvD,OAAOiE,WAFM,KAEkBH,GAC/B9D,OAAOkE,YAHM,KAGmBH,EACjC,GAGFtI,EAAMC,QAAQC,SAASiI,EAASC,EAAS,KACzCpI,EAAMC,QAAQE,KAAKoI,EAAO,QAE3B,OAGN,CAAClB,EAAWtL,EAAKC,MAAOgE,EAAO2F,EAAYF,EAAa9F,EAAYsF,EAAYY,IAEnF,IAWM6C,GAAY,uCAAG,WAAOC,GAAP,2BAAAxN,EAAA,6DACnBwN,EAAEC,iBADiB,kBAIMC,MAAM,2FAA4F,CACvHC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMhK,KAAKC,UAAU,CAAEgK,SAAUhE,MAPlB,cAIXiE,EAJW,gBAUEA,EAASC,OAVX,cAUXpN,EAVW,OAWXqN,EAAiBrN,EAAKsN,MAAQtN,EAAKL,OAAS,GAElDwJ,EAAckE,GACd/F,EAAa,CAAE1G,OAAQ,CAAE2G,MAAO8F,KAdf,UAgBXlO,EAAS,KAAMkO,GAhBJ,YAmBO,kDAAkDE,KAAKF,EAAepC,QAnB7E,wBAwBXuC,EAAiB,GAGjBH,EAAejL,SAAS,WAEpBqL,EAAgBJ,EAAelC,MAAM,oCAEzCqC,EAAiBC,EAAcnJ,KAAI,SAAA6G,GACjC,IAAMuC,EAAYvC,EAAMA,MAAM,4BAC9B,OAAOuC,EAAYA,EAAU,GAAK,QACjCxC,OAAOyC,UAEHN,EAAejL,SAAS,QAE3BwL,EAAcP,EAAelC,MAAM,0DAEvCqC,EAAiB,CAACI,EAAY,MAI1BC,EAAcR,EAAelC,MAAM,gBACzCqC,EAAiBK,EACfA,EAAYvJ,KAAI,SAAA6G,GACd,IAAMuC,EAAYvC,EAAMA,MAAM,4BAC9B,OAAOuC,EAAYA,EAAU,GAAK,QACjCxC,OAAOyC,SAAW,IAGzB5D,EAAgByD,GAChB3D,EAAc,YArDC,4UA4DT1K,EAAS,KA5DA,6XAgEfU,QAAQC,MAAM,uBAAd,MAhEe,0DAAH,sDAuFZgO,GAAmB,SAAC5H,GAAW,IAAD,EACVA,EAAMtF,OAAtBE,EAD0B,EAC1BA,KAAMyG,EADoB,EACpBA,MACdgC,GAAc,SAACwE,GAAD,sBACTA,EADS,eAEXjN,EAAOyG,QAINyG,GAAe,uCAAG,gCAAA5O,EAAA,yDACjBkK,GAAeF,EADE,wDAIhBzC,EAAkB,SAACC,GACvB,OAAKA,EACEA,EAAIC,MAAM,KAAKvC,KAAI,SAAAwC,GAAI,OAAIA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GAAGC,iBAAe1C,KAAK,KADlFoC,KAKfqH,EAAmB3E,EAAWrI,QAAQgK,SACjBgD,EAAiBC,WAAW,YAAeD,EAAiBC,WAAW,cAC9FD,EAAmB,WAAaA,GAG5B1O,EAAUL,EAAOK,UAfD,kBAiBdA,EAAQE,IAAR,sIAGJ,CACE0O,QAAS/E,EAAatI,KACtBsN,QAASzH,EAAgB2C,EAAWxI,MACpCC,KAAM4F,EAAgB2C,EAAWvI,MACjCC,SAAU2F,EAAgB2C,EAAWtI,UACrCC,QAASgN,IAzBO,wBA4Bd9O,EAASmK,EAAWxI,MA5BN,QA6BpBuI,EAAgB,MA7BI,kDA+BpBxJ,QAAQC,MAAM,uBAAd,MA/BoB,yBAiCpBP,EAAQY,QAjCY,6EAAH,qDAsC7B,OACI,yBAAKmM,MAAM,OACT,0BAAM+B,SAAU1B,IACd,8BACE2B,YAAY,qCACZ3F,MAAO,CAAE4F,QAAS,QAASjC,MAAO,MAAOC,OAAQ,OAAQiC,OAAQ,SAAU5F,UAAW,UACtFrB,MAAO2B,EACPuF,SAvJwB,SAACvI,GACzB,IAAMwI,EAAQxI,EAAMtF,OAAO2G,MAC3B4B,EAAcuF,GACdpH,EAAapB,GAETwI,EAAMzD,SACRtB,EAAe,MACfE,EAAc,cAkJlB,4BAAQzD,KAAK,UAAb,QAEF,4BAAQuI,GAAG,YAAYC,QAAS,kBAAMpG,OAAOqG,KAAK,8CAA+C,YAAjG,eACA,4BAAQF,GAAG,OAAOC,QAAS,kBAAMpG,OAAOqG,KAAK,2CAA4C,YAAzF,QACA,4BACEF,GAAG,iBACHC,QAAS,kBAAMvJ,EAAYK,IAAgBR,KAC3CyD,MAAO,CACLmG,gBAAiBzJ,EAAY,UAAY,UACzC0D,MAAO,QACPgG,OAAQ,OACRlG,QAAS,WACTmG,aAAc,MACdC,OAAQ,YAGT5J,EAAY,gBAAkB,kBAIjC,yBAAKsD,MAAO,CACVuG,SAAU,QACVC,IAAK,OACLC,MAAO,OACPvG,QAAS,WACTiG,gBAAiBzJ,EAAY,UAAY,UACzC0D,MAAO,QACPiG,aAAc,MACdlG,SAAU,OACVuG,OAAQ,IACRd,QAAS,OACTe,WAAY,SACZC,IAAK,QAEL,yBAAK5G,MAAO,CACV2D,MAAO,MACPC,OAAQ,MACRyC,aAAc,MACdF,gBAAiBzJ,EAAY,OAAS,OACtCmK,UAAWnK,EAAY,oBAAsB,UAE9CA,EAAY,sBAAwB,iBACpC7B,GACC,0BAAMmF,MAAO,CAAEG,SAAU,OAAQ2G,QAAS,KAA1C,UACU,IAAI1N,KAAKyB,GAAgBkM,qBADnC,MAMJ,iLAQJ,kBAAC,IAAD,CACAC,IAAK1L,EACL2L,UAAW5P,EACX6P,OAAO,OACPC,UAAW,SAACpO,GAAD,OAAUA,EAAKV,UAAY,eACtC+O,YAxI8B,SAACrO,GAClBA,IACL2H,EAAgB3H,GAChB6H,EAAc,eAAK7H,IACnB+H,EAAa/H,EAAKZ,MAClB6I,EAAejI,EAAKZ,MACpB+I,EAAc,SAEdV,EAAc,MAiItB6G,YA9H8B,SAACtO,GAErB+H,EADE/H,EACWA,EAAKZ,KAEL,OA2HvBmP,kBAAmB,WACjBxG,EAAa,MACbE,EAAe,MACfE,EAAc,MACdE,EAAgB,KAElBmG,iBAAkB,SAACxO,EAAMyO,GACvB,IAAMC,EACJlH,IACCxH,EAAKZ,KAAKoG,cAAc9E,SAAS8G,EAAWhC,gBAC1CxF,EAAKV,UAAYU,EAAKV,SAASkG,cAAc9E,SAAS8G,EAAWhC,gBACjExF,EAAKX,MAAQW,EAAKX,KAAKmG,cAAc9E,SAAS8G,EAAWhC,gBAExDmJ,GADcrG,EAAevJ,IAAIiB,EAAKZ,MAC1BkK,EAAgBvK,IAAIiB,EAAKZ,OAE3CqP,EAAIG,YAAcD,EAAY,EAAM,GACpCF,EAAII,UAAY7O,EAAKZ,OAAS8C,EAAa,QAAU,QACrDuM,EAAIK,YAAcJ,EAAgB,MAAQ,QAC1CD,EAAIM,UAAYL,EAAgB,EAAI,EAEpCD,EAAIO,YACJP,EAAIQ,IAAIjP,EAAKR,GAAqB,IAAhBC,KAAKC,SAAgBM,EAAKL,GAAqB,IAAhBF,KAAKC,SAAgB,EAAG,EAAG,EAAID,KAAKyP,IACrFT,EAAIU,OACJV,EAAIW,SAEJX,EAAII,UAAY,OAChBJ,EAAIY,SAASrP,EAAKX,KAAMW,EAAKR,EAAI,GAAIQ,EAAKL,GAE1C8O,EAAIG,YAAc,GAEpBU,UAAW,SAAC7G,GACV,IAAMS,EAAoC,kBAAhBT,EAAKxJ,OAAsBwJ,EAAKxJ,OAAOG,KAAOqJ,EAAKxJ,OACvEkK,EAAoC,kBAAhBV,EAAKvJ,OAAsBuJ,EAAKvJ,OAAOE,KAAOqJ,EAAKvJ,OAE7E,OADoBoK,EAAgBvK,IAAImK,IAAeI,EAAgBvK,IAAIoK,GACtD,OAAS,QAEhCoG,YAAa,SAAC9G,GACZ,IAAMS,EAAoC,kBAAhBT,EAAKxJ,OAAsBwJ,EAAKxJ,OAAOG,KAAOqJ,EAAKxJ,OACvEkK,EAAoC,kBAAhBV,EAAKvJ,OAAsBuJ,EAAKvJ,OAAOE,KAAOqJ,EAAKvJ,OAE7E,OADoBoK,EAAgBvK,IAAImK,IAAeI,EAAgBvK,IAAIoK,GACtD,EAAM,KAE7BqG,cAAe,GACfC,2BAA4B,EAC5BC,2BAA4B,IAG3BhI,GAAgBE,GACf,yBAAKX,MAAO,CAAEuG,SAAU,WAAYC,IAAK,MAAOkC,KAAM,MAAOC,UAAW,wBAAyBzI,QAAS,OAAQiG,gBAAiB,QAASC,OAAQ,kBAAmBwC,UAAW,kCAAmClC,OAAQ,MAC5NjG,EAAatI,OAAS8C,EACrB,oCACA,iDACA,2BAAG,yCACH,2BACA9C,KAAK,OACLyG,MAAO+B,EAAWxI,KAClBwN,YAAY,aACZG,SAAUX,GACV0D,QAAS,SAAC5E,GAAD,OAAOA,EAAEhM,OAAO0N,YAAc,IACvCmD,OAAQ,SAAC7E,GAAD,OAAOA,EAAEhM,OAAO0N,YAAc,iBAGtC,2BAAG,yCACH,2BACAxN,KAAK,OACLyG,MAAO+B,EAAWvI,KAClBuN,YAAY,aACZG,SAAUX,GACV0D,QAAS,SAAC5E,GAAD,OAAOA,EAAEhM,OAAO0N,YAAc,IACvCmD,OAAQ,SAAC7E,GAAD,OAAOA,EAAEhM,OAAO0N,YAAc,iBAGtC,2BAAG,6CACH,2BACAxN,KAAK,WACLyG,MAAO+B,EAAWtI,SAClBsN,YAAY,iBACZG,SAAUX,GACV0D,QAAS,SAAC5E,GAAD,OAAOA,EAAEhM,OAAO0N,YAAc,IACvCmD,OAAQ,SAAC7E,GAAD,OAAOA,EAAEhM,OAAO0N,YAAc,qBAGtC,2BAAG,4CACH,2BACAxN,KAAK,UACLyG,MAAO+B,EAAWrI,QAClBqN,YAAY,gBACZG,SAAUX,GACV0D,QAAS,SAAC5E,GAAD,OAAOA,EAAEhM,OAAO0N,YAAc,IACvCmD,OAAQ,SAAC7E,GAAD,OAAOA,EAAEhM,OAAO0N,YAAc,oBAGtC,2BAAG,4BAAQM,QAASZ,IAAjB,UAGH,oCACA,4CACA,2BAAG,yCAAH,WAA2B5E,QAA3B,IAA2BA,OAA3B,EAA2BA,EAActI,MACzC,2BAAG,yCAAH,WAA2BsI,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAcrI,MACzC,2BAAG,6CAAH,WAA+BqI,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAcpI,UAC7C,2BAAG,4CAA0B,IAC5BoI,EAAanI,SAAoC,KAAzBmI,EAAanI,QACpC,uBAAGyQ,KAAMtI,EAAanI,QAASL,OAAO,SAAS+Q,IAAI,uBAClDvI,EAAanI,QAAQmC,OAAS,GAA9B,UACMgG,EAAanI,QAAQ2Q,UAAU,EAAG,IADxC,OAECxI,EAAanI,SAGf,KAIJ,4BAAQ2N,QAAS,kBAAMvF,EAAgB,QAAvC,YAWepK,IC9hCJ4S,MARf,YAAwB,IAAV3S,EAAS,EAATA,OACZ,OACE,yBAAK4S,UAAU,OACb,kBAAC,EAAD,CAAW5S,OAAQA,MCKLyO,QACW,cAA7BnF,OAAOxH,SAAS+Q,UAEe,UAA7BvJ,OAAOxH,SAAS+Q,UAEhBvJ,OAAOxH,SAAS+Q,SAAS5G,MACvB,2D,aCXAjM,EAAS8S,SACbC,iIAAYC,WAAa,wCACzBF,OAAWG,MACTF,iIAAYG,YAAc,QAC1BH,iIAAYI,gBAAkB,+CAEhC,IAMFC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKtT,OAAQA,KAEfqG,SAASkN,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlT,GACLD,QAAQC,MAAMA,EAAMmT,c","file":"static/js/main.88ed0aa9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\n      latestNode: null,\n      lastUpdateTime: null,\n      isPolling: false,\n      useWebSocket: false,\n      wsConnected: false\n    };\n\n    // Store the last known data hash for change detection\n    this.lastDataHash = null;\n    this.pollingInterval = null;\n    this.websocket = null;\n    this.lastUpdateTime = 0;\n    this.updateDebounceTime = 2000; // 2 seconds debounce\n    this.updateCount = 0;\n    this.maxUpdatesPerCycle = 3; // Prevent infinite loops\n  }\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    try {\n      res = await session.run(queryOverride || this.state.query);\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\") && record.get(\"source\") && record.get(\"target\") && \n          typeof record.get(\"source\") === 'string' && typeof record.get(\"target\") === 'string') {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            location: record.get(\"sourceLocation\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            location: record.get(\"targetLocation\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node && node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                location: node.properties.location || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (node && typeof node === 'object') {\n            // Handle SET query results that might have different structure\n            const name = node.name || node.u_name || `Node-${Date.now()}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.role || node.u_role || \"\",\n                location: node.location || node.u_location || \"\",\n                website: node.website || node.u_website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (typeof node === 'string' && key.includes('name')) {\n            // Handle direct string values from queries like RETURN u.name, u.role\n            const name = node;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: record.get(key.replace('name', 'role')) || \"\",\n                location: record.get(key.replace('name', 'location')) || \"\",\n                website: record.get(key.replace('name', 'website')) || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n\n    // Calculate hash of current data for change detection\n    const currentDataHash = this.calculateDataHash(updatedData);\n    const hasChanged = this.lastDataHash !== currentDataHash;\n    \n    // Also use more detailed change detection\n    const hasDetailedChange = this.hasDataChanged(updatedData, this.state.data);\n    \n    // Additional check: if the data is exactly the same, don't update\n    const isDataIdentical = JSON.stringify(updatedData) === JSON.stringify(this.state.data);\n    \n    // Store a reference to the current state data for next comparison\n    const currentStateData = this.state.data;\n    \n    console.log(\"=== Change Detection Debug ===\");\n    console.log(\"Current hash:\", currentDataHash);\n    console.log(\"Last hash:\", this.lastDataHash);\n    console.log(\"Hash changed:\", hasChanged);\n    console.log(\"Detailed change detected:\", hasDetailedChange);\n    console.log(\"Data identical:\", isDataIdentical);\n    console.log(\"Current nodes count:\", updatedData.nodes.length);\n    console.log(\"Current links count:\", updatedData.links.length);\n    console.log(\"State nodes count:\", this.state.data.nodes.length);\n    console.log(\"State links count:\", this.state.data.links.length);\n    \n    if (hasChanged || hasDetailedChange) {\n      console.log(\"Graph data has changed, updating...\");\n    } else {\n      console.log(\"No changes detected, skipping update\");\n    }\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    \n    // Only update state if there's a change or if it's the initial load\n    const now = Date.now();\n    const timeSinceLastUpdate = now - this.lastUpdateTime;\n    \n    if ((hasChanged || hasDetailedChange || this.lastDataHash === null) && \n        !isDataIdentical &&\n        (timeSinceLastUpdate > this.updateDebounceTime || this.lastDataHash === null) &&\n        this.updateCount < this.maxUpdatesPerCycle) {\n      // Update the hash only when we actually update the state\n      this.lastDataHash = currentDataHash;\n      this.lastUpdateTime = now;\n      this.updateCount++;\n      console.log(\"Updating state after\", timeSinceLastUpdate, \"ms (update #\", this.updateCount, \")\");\n      \n      this.setState({ \n        data: updatedData, \n        latestNode: newNodeName,\n        lastUpdateTime: hasChanged ? now : this.state.lastUpdateTime\n      }, () => {\n        if (newNodeName) {\n          setTimeout(() => {\n            let newNode = nodes.find((n) => n.name === newNodeName);\n            if (newNode && this.fgRef.current) {\n              console.log(\"Focusing on:\", newNode);\n              this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n              this.fgRef.current.zoom(1.25);\n            }\n          }, 2000);\n        }\n      });\n    } else {\n      // Even if no change, we might need to update latestNode for new additions\n      if (newNodeName && this.state.latestNode !== newNodeName) {\n        this.setState({ latestNode: newNodeName });\n      }\n      // Reset update count when no changes are detected\n      this.updateCount = 0;\n    }\n  };\n\n  // Calculate a simple hash of the graph data for change detection\n  calculateDataHash = (data) => {\n    // Only hash the actual data, not the random coordinates\n    const nodesStr = data.nodes.map(n => `${n.name}:${n.role}:${n.location}:${n.website}`).sort().join('|');\n    const linksStr = data.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }).sort().join('|');\n    return `${nodesStr}|${linksStr}`;\n  };\n\n  // More detailed change detection\n  hasDataChanged = (newData, oldData) => {\n    if (!oldData || !oldData.nodes || !oldData.links) return true;\n    \n    // Check if number of nodes or links changed\n    if (newData.nodes.length !== oldData.nodes.length || \n        newData.links.length !== oldData.links.length) {\n      return true;\n    }\n    \n    // Check if any node properties changed\n    const oldNodesMap = new Map(oldData.nodes.map(n => [n.name, n]));\n    for (const newNode of newData.nodes) {\n      const oldNode = oldNodesMap.get(newNode.name);\n      if (!oldNode || \n          oldNode.role !== newNode.role || \n          oldNode.location !== newNode.location || \n          oldNode.website !== newNode.website) {\n        return true;\n      }\n    }\n    \n    // Check if any links changed\n    const oldLinksSet = new Set(oldData.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }));\n    \n    for (const newLink of newData.links) {\n      const source = typeof newLink.source === 'object' ? newLink.source.name : newLink.source;\n      const target = typeof newLink.target === 'object' ? newLink.target.name : newLink.target;\n      if (!oldLinksSet.has(`${source}:${target}`)) {\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // Start polling for changes\n  startPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    \n    this.setState({ isPolling: true });\n    this.pollingInterval = setInterval(() => {\n      // Only poll if the tab is active (to save resources)\n      if (!document.hidden) {\n        this.loadData();\n      }\n    }, 5000); // Check every 5 seconds\n    \n    // Reset update count every 30 seconds to prevent permanent blocking\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n    }\n    this.updateCountResetInterval = setInterval(() => {\n      this.updateCount = 0;\n      console.log(\"Reset update count\");\n    }, 30000);\n  };\n\n  // Stop polling\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n      this.updateCountResetInterval = null;\n    }\n    this.setState({ isPolling: false });\n  };\n\n  // WebSocket methods for real-time updates\n  connectWebSocket = () => {\n    try {\n      // Replace with your WebSocket server URL\n      this.websocket = new WebSocket('wss://your-websocket-server.com');\n      \n      this.websocket.onopen = () => {\n        console.log('WebSocket connected');\n        this.setState({ wsConnected: true, useWebSocket: true });\n      };\n      \n      this.websocket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        if (message.type === 'graph_update') {\n          console.log('Received graph update via WebSocket');\n          this.loadData(); // Reload data when update is received\n        }\n      };\n      \n      this.websocket.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.setState({ wsConnected: false });\n        // Fallback to polling if WebSocket fails\n        setTimeout(() => {\n          if (!this.state.isPolling) {\n            this.startPolling();\n          }\n        }, 5000);\n      };\n      \n      this.websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.setState({ wsConnected: false });\n      };\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      // Fallback to polling\n      this.startPolling();\n    }\n  };\n\n  disconnectWebSocket = () => {\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n    this.setState({ wsConnected: false, useWebSocket: false });\n  };\n\n  // Enhanced componentDidMount to try WebSocket first, then fallback to polling\n  componentDidMount() {\n    this.loadData();\n    \n    // Try WebSocket first, fallback to polling\n    this.connectWebSocket();\n    \n    // Add visibility change listener to pause polling when tab is not active\n    this.handleVisibilityChange = () => {\n      if (document.hidden && this.state.isPolling) {\n        console.log('Tab hidden, pausing polling');\n      } else if (!document.hidden && this.state.isPolling) {\n        console.log('Tab visible, resuming polling');\n      }\n    };\n    \n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n  }\n\n  componentWillUnmount() {\n    // Clean up both polling and WebSocket\n    this.stopPolling();\n    this.disconnectWebSocket();\n    \n    // Remove visibility change listener\n    if (this.handleVisibilityChange) {\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    // Helper function to capitalize first letter of each word\n    const capitalizeWords = (str) => {\n      if (!str) return str;\n      return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    };\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = 'Affiliate', \n                       u.location = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = 'Holder', \n                       nfc.location = $nfcUser + \"'s network\", \n                       nfc.website = ''\n\n         MERGE (awu:User {name: $awuUser}) \n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\n        { \n          user: capitalizeWords(newUser), \n          nfcUser: capitalizeWords(nfcUserName), \n          awuUser: \"Awu Chen\" \n        }\n        );\n      await this.loadData(newUser);\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    this.setState({ query: event.target.value });\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n    driver={this.driver} // Pass the driver\n        isPolling={this.state.isPolling}\n        lastUpdateTime={this.state.lastUpdateTime}\n        startPolling={this.startPolling}\n        stopPolling={this.stopPolling}\n    />\n  } />\n  </Routes>\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      const newUser = `User-${Date.now()}`;\n\n      try {\n        await addNode(newUser, username); // pass dynamic user\n        } catch (error) {\n          console.error(\"Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/craft-network/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap for {username}...</div>\n      };\n\n              const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver, isPolling, lastUpdateTime, startPolling, stopPolling }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', 'latestNode', or 'mutation'\n        const [mutatedNodes, setMutatedNodes] = useState([]); // Track nodes created/modified by mutation queries\n\n        // Detect when latestNode changes (NFC addition) and set lastAction\n        useEffect(() => {\n          if (latestNode) {\n            setLastAction('latestNode');\n          }\n        }, [latestNode]);\n\n        // Initial zoom when graph first loads\n        useEffect(() => {\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\n            // Wait a bit for the graph to settle, then zoom to 2x\n            setTimeout(() => {\n              if (fgRef.current) {\n                fgRef.current.zoom(2, 1000);\n              }\n            }, 1000);\n          }\n        }, [data.nodes, fgRef, lastAction]);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\n        const visibilityFocus = focusNode || clickedNode || latestNode;\n        // For zoom: use the most recent action\n        const zoomFocus = lastAction === 'search' ? 'search' : \n                         lastAction === 'click' ? clickedNode : \n                         lastAction === 'latestNode' ? latestNode :\n                         lastAction === 'mutation' ? mutatedNodes[0] : null;\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\n        \n        // Always include search results in visibility if there's a search term\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        // Always include mutated nodes in visibility if there was a mutation\n        if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n          mutatedNodes.forEach(nodeName => {\n            const nodeNeighbors = getNDegreeNodes(nodeName, 0); // Always use 0 degree for mutations\n            nodeNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        const zoomNodes = lastAction === 'search' ? \n                         (() => {\n                           const searchMatches = data.nodes.filter(node => \n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                             (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n                           );\n                           const searchNodes = new Set();\n                           searchMatches.forEach(match => {\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\n                           });\n                           return searchNodes;\n                         })() : \n                         lastAction === 'mutation' ?\n                         (() => {\n                           const mutationNodes = new Set();\n                           mutatedNodes.forEach(nodeName => {\n                             const nodeNeighbors = getNDegreeNodes(nodeName, 1); // Always use 1 degree for mutations\n                             nodeNeighbors.forEach(neighbor => mutationNodes.add(neighbor));\n                           });\n                           return mutationNodes;\n                         })() :\n                         getNDegreeNodes(zoomFocus, visibleDegree);\n        \n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && zoomNodes.size > 0) {\n            // Zoom based on last action\n            if (lastAction === 'click' && clickedNode) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (lastAction === 'search' && inputValue) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (lastAction === 'latestNode' && latestNode) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n            // For mutation queries, zoom to the mutated nodes\n            else if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for mutation\n            }\n          }\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue, mutatedNodes]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n          // Clear other actions when searching\n          if (input.trim()) {\n            setClickedNode(null);\n            setLastAction('search');\n          }\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            setInputValue(generatedQuery);\n            handleChange({ target: { value: generatedQuery } });\n\n            await loadData(null, generatedQuery);\n\n            // Check if the generated query is a mutation query (updates the graph)\n            const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(generatedQuery.trim());\n            \n            // If it's a mutation query, reload with the default MATCH query to show the updated graph\n            if (isMutationQuery) {\n              // Extract node names from the mutation query to track what was created/modified\n              let extractedNodes = [];\n              \n              // Handle different mutation query patterns\n              if (generatedQuery.includes('DELETE')) {\n                // For DELETE queries, extract from patterns like DELETE (u:User {name: \"John\"}) or MATCH (u:User {name: \"John\"}) DELETE u\n                const deleteMatches = generatedQuery.match(/\\{name:\\s*['\"]([^'\"]+)['\"]\\}/g);\n                if (deleteMatches) {\n                  extractedNodes = deleteMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean);\n                }\n              } else if (generatedQuery.includes('SET')) {\n                // For SET queries, extract from MATCH clause like MATCH (u:User {name: \"John\"}) SET u.role = 'admin'\n                const matchClause = generatedQuery.match(/MATCH\\s*\\([^)]*\\{name:\\s*['\"]([^'\"]+)['\"][^}]*\\}\\)/i);\n                if (matchClause) {\n                  extractedNodes = [matchClause[1]];\n                }\n              } else {\n                // For CREATE/MERGE queries, extract from {name: \"nodeName\"} patterns\n                const nodeMatches = generatedQuery.match(/\\{([^}]+)\\}/g);\n                extractedNodes = nodeMatches ? \n                  nodeMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean) : [];\n              }\n              \n              setMutatedNodes(extractedNodes);\n              setLastAction('mutation');\n              \n              const defaultQuery = `\n                MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n                RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n                       v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite\n              `;\n              await loadData(null, defaultQuery);\n            }\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          setLastAction('click');\n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          // Ensure the website has \"https://\" if missing\n          let formattedWebsite = editedNode.website.trim();\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\n            formattedWebsite = \"https://\" + formattedWebsite;\n          }\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.location = $location, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: capitalizeWords(editedNode.name),\n                role: capitalizeWords(editedNode.role),\n                location: capitalizeWords(editedNode.location),\n                website: formattedWebsite, // Use the corrected website\n              }\n            );\n            await loadData(editedNode.name); // Keep the edited node as latestNode\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Show me all the artist in Kyoto...\"\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n      <button \n        id=\"toggle-polling\" \n        onClick={() => isPolling ? stopPolling() : startPolling()}\n        style={{ \n          backgroundColor: isPolling ? \"#f44336\" : \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          padding: \"8px 16px\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        }}\n      >\n        {isPolling ? \"Pause Updates\" : \"Resume Updates\"}\n      </button>\n      \n      {/* Real-time update status indicator */}\n      <div style={{ \n        position: \"fixed\", \n        top: \"10px\", \n        right: \"10px\", \n        padding: \"8px 12px\", \n        backgroundColor: isPolling ? \"#4CAF50\" : \"#f44336\", \n        color: \"white\", \n        borderRadius: \"4px\", \n        fontSize: \"12px\",\n        zIndex: 1000,\n        display: \"flex\",\n        alignItems: \"center\",\n        gap: \"8px\"\n      }}>\n        <div style={{ \n          width: \"8px\", \n          height: \"8px\", \n          borderRadius: \"50%\", \n          backgroundColor: isPolling ? \"#fff\" : \"#ccc\",\n          animation: isPolling ? \"pulse 2s infinite\" : \"none\"\n        }}></div>\n        {isPolling ? \"Live Updates Active\" : \"Updates Paused\"}\n        {lastUpdateTime && (\n          <span style={{ fontSize: \"10px\", opacity: 0.8 }}>\n            (Last: {new Date(lastUpdateTime).toLocaleTimeString()})\n          </span>\n        )}\n      </div>\n      \n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.location || \"No Location\"}\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n    setLastAction(null);\n    setMutatedNodes([]);\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())));\n    const isOneDegree = oneDegreeNodes.has(node.name);\n    const isNDegree = visibilityNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = \"gray\";\n    ctx.fillText(node.role, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {selectedNode && editedNode && (\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\n    {selectedNode.name === latestNode ? (\n      <>\n      <h3>Edit Network Info</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n      placeholder=\"Enter name\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \n      /></p>\n\n      <p><strong>Role:</strong>\n      <input \n      name=\"role\" \n      value={editedNode.role} \n      placeholder=\"Enter role\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \n      /></p>\n\n      <p><strong>Location:</strong>\n      <input \n      name=\"location\" \n      value={editedNode.location} \n      placeholder=\"Enter location\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter location\"} \n      /></p>\n\n      <p><strong>Website:</strong>\n      <input \n      name=\"website\" \n      value={editedNode.website} \n      placeholder=\"Enter website\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \n      /></p>\n\n      <p><button onClick={saveNodeChanges}>Save</button></p>\n      </>\n      ) : (\n      <>\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\n      <p><strong>Location:</strong> {selectedNode?.location}</p>\n      <p><strong>Website:</strong>{\" \"}\n      {selectedNode.website && selectedNode.website !== \"\" ? (\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n        ) : (\n        \"\"\n      )}</p>\n      </>\n    )}\n    <button onClick={() => setSelectedNode(null)}>Close</button>\n    </div>\n  )}\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}