{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","addNodeToAwuChen","setState","prevState","data","nodes","map","node","name","includes","console","error","newNodeName","Date","now","updatedData","color","craft","links","source","target","localStorage","setItem","JSON","stringify","handleChange","event","query","value","loadData","a","session","database","run","state","res","close","log","Set","records","r","get","add","Array","from","parse","getItem","this","width","style","display","height","onChange","id","onClick","window","open","graphData","nodeId","nodeLabel","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","onNodeClick","website","React","Component","App","className","Boolean","location","hostname","match","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","encrypted","NEO4J_ENCRYPTED","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.52fd146b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nclass CypherViz extends React.Component {\r\n  constructor({ driver }) {\r\n    super();\r\n    this.driver = driver;\r\n    this.state = {\r\n      query: `\r\n      MATCH (n:Character)-[:INTERACTS1]->(m:Character) \r\n      RETURN n.name as source, m.name as target\r\n      `,\r\n      data: JSON.parse(localStorage.getItem('graphData')) || {\r\n        nodes: [\r\n          { \"name\": \"Dan Wadwhani\", \"color\": \"Gray\", \"craft\": \"business historian\", \"roles\": \"researcher\", \"website\": \"https://www.marshall.usc.edu/personnel/dan-wadhwani\" },\r\n          { \"name\": \"Eugene Choi\", \"color\": \"Gray\", \"craft\": \"digitization of craft\", \"roles\": \"researcher\", \"website\": \"https://kendb.doshisha.ac.jp/profile/en.7895667c8d3ec428.html\" },\r\n          { \"name\": \"Awu Chen\", \"color\": \"White\", \"craft\": \"AI\", \"roles\": \"user\", \"website\": \"https://www.youtube.com/embed/ZqszIG2Vi30?start\" },\r\n          { \"name\": \"John Hijika\", \"color\": \"Blue\", \"craft\": \"curator\", \"roles\": \"curator\", \"website\": \"https://www.instagram.com/hijika_agenda/?hl=en\" }\r\n        ],\r\n        links: [\r\n          { \"source\": \"Dan Wadwhani\", \"target\": \"Eugene Choi\" },\r\n          { \"source\": \"Eugene Choi\", \"target\": \"Awu Chen\" },\r\n          { \"source\": \"Awu Chen\", \"target\": \"John Hijika\" }\r\n        ]\r\n      }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!localStorage.getItem('graphData')) {\r\n      this.addNodeToAwuChen();\r\n    }\r\n  }\r\n\r\n  addNodeToAwuChen = () => {\r\n    this.setState(prevState => {\r\n      const existingNodes = prevState.data.nodes.map(node => node.name);\r\n      if (!existingNodes.includes('Awu Chen')) {\r\n        console.error(\"Awu Chen not found in nodes.\");\r\n        return prevState;\r\n      }\r\n      const newNodeName = `New Node ${Date.now()}`;\r\n      const updatedData = {\r\n        nodes: [...prevState.data.nodes, { name: newNodeName, color: 'Gray', craft: 'Auto-Generated' }],\r\n        links: [...prevState.data.links, { source: 'Awu Chen', target: newNodeName }]\r\n      };\r\n      localStorage.setItem('graphData', JSON.stringify(updatedData));\r\n      return { data: updatedData };\r\n    });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ query: event.target.value });\r\n  };\r\n\r\n  loadData = async () => {\r\n    let session = await this.driver.session({ database: \"gameofthrones\" });\r\n    let res = await session.run(this.state.query);\r\n    session.close();\r\n    console.log(res);\r\n    let nodes = new Set();\r\n    let links = res.records.map(r => {\r\n      let source = r.get(\"source\");\r\n      let target = r.get(\"target\");\r\n      nodes.add(source);\r\n      nodes.add(target);\r\n      return { source, target };\r\n    });\r\n    nodes = Array.from(nodes).map(name => ({ name }));\r\n    const updatedData = { nodes, links };\r\n    localStorage.setItem('graphData', JSON.stringify(updatedData));\r\n    this.setState({ data: updatedData });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div width=\"100%\">\r\n        <textarea\r\n          style={{ display: \"block\", width: \"100%\", height: \"100px\" }}\r\n          value={this.state.query}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button id=\"simulate\" onClick={this.loadData}>Simulate</button>\r\n        <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\r\n        <button id=\"form\" onClick={() => window.open(\"https://hako.soooul.xyz/apply/\", \"_blank\")}>Onboard</button>\r\n        <ForceGraph2D\r\n          graphData={this.state.data}\r\n          nodeId=\"name\"\r\n          nodeLabel=\"craft\"\r\n          linkCurvature={0.2}\r\n          linkDirectionalArrowRelPos={1}\r\n          linkDirectionalArrowLength={10}\r\n          onNodeClick={node => window.open(node.website, 'New Window', 'width=500px,height=500px')}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CypherViz;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'bolt://demo.neo4jlabs.com',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'gameofthrones',\r\n    process.env.NEO4J_PASSWORD || 'gameofthrones'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}