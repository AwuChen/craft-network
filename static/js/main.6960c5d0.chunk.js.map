{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","updateUserActivity","now","Date","setState","lastUserActivity","isUserActive","idleTimeout","clearTimeout","setTimeout","checkIdleAndReturnToDefault","state","processingMutation","customQueryActive","customQueryTimeout","loadData","defaultQuery","startIdleDetection","forEach","event","document","addEventListener","idleCheckInterval","setInterval","stopIdleDetection","removeEventListener","clearInterval","a","newNodeName","queryOverride","session","database","isCustomQuery","queryToExecute","query","pendingNFCNode","isMutationQuery","test","trim","console","error","validStartKeywords","queryStart","toUpperCase","some","keyword","startsWith","run","res","mutationReloadTimeout","pendingNode","isNFCOperation","focusOnNewNode","data","nodes","links","close","nodesMap","Map","records","record","has","get","source","target","set","name","role","location","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","u_name","u_role","u_location","u_website","includes","replace","Array","from","values","updatedData","find","n","currentDataHash","calculateDataHash","hasChanged","lastDataHash","hasDetailedChange","isInitialLoad","hasDataChanged","isDataIdentical","JSON","stringify","localStorage","setItem","timeSinceLastUpdate","lastUpdateTime","forceUpdateForNFC","updateDebounceTime","updateCount","maxUpdatesPerCycle","nodeToSet","latestNode","changedNodesFromPolling","length","log","join","firstChangedNode","focusOnPollingNode","pollingFocusTimeout","pollingFocusNode","nodeName","graphData","attemptFocus","attempt","newNode","fgRef","current","centerAt","zoom","message","focusOnMultipleNodes","nodeNames","nodesStr","map","sort","linksStr","l","newData","oldData","changedNodes","hasChanges","oldNodesMap","oldNode","oldLinksSet","Set","newLink","startPolling","pollingInterval","isPolling","hidden","updateCountResetInterval","stopPolling","connectWebSocket","disconnectWebSocket","websocket","wsConnected","useWebSocket","addNodeNFC","newUser","nfcUserName","capitalizedNewUser","capitalizeWords","str","split","word","charAt","slice","toLowerCase","user","nfcUser","awuUser","waitForStateUpdate","nodeExists","handleChange","newQuery","value","resetQuery","validateAndCleanQuery","currentQuery","React","createRef","defaultData","this","handleVisibilityChange","path","element","addNode","Component","NFCTrigger","useLocation","username","useParams","useEffect","addAndRedirect","window","assign","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","mutatedNodes","setMutatedNodes","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","visibilityFocus","zoomFocus","visibilityNodes","filter","match","neighbor","zoomNodes","searchMatches","searchNodes","mutationNodes","size","visibleNodes","xs","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","extractedNodes","deleteMatches","nameMatch","Boolean","matchClause","nodeMatches","handleEditChange","prev","saveNodeChanges","formattedWebsite","oldName","newName","onSubmit","placeholder","display","margin","onChange","input","type","id","onClick","open","position","top","right","backgroundColor","borderRadius","zIndex","alignItems","gap","animation","ref","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","fillColor","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkColor","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","left","transform","border","boxShadow","onFocus","onBlur","href","rel","substring","App","className","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6960c5d0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\n      latestNode: null, // For NFC editing\n      pollingFocusNode: null, // For polling focus (non-editable)\n      lastUpdateTime: null,\n      isPolling: false,\n      useWebSocket: false,\n      wsConnected: false,\n      customQueryActive: false,\n      customQueryTimeout: null,\n      processingMutation: false,\n      lastUserActivity: Date.now(),\n      isUserActive: true,\n\n    };\n\n    // Store the default query for polling (separate from user input)\n    this.defaultQuery = `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n        RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n        v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`;\n\n    // Store the last known data hash for change detection\n    this.lastDataHash = null;\n    this.pollingInterval = null;\n    this.websocket = null;\n    this.lastUpdateTime = 0;\n    this.updateDebounceTime = 2000; // 2 seconds debounce\n    this.updateCount = 0;\n    this.maxUpdatesPerCycle = 3; // Prevent infinite loops\n    this.mutationReloadTimeout = null;\n    this.idleTimeout = null;\n    this.idleCheckInterval = null;\n    this.isNFCOperation = false; // Flag to prevent double reload during NFC operations\n    this.changedNodesFromPolling = []; // Track nodes changed during polling\n    this.isInitialLoad = true; // Flag to prevent focusing on initial load\n    this.pollingFocusTimeout = null; // Timeout to clear polling focus\n\n  }\n\n\n\n  // Update user activity timestamp\n  updateUserActivity = () => {\n    const now = Date.now();\n    this.setState({ \n      lastUserActivity: now,\n      isUserActive: true \n    });\n    \n    // Clear existing idle timeout\n    if (this.idleTimeout) {\n      clearTimeout(this.idleTimeout);\n    }\n    \n    // Set new idle timeout (5 seconds of inactivity)\n    this.idleTimeout = setTimeout(() => {\n      this.setState({ isUserActive: false });\n    }, 5000); // 5 seconds of inactivity\n  };\n\n  // Check if user is idle and should return to default query\n  checkIdleAndReturnToDefault = () => {\n    // Don't interfere if a mutation is being processed\n    if (this.state.processingMutation) {\n      return;\n    }\n    \n    if (this.state.customQueryActive && !this.state.isUserActive) {\n      this.setState({ \n        customQueryActive: false, \n        customQueryTimeout: null \n      });\n      \n      // Clear any existing timeout\n      if (this.state.customQueryTimeout) {\n        clearTimeout(this.state.customQueryTimeout);\n      }\n      \n      // Reload with default query\n      this.loadData(null, this.defaultQuery);\n    }\n  };\n\n  // Start idle detection system\n  startIdleDetection = () => {\n    // Set up activity listeners\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    activityEvents.forEach(event => {\n      document.addEventListener(event, this.updateUserActivity, true);\n    });\n    \n    // Check for idle state every 2 seconds\n    this.idleCheckInterval = setInterval(() => {\n      this.checkIdleAndReturnToDefault();\n    }, 2000);\n    \n    // Initial activity update\n    this.updateUserActivity();\n  };\n\n  // Stop idle detection\n  stopIdleDetection = () => {\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    activityEvents.forEach(event => {\n      document.removeEventListener(event, this.updateUserActivity, true);\n    });\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.idleTimeout) {\n      clearTimeout(this.idleTimeout);\n      this.idleTimeout = null;\n    }\n  };\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    \n    // Determine which query to use\n    let queryToExecute = queryOverride;\n    let isCustomQuery = false;\n    \n    if (!queryToExecute) {\n      // For polling, use default query unless a custom query is active\n      if (newNodeName === null && !queryOverride && !this.state.customQueryActive) {\n        queryToExecute = this.defaultQuery;\n      } else {\n        // For user-initiated queries, use state.query but validate it\n        queryToExecute = this.state.query;\n        isCustomQuery = true;\n      }\n    } else if (queryOverride !== this.defaultQuery) {\n      // If a custom query is being executed\n      isCustomQuery = true;\n    }\n    \n    // Special handling for NFC operations - if we have a pending NFC node, \n    // we should use the default query to reload the graph after mutation\n    if (newNodeName && this.pendingNFCNode && newNodeName === this.pendingNFCNode) {\n      queryToExecute = this.defaultQuery;\n      isCustomQuery = false;\n    }\n    \n\n    \n    // Check if this is a mutation query BEFORE determining if it's custom\n    const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(queryToExecute.trim());\n    \n    // If it's a mutation query, it should never be treated as a custom query\n    if (isMutationQuery) {\n      isCustomQuery = false;\n    }\n    \n    // Validate the query\n    if (!queryToExecute || typeof queryToExecute !== 'string' || queryToExecute.trim() === '') {\n      console.error(\"Invalid query:\", queryToExecute);\n      return;\n    }\n    \n    // Check if query starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = queryToExecute.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      return;\n    }\n    \n    try {\n  \n              res = await session.run(queryToExecute);\n      \n              // Handle mutations for ALL queries (not just custom ones)\n        if (isMutationQuery) {\n        // For mutation queries, immediately return to default query\n        \n        // Force return to default state regardless of idle detection\n        this.setState({ \n          customQueryActive: false, \n          customQueryTimeout: null,\n          processingMutation: true,\n          isUserActive: true // Temporarily mark as active to prevent idle interference\n        });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Prevent multiple mutation reloads\n        if (this.mutationReloadTimeout) {\n          clearTimeout(this.mutationReloadTimeout);\n        }\n        \n        // Store the pending NFC node before reloading\n        const pendingNode = this.pendingNFCNode;\n        \n        // For NFC operations, don't trigger another reload since addNodeNFC already handles it\n        if (this.isNFCOperation) {\n          // Skip additional reload for NFC operations\n        } else if (!this.state.processingMutation) {\n          // Immediately reload with default query to show updated graph\n          this.loadData(pendingNode, this.defaultQuery);\n        }\n        \n        this.setState({ processingMutation: false });\n        this.mutationReloadTimeout = null;\n        \n        // For NFC operations, focusing is handled in addNodeNFC, so skip here\n        if (pendingNode && !this.isNFCOperation) {\n          setTimeout(() => {\n            this.focusOnNewNode(pendingNode, this.state.data);\n            this.pendingNFCNode = null;\n          }, 1500);\n        } else if (this.isNFCOperation) {\n          // NFC operation - focusing will be handled by addNodeNFC\n        } else {\n          // Reset NFC operation flag if no pending node\n          this.isNFCOperation = false;\n        }\n        \n        // Reset user activity state after a short delay to allow idle detection to work normally\n        setTimeout(() => {\n          this.updateUserActivity();\n        }, 100);\n        \n        // Return early to prevent processing mutation query results\n        return;\n      } else if (isCustomQuery) {\n        // For non-mutation custom queries, activate custom query state\n        this.setState({ customQueryActive: true });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Update user activity to reset idle timer\n        this.updateUserActivity();\n      }\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      console.error(\"Query was:\", queryToExecute);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\") && record.get(\"source\") && record.get(\"target\") && \n          typeof record.get(\"source\") === 'string' && typeof record.get(\"target\") === 'string') {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            location: record.get(\"sourceLocation\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            location: record.get(\"targetLocation\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node && node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                location: node.properties.location || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (node && typeof node === 'object') {\n            // Handle SET query results that might have different structure\n            const name = node.name || node.u_name || `Node-${Date.now()}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.role || node.u_role || \"\",\n                location: node.location || node.u_location || \"\",\n                website: node.website || node.u_website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (typeof node === 'string' && key.includes('name')) {\n            // Handle direct string values from queries like RETURN u.name, u.role\n            const name = node;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: record.get(key.replace('name', 'role')) || \"\",\n                location: record.get(key.replace('name', 'location')) || \"\",\n                website: record.get(key.replace('name', 'website')) || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n    \n    // Check if our NFC node is in the parsed results\n    if (this.pendingNFCNode) {\n      const nfcNodeInResults = nodes.find(n => n.name === this.pendingNFCNode);\n    }\n\n    // Calculate hash of current data for change detection\n    const currentDataHash = this.calculateDataHash(updatedData);\n    const hasChanged = this.lastDataHash !== currentDataHash;\n    \n    // Also use more detailed change detection (but not during initial load)\n    const hasDetailedChange = this.isInitialLoad ? false : this.hasDataChanged(updatedData, this.state.data);\n    \n    // Additional check: if the data is exactly the same, don't update\n    const isDataIdentical = JSON.stringify(updatedData) === JSON.stringify(this.state.data);\n    \n\n    \n\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    \n    // Only update state if there's a change or if it's the initial load\n    const now = Date.now();\n    const timeSinceLastUpdate = now - this.lastUpdateTime;\n    \n    // Force update if we have a newNodeName (NFC operation) regardless of debounce\n    const forceUpdateForNFC = newNodeName && this.pendingNFCNode && newNodeName === this.pendingNFCNode;\n    \n    if ((hasChanged || hasDetailedChange || this.lastDataHash === null || forceUpdateForNFC) && \n        !isDataIdentical &&\n        (timeSinceLastUpdate > this.updateDebounceTime || this.lastDataHash === null || forceUpdateForNFC) &&\n        this.updateCount < this.maxUpdatesPerCycle) {\n      // Update the hash only when we actually update the state\n      this.lastDataHash = currentDataHash;\n      this.lastUpdateTime = now;\n      this.updateCount++;\n      \n      // Mark initial load as complete after first successful update\n      if (this.isInitialLoad) {\n        this.isInitialLoad = false;\n      }\n      \n      // Preserve latestNode if newNodeName is null but we have a valid latestNode\n      // Don't set latestNode during initial load\n      const nodeToSet = this.isInitialLoad ? null : (newNodeName || this.state.latestNode);\n      this.setState({ \n        data: updatedData, \n        latestNode: nodeToSet,\n        lastUpdateTime: hasChanged ? now : this.state.lastUpdateTime\n      }, () => {\n      if (newNodeName) {\n        // Focus on the new node with multiple attempts to ensure it works (NFC editing)\n        this.focusOnNewNode(newNodeName, updatedData);\n      } else if (this.changedNodesFromPolling.length > 0 && !this.isInitialLoad) {\n        // Focus on the first changed node from polling (but not on initial load) - non-editable\n        console.log(`Changed nodes array before focusing: ${this.changedNodesFromPolling.join(', ')}`);\n        const firstChangedNode = this.changedNodesFromPolling[0];\n        console.log(`Focusing on changed node from polling: ${firstChangedNode}`);\n        this.focusOnPollingNode(firstChangedNode, updatedData);\n        \n        // Set a 10-second timeout to clear the focus\n        if (this.pollingFocusTimeout) {\n          clearTimeout(this.pollingFocusTimeout);\n        }\n        this.pollingFocusTimeout = setTimeout(() => {\n          console.log(`Clearing polling focus after 10 seconds`);\n          this.setState({ pollingFocusNode: null });\n          this.pollingFocusTimeout = null;\n        }, 10000); // 10 seconds\n        \n        // Clear the changed nodes list after focusing\n        this.changedNodesFromPolling = [];\n        console.log(`Changed nodes array cleared after focusing`);\n      }\n    });\n    } else {\n      // Even if no change, we might need to update latestNode for new additions\n      if (newNodeName && this.state.latestNode !== newNodeName) {\n        this.setState({ latestNode: newNodeName });\n      }\n      // Reset update count when no changes are detected\n      this.updateCount = 0;\n    }\n  };\n\n    // Focus on a newly added node with multiple attempts\n  focusOnNewNode = (nodeName, graphData) => {\n    console.log(`focusOnNewNode called with nodeName: ${nodeName}`);\n    console.log(`Graph data has ${graphData.nodes.length} nodes`);\n    \n    const attemptFocus = (attempt = 1) => {\n      if (attempt > 5) {\n        console.log(`Failed to focus on node after 5 attempts: ${nodeName}`);\n        return;\n      }\n\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\n      if (!newNode) {\n        console.log(`Node ${nodeName} not found in graph data, attempt ${attempt}`);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      if (!this.fgRef.current) {\n        console.log(`Graph reference not ready, attempt ${attempt}`);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      try {\n        console.log(`Focusing on node: ${nodeName} at (${newNode.x}, ${newNode.y})`);\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n            this.fgRef.current.zoom(1.25);\n        \n        // Also ensure the latestNode state is set\n        this.setState({ latestNode: nodeName });\n        console.log(`Successfully focused on node: ${nodeName}`);\n      } catch (error) {\n        console.log(`Focus attempt failed, retrying: ${error.message}`);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n      }\n    };\n\n    // Start with a longer delay for the first attempt to ensure graph is rendered\n    setTimeout(() => attemptFocus(1), 1000);\n  };\n\n  // Focus on polling changes (non-editable - sets pollingFocusNode)\n  focusOnPollingNode = (nodeName, graphData) => {\n    console.log(`focusOnPollingNode called with nodeName: ${nodeName}`);\n    console.log(`Graph data has ${graphData.nodes.length} nodes`);\n    \n    const attemptFocus = (attempt = 1) => {\n      if (attempt > 5) {\n        console.log(`Failed to focus on polling node after 5 attempts: ${nodeName}`);\n        return;\n      }\n\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\n      if (!newNode) {\n        console.log(`Polling node ${nodeName} not found in graph data, attempt ${attempt}`);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      if (!this.fgRef.current) {\n        console.log(`Graph reference not ready, attempt ${attempt}`);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      try {\n        console.log(`Focusing on polling node: ${nodeName} at (${newNode.x}, ${newNode.y})`);\n        this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n        this.fgRef.current.zoom(1.25);\n        \n        // Set pollingFocusNode (non-editable)\n        this.setState({ pollingFocusNode: nodeName });\n        console.log(`Successfully focused on polling node: ${nodeName}`);\n      } catch (error) {\n        console.log(`Polling focus attempt failed, retrying: ${error.message}`);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n      }\n    };\n\n    // Start with a longer delay for the first attempt to ensure graph is rendered\n    setTimeout(() => attemptFocus(1), 1000);\n  };\n\n  // Focus on multiple nodes (for future use)\n  focusOnMultipleNodes = (nodeNames, graphData) => {\n    if (!nodeNames || nodeNames.length === 0) return;\n    \n    // For now, focus on the first node\n    // In the future, this could calculate a bounding box of all nodes\n    this.focusOnNewNode(nodeNames[0], graphData);\n  };\n\n  // Calculate a simple hash of the graph data for change detection\n  calculateDataHash = (data) => {\n    // Only hash the actual data, not the random coordinates\n    const nodesStr = data.nodes.map(n => `${n.name}:${n.role}:${n.location}:${n.website}`).sort().join('|');\n    const linksStr = data.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }).sort().join('|');\n    return `${nodesStr}|${linksStr}`;\n  };\n\n  // More detailed change detection with change tracking\n  hasDataChanged = (newData, oldData) => {\n    if (!oldData || !oldData.nodes || !oldData.links) return true;\n    \n    let changedNodes = [];\n    let hasChanges = false;\n    \n    console.log(`Change detection - Old nodes: ${oldData.nodes.length}, New nodes: ${newData.nodes.length}`);\n    console.log(`Change detection - Old links: ${oldData.links.length}, New links: ${newData.links.length}`);\n    \n    // Check if number of nodes or links changed\n    if (newData.nodes.length !== oldData.nodes.length || \n        newData.links.length !== oldData.links.length) {\n      hasChanges = true;\n      console.log(`Change detected: Node count or link count changed`);\n    }\n    \n    // Check if any node properties changed\n    const oldNodesMap = new Map(oldData.nodes.map(n => [n.name, n]));\n    for (const newNode of newData.nodes) {\n      const oldNode = oldNodesMap.get(newNode.name);\n      if (!oldNode) {\n        // New node added\n        changedNodes.push(newNode.name);\n        hasChanges = true;\n        console.log(`New node detected: ${newNode.name}`);\n      } else if (oldNode.role !== newNode.role || \n                 oldNode.location !== newNode.location || \n                 oldNode.website !== newNode.website) {\n        // Existing node modified\n        changedNodes.push(newNode.name);\n        hasChanges = true;\n        console.log(`Modified node detected: ${newNode.name}`);\n      }\n    }\n    \n    // Check if any links changed\n    const oldLinksSet = new Set(oldData.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }));\n    \n    for (const newLink of newData.links) {\n      const source = typeof newLink.source === 'object' ? newLink.source.name : newLink.source;\n      const target = typeof newLink.target === 'object' ? newLink.target.name : newLink.target;\n      if (!oldLinksSet.has(`${source}:${target}`)) {\n        // New link added - focus on both source and target nodes\n        if (!changedNodes.includes(source)) changedNodes.push(source);\n        if (!changedNodes.includes(target)) changedNodes.push(target);\n        hasChanges = true;\n        console.log(`New link detected: ${source} -> ${target}`);\n      }\n    }\n    \n    // Store changed nodes for focusing\n    if (hasChanges && changedNodes.length > 0) {\n      console.log(`Setting changedNodesFromPolling to: ${changedNodes.join(', ')}`);\n      this.changedNodesFromPolling = changedNodes;\n      console.log(`Changed nodes from polling: ${changedNodes.join(', ')}`);\n    }\n    \n    console.log(`Change detection result: hasChanges=${hasChanges}, changedNodes=${changedNodes.length}`);\n    return hasChanges;\n  };\n\n  // Start polling for changes\n  startPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    \n    this.setState({ isPolling: true });\n    this.pollingInterval = setInterval(() => {\n      // Only poll if the tab is active (to save resources)\n      if (!document.hidden) {\n        console.log(`Polling triggered - checking for changes`);\n        // Use default query for polling, but respect custom query state, mutation processing, and NFC operations\n        if (this.state.customQueryActive || this.state.processingMutation || this.isNFCOperation) {\n          console.log(`Polling skipped - customQueryActive: ${this.state.customQueryActive}, processingMutation: ${this.state.processingMutation}, isNFCOperation: ${this.isNFCOperation}`);\n          return;\n        }\n        // Don't preserve latestNode during polling - let change detection determine focus\n        console.log(`Polling with null newNodeName to let change detection work`);\n        this.loadData(null, this.defaultQuery);\n      }\n    }, 5000); // Check every 5 seconds\n    \n    // Reset update count every 30 seconds to prevent permanent blocking\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n    }\n    this.updateCountResetInterval = setInterval(() => {\n      this.updateCount = 0;\n    }, 30000);\n  };\n\n  // Stop polling\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n      this.updateCountResetInterval = null;\n    }\n    this.setState({ isPolling: false });\n  };\n\n  // WebSocket methods for real-time updates (disabled for now)\n  connectWebSocket = () => {\n    // WebSocket is disabled - using polling instead\n    // Uncomment and configure when WebSocket server is available\n    /*\n    try {\n      this.websocket = new WebSocket('wss://your-websocket-server.com');\n      \n      this.websocket.onopen = () => {\n        this.setState({ wsConnected: true, useWebSocket: true });\n      };\n      \n      this.websocket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        if (message.type === 'graph_update') {\n          this.loadData(null, this.defaultQuery);\n        }\n      };\n      \n      this.websocket.onclose = () => {\n        this.setState({ wsConnected: false });\n        setTimeout(() => {\n          if (!this.state.isPolling) {\n            this.startPolling();\n          }\n        }, 5000);\n      };\n      \n      this.websocket.onerror = (error) => {\n        this.setState({ wsConnected: false });\n      };\n    } catch (error) {\n      this.startPolling();\n    }\n    */\n    \n    // Start polling directly since WebSocket is disabled\n    this.startPolling();\n  };\n\n  disconnectWebSocket = () => {\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n    this.setState({ wsConnected: false, useWebSocket: false });\n  };\n\n  // Enhanced componentDidMount to start polling directly\n  componentDidMount() {\n    // Validate and clean the query state first\n    this.validateAndCleanQuery();\n    \n    this.loadData();\n    \n    // Start polling (WebSocket is disabled)\n    this.connectWebSocket();\n    \n    // Add visibility change listener to pause polling when tab is not active\n    this.handleVisibilityChange = () => {\n      // Tab visibility change handling\n    };\n    \n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n    \n    // Start idle detection\n    this.startIdleDetection();\n  }\n\n  componentWillUnmount() {\n    // Clean up both polling and WebSocket\n    this.stopPolling();\n    this.disconnectWebSocket();\n    \n    // Clear custom query timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n    \n    // Clear mutation reload timeout\n    if (this.mutationReloadTimeout) {\n      clearTimeout(this.mutationReloadTimeout);\n      this.mutationReloadTimeout = null;\n    }\n    \n    // Clear processing mutation state\n    this.setState({ processingMutation: false });\n    \n    // Clear polling focus timeout\n    if (this.pollingFocusTimeout) {\n      clearTimeout(this.pollingFocusTimeout);\n      this.pollingFocusTimeout = null;\n    }\n    \n    // Stop idle detection\n    this.stopIdleDetection();\n    \n    // Remove visibility change listener\n    if (this.handleVisibilityChange) {\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    // Helper function to capitalize first letter of each word\n    const capitalizeWords = (str) => {\n      if (!str) return str;\n      return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    };\n\n    const capitalizedNewUser = capitalizeWords(newUser);\n\n    // Set NFC operation flag to prevent double reload\n    this.isNFCOperation = true;\n\n    // Clear any existing pending NFC node to prevent conflicts\n    if (this.pendingNFCNode) {\n      this.pendingNFCNode = null;\n    }\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = 'Affiliate', \n                       u.location = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = 'Holder', \n                       nfc.location = '', \n                       nfc.website = ''\n\n         MERGE (awu:User {name: $awuUser}) \n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\n        { \n          user: capitalizedNewUser, \n          nfcUser: capitalizeWords(nfcUserName), \n          awuUser: \"Awu Chen\" \n        }\n        );\n      \n      // Store the new user name for focusing after mutation completes\n      this.pendingNFCNode = capitalizedNewUser;\n      \n      // Trigger a single loadData call to reload the graph with the new node\n      await this.loadData(capitalizedNewUser, this.defaultQuery);\n      \n      // Wait for the state to be updated, then focus\n      let checkCount = 0;\n      const waitForStateUpdate = () => {\n        const nodeExists = this.state.data.nodes.find(n => n.name === capitalizedNewUser);\n        checkCount++;\n        \n        if (nodeExists) {\n          this.focusOnNewNode(capitalizedNewUser, this.state.data);\n          this.pendingNFCNode = null;\n          this.isNFCOperation = false;\n        } else {\n          setTimeout(waitForStateUpdate, 500);\n        }\n      };\n      \n      // Start checking for state update after a short delay\n      setTimeout(waitForStateUpdate, 1000);\n      \n      // Old focusing logic removed - replaced with state-aware focusing above\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    // Only update the query state if it's a valid Cypher query or empty\n    const newQuery = event.target.value;\n    \n    // Allow empty queries (for clearing)\n    if (!newQuery || newQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = newQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (isValidQuery) {\n      this.setState({ query: newQuery });\n    }\n  };\n\n  // Method to reset query to default\n  resetQuery = () => {\n    this.setState({ \n      query: this.defaultQuery,\n      customQueryActive: false,\n      customQueryTimeout: null,\n      processingMutation: false\n    });\n    \n    // Clear any existing timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n  };\n\n  // Method to validate and clean the current query state\n  validateAndCleanQuery = () => {\n    const currentQuery = this.state.query;\n    \n    // Check if current query is valid\n    if (!currentQuery || typeof currentQuery !== 'string' || currentQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = currentQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      this.setState({ query: this.defaultQuery });\n    }\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n        pollingFocusNode={this.state.pollingFocusNode}\n    driver={this.driver} // Pass the driver\n        processingMutation={this.state.processingMutation}\n        updateUserActivity={this.updateUserActivity}\n        isUserActive={this.state.isUserActive}\n    />\n  } />\n  </Routes>\n  \n\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      const newUser = `User-${Date.now()}`;\n      console.log(`NFC Trigger: Starting NFC operation for ${username} with new user ${newUser}`);\n\n      try {\n        console.log(`NFC Trigger: Calling addNode...`);\n        await addNode(newUser, username); // pass dynamic user\n        console.log(`NFC Trigger: addNode completed successfully`);\n        } catch (error) {\n          console.error(\"NFC Trigger: Error adding user:\", error);\n          return;\n        }\n\n        console.log(`NFC Trigger: Redirecting in 2 seconds...`);\n        setTimeout(() => {\n          window.location.assign(\"/craft-network/#/\");\n          }, 2000);\n        };\n\n        console.log(`NFC Trigger: Starting addAndRedirect...`);\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Adding you to {username}'s network...</div>\n      };\n\n              const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, pollingFocusNode, driver, processingMutation, updateUserActivity, isUserActive }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', 'latestNode', or 'mutation'\n        const [mutatedNodes, setMutatedNodes] = useState([]); // Track nodes created/modified by mutation queries\n\n        // Detect when latestNode changes (NFC addition) and set lastAction\n        useEffect(() => {\n          if (latestNode) {\n            setLastAction('latestNode');\n          }\n        }, [latestNode]);\n\n        // Initial zoom when graph first loads\n        useEffect(() => {\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\n            // Wait a bit for the graph to settle, then zoom to 2x\n            setTimeout(() => {\n              if (fgRef.current) {\n                fgRef.current.zoom(2, 1000);\n              }\n            }, 1000);\n          }\n        }, [data.nodes, fgRef, lastAction]);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\n        const visibilityFocus = focusNode || clickedNode || latestNode;\n        // For zoom: use the most recent action\n        const zoomFocus = lastAction === 'search' ? 'search' : \n                         lastAction === 'click' ? clickedNode : \n                         lastAction === 'latestNode' ? latestNode :\n                         lastAction === 'mutation' ? mutatedNodes[0] : null;\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\n        \n        // Always include search results in visibility if there's a search term\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        // Always include mutated nodes in visibility if there was a mutation\n        if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n          mutatedNodes.forEach(nodeName => {\n            const nodeNeighbors = getNDegreeNodes(nodeName, 0); // Always use 0 degree for mutations\n            nodeNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        const zoomNodes = lastAction === 'search' ? \n                         (() => {\n                           const searchMatches = data.nodes.filter(node => \n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                             (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n                           );\n                           const searchNodes = new Set();\n                           searchMatches.forEach(match => {\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\n                           });\n                           return searchNodes;\n                         })() : \n                         lastAction === 'mutation' ?\n                         (() => {\n                           const mutationNodes = new Set();\n                           mutatedNodes.forEach(nodeName => {\n                             const nodeNeighbors = getNDegreeNodes(nodeName, 1); // Always use 1 degree for mutations\n                             nodeNeighbors.forEach(neighbor => mutationNodes.add(neighbor));\n                           });\n                           return mutationNodes;\n                         })() :\n                         getNDegreeNodes(zoomFocus, visibleDegree);\n        \n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && zoomNodes.size > 0) {\n            // Zoom based on last action\n            if (lastAction === 'click' && clickedNode) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (lastAction === 'search' && inputValue) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (lastAction === 'latestNode' && latestNode) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n            // For mutation queries, zoom to the mutated nodes\n            else if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for mutation\n            }\n          }\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue, mutatedNodes]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n          \n          // Update user activity when typing\n          updateUserActivity();\n          \n          // Clear other actions when searching\n          if (input.trim()) {\n            setClickedNode(null);\n            setLastAction('search');\n          }\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            setInputValue(generatedQuery);\n            handleChange({ target: { value: generatedQuery } });\n\n            await loadData(null, generatedQuery);\n\n            // Check if the generated query is a mutation query (updates the graph)\n            const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(generatedQuery.trim());\n            \n            // If it's a mutation query, immediately return to default state\n            if (isMutationQuery) {\n              console.log(\"Mutation query from Flowise detected, immediately returning to default state\");\n              \n              // Extract node names from the mutation query to track what was created/modified\n              let extractedNodes = [];\n              \n              // Handle different mutation query patterns\n              if (generatedQuery.includes('DELETE')) {\n                // For DELETE queries, extract from patterns like DELETE (u:User {name: \"John\"}) or MATCH (u:User {name: \"John\"}) DELETE u\n                const deleteMatches = generatedQuery.match(/\\{name:\\s*['\"]([^'\"]+)['\"]\\}/g);\n                if (deleteMatches) {\n                  extractedNodes = deleteMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean);\n                }\n              } else if (generatedQuery.includes('SET')) {\n                // For SET queries, extract from MATCH clause like MATCH (u:User {name: \"John\"}) SET u.role = 'admin'\n                const matchClause = generatedQuery.match(/MATCH\\s*\\([^)]*\\{name:\\s*['\"]([^'\"]+)['\"][^}]*\\}\\)/i);\n                if (matchClause) {\n                  extractedNodes = [matchClause[1]];\n                }\n              } else {\n                // For CREATE/MERGE queries, extract from {name: \"nodeName\"} patterns\n                const nodeMatches = generatedQuery.match(/\\{([^}]+)\\}/g);\n                extractedNodes = nodeMatches ? \n                  nodeMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean) : [];\n              }\n              \n              setMutatedNodes(extractedNodes);\n              setLastAction('mutation');\n              \n              // Immediately return to default query without any delay\n              const defaultQuery = `\n                MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n                RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n                       v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite\n              `;\n              await loadData(null, defaultQuery);\n            }\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          setLastAction('click');\n          \n          // Update user activity when clicking nodes\n          updateUserActivity();\n          \n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          // Ensure the website has \"https://\" if missing\n          let formattedWebsite = editedNode.website.trim();\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\n            formattedWebsite = \"https://\" + formattedWebsite;\n          }\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.location = $location, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: capitalizeWords(editedNode.name),\n                role: capitalizeWords(editedNode.role),\n                location: capitalizeWords(editedNode.location),\n                website: formattedWebsite, // Use the corrected website\n              }\n            );\n            await loadData(editedNode.name); // Keep the edited node as latestNode\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Show me all the artist in Kyoto...\"\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n      \n\n      \n      {/* Mutation processing indicator */}\n      {processingMutation && (\n        <div style={{\n          position: \"fixed\",\n          top: \"60px\",\n          right: \"10px\",\n          padding: \"8px 12px\",\n          backgroundColor: \"#9C27B0\",\n          color: \"white\",\n          borderRadius: \"4px\",\n          fontSize: \"12px\",\n          zIndex: 1000,\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"8px\"\n        }}>\n          <div style={{\n            width: \"8px\",\n            height: \"8px\",\n            borderRadius: \"50%\",\n            backgroundColor: \"#fff\",\n            animation: \"pulse 0.5s infinite\"\n          }}></div>\n          Processing Mutation...\n        </div>\n      )}\n      \n\n      \n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.location || \"No Location\"}\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n    setLastAction(null);\n    setMutatedNodes([]);\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())));\n    const isNDegree = visibilityNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    // Use latestNode for editing (black), pollingFocusNode for viewing (blue), or white for normal\n    let fillColor = \"white\";\n    if (node.name === latestNode) {\n      fillColor = \"black\"; // Editable node\n    } else if (node.name === pollingFocusNode) {\n      fillColor = \"blue\"; // Non-editable polling focus\n    }\n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = \"gray\";\n    ctx.fillText(node.role, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {selectedNode && editedNode && (\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\n    {selectedNode.name === latestNode ? (\n      <>\n      <h3>Edit Network Info</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n      placeholder=\"Enter name\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \n      /></p>\n\n      <p><strong>Role:</strong>\n      <input \n      name=\"role\" \n      value={editedNode.role} \n      placeholder=\"Enter role\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \n      /></p>\n\n      <p><strong>Location:</strong>\n      <input \n      name=\"location\" \n      value={editedNode.location} \n      placeholder=\"Enter location\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter location\"} \n      /></p>\n\n      <p><strong>Website:</strong>\n      <input \n      name=\"website\" \n      value={editedNode.website} \n      placeholder=\"Enter website\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \n      /></p>\n\n      <p><button onClick={saveNodeChanges}>Save</button></p>\n      </>\n      ) : (\n      <>\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\n      <p><strong>Location:</strong> {selectedNode?.location}</p>\n      <p><strong>Website:</strong>{\" \"}\n      {selectedNode.website && selectedNode.website !== \"\" ? (\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n        ) : (\n        \"\"\n      )}</p>\n      </>\n    )}\n    <button onClick={() => setSelectedNode(null)}>Close</button>\n    </div>\n  )}\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}