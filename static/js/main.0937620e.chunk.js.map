{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","session","database","run","state","query","res","close","nodesMap","Map","links","records","map","r","source","get","target","has","set","name","role","title","website","x","Math","random","y","nodes","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","setState","data","latestNode","setTimeout","newNode","find","n","fgRef","current","console","log","centerAt","zoom","addNodeNFC","newUser","user","prevUser","error","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","location","useLocation","useState","showForm","setShowForm","userData","setUserData","useEffect","e","handleSubmit","preventDefault","window","assign","style","textAlign","padding","fontSize","color","onSubmit","type","placeholder","onChange","required","GraphView","inputValue","setInputValue","selectedNode","setSelectedNode","width","display","height","margin","input","test","matchedNodes","filter","node","toLowerCase","includes","length","firstMatch","id","onClick","open","ref","graphData","nodeId","nodeLabel","onNodeClick","nodeCanvasObject","ctx","isHighlighted","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","position","top","left","transform","backgroundColor","border","boxShadow","zIndex","href","rel","substring","App","className","Boolean","hostname","match","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0937620e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { HashRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\r\nimport './App.css';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nclass CypherViz extends React.Component {\r\n  constructor({ driver }) {\r\n    super();\r\n    this.driver = driver;\r\n    this.fgRef = React.createRef();\r\n    \r\n    this.defaultData = {\r\n      nodes: [],\r\n      links: []\r\n    };\r\n    \r\n    this.state = {\r\n      data: this.defaultData,\r\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \r\n          RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \r\n      v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite`,\r\n      latestNode: null\r\n    };\r\n\r\n  }\r\n\r\n  loadData = async (newNodeName = null) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    let res = await session.run(this.state.query);\r\n    session.close();\r\n\r\n    let nodesMap = new Map();\r\n    let links = res.records.map(r => {\r\n      let source = r.get(\"source\");\r\n      let target = r.get(\"target\");\r\n\r\n    // Add or update source node\r\n      if (!nodesMap.has(source)) {\r\n        nodesMap.set(source, {\r\n          name: source,\r\n          role: r.get(\"sourceRole\") || \"N/A\",\r\n          title: r.get(\"sourceTitle\") || \"N/A\",\r\n          website: r.get(\"sourceWebsite\") || \"N/A\",\r\n          x: Math.random() * 500,\r\n          y: Math.random() * 500\r\n        });\r\n      }\r\n\r\n    // Add or update target node\r\n      if (!nodesMap.has(target)) {\r\n        nodesMap.set(target, {\r\n          name: target,\r\n          role: r.get(\"targetRole\") || \"N/A\",\r\n          title: r.get(\"targetTitle\") || \"N/A\",\r\n          website: r.get(\"targetWebsite\") || \"N/A\",\r\n          x: Math.random() * 500,\r\n          y: Math.random() * 500\r\n        });\r\n      }\r\n\r\n      return { source, target };\r\n    });\r\n\r\n    const nodes = Array.from(nodesMap.values());\r\n    const updatedData = { nodes, links };\r\n\r\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\r\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\r\n      if (newNodeName) {\r\n        setTimeout(() => {\r\n          let newNode = nodes.find(n => n.name === newNodeName);\r\n          if (newNode && this.fgRef.current) {\r\n            console.log(\"Focusing on:\", newNode);\r\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\r\n            this.fgRef.current.zoom(1.25);\r\n          }\r\n        }, 2000);\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  addNodeNFC = async (newUser) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    try {\r\n      await session.run(\r\n        `MERGE (u:User {name: $user}) \r\n             ON CREATE SET u.role = 'new user', \r\n                           u.title = 'TBD', \r\n                           u.website = 'https://hako.soooul.xyz/apply/'\r\n             MERGE (prev:User {name: $prevUser}) \r\n                ON CREATE SET prev.role = 'NFC', \r\n                           prev.title = 'DEMO', \r\n                           prev.website = 'https://www.hako.soooul.xyz/drafts/washi'\r\n        MERGE (u)-[:CONNECTED_TO]->(prev)`,\r\n        { user: newUser, prevUser: \"WASHI Connection\" }\r\n        );\r\n      await this.loadData(newUser);\r\n    } catch (error) {\r\n      console.error(\"Error adding user:\", error);\r\n    } finally {\r\n      session.close();\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ query: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div>\r\n      <Routes>\r\n      <Route path=\"/NFC\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\r\n      <Route path=\"/\" element={<GraphView data={this.state.data} query={this.state.query} handleChange={this.handleChange} loadData={this.loadData} fgRef={this.fgRef} latestNode={this.state.latestNode} />} />\r\n      </Routes>\r\n      </div>\r\n      </Router>\r\n      );\r\n    }\r\n  }\r\n\r\n  const NFCTrigger = ({ addNode }) => {\r\n    const location = useLocation();\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [userData, setUserData] = useState({\r\n      name: '',\r\n      title: '',\r\n      role: '',\r\n      website: ''\r\n      });\r\n\r\n      React.useEffect(() => {\r\n        setShowForm(true);\r\n        }, [location]);\r\n\r\n        const handleChange = (e) => {\r\n          setUserData({ ...userData, [e.target.name]: e.target.value });\r\n        };\r\n\r\n        const handleSubmit = async (e) => {\r\n          e.preventDefault();\r\n          await addNode(userData);\r\n          window.location.assign(\"/craft-network/#/\");\r\n        };\r\n\r\n        return showForm ? (\r\n        <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"black\" }}>\r\n        <h3>Enter Your Information</h3>\r\n        <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" name=\"name\" placeholder=\"Name\" value={userData.name} onChange={handleChange} required /><br />\r\n        <input type=\"text\" name=\"title\" placeholder=\"Title\" value={userData.title} onChange={handleChange} /><br />\r\n        <input type=\"text\" name=\"role\" placeholder=\"Role\" value={userData.role} onChange={handleChange} /><br />\r\n        <input type=\"text\" name=\"website\" placeholder=\"Website\" value={userData.website} onChange={handleChange} /><br />\r\n        <button type=\"submit\">Submit</button>\r\n        </form>\r\n        </div>\r\n        ) : (\r\n        <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>\r\n        Processing NFC tap...\r\n        </div>\r\n        );\r\n      };\r\n\r\n      const GraphView = ({ data, handleChange, loadData, fgRef, latestNode }) => {\r\n        const [inputValue, setInputValue] = useState(\"\"); // Keep input empty initially\r\n        const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n        const handleInputChange = (event) => {\r\n          const input = event.target.value;\r\n          setInputValue(input);\r\n    handleChange(event); // Update query state (even if blank)\r\n\r\n    const isCypherQuery = /\\b(MATCH|RETURN|WHERE|SET|CREATE|MERGE|DELETE)\\b/i.test(input);\r\n\r\n    if (!isCypherQuery && fgRef.current) {\r\n      // Search for nodes matching name OR title\r\n      const matchedNodes = data.nodes.filter(\r\n        (node) =>\r\n        node.name.toLowerCase().includes(input.toLowerCase()) ||\r\n        (node.title && node.title.toLowerCase().includes(input.toLowerCase()))\r\n        );\r\n\r\n      if (matchedNodes.length > 0) {\r\n        const firstMatch = matchedNodes[0]; // Zoom into first matching node\r\n        fgRef.current.centerAt(firstMatch.x, firstMatch.y+100, 1500);\r\n        fgRef.current.zoom(2.5);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleNodeClick = (node) => {\r\n    setSelectedNode(node);\r\n  };\r\n\r\n  return (\r\n    <div width=\"95%\">\r\n    <textarea\r\n    placeholder=\"Enter query, node name, or title...\"\r\n    style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\r\n        value={inputValue} // Starts empty\r\n        onChange={handleInputChange}\r\n        />\r\n        <button id=\"simulate\" onClick={() => loadData()}>Run</button>\r\n        <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\r\n        <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\r\n\r\n        <ForceGraph2D\r\n        ref={fgRef}\r\n        graphData={data}\r\n        nodeId=\"name\"\r\n        nodeLabel={(node) => node.title || \"No Title\"}\r\n        onNodeClick={handleNodeClick}\r\n        nodeCanvasObject={(node, ctx) => {\r\n          const isHighlighted =\r\n          inputValue &&\r\n          (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n          (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())));\r\n\r\n          // Draw the node\r\n          ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\r\n          ctx.strokeStyle = isHighlighted ? \"red\" : \"black\"; // Highlight if name or title matches\r\n          ctx.lineWidth = isHighlighted ? 3 : 2;\r\n          \r\n          ctx.beginPath();\r\n          ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\r\n          ctx.fill();\r\n          ctx.stroke();\r\n\r\n          // Display text (role)\r\n          ctx.fillStyle = \"gray\";\r\n          ctx.fillText(node.role, node.x + 10, node.y);\r\n        }}\r\n        linkCurvature={0.2}\r\n        linkDirectionalArrowRelPos={1}\r\n        linkDirectionalArrowLength={5}\r\n        />\r\n\r\n        {selectedNode && (\r\n          <div style={{\r\n            position: \"absolute\",\r\n            top: \"20%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            padding: \"20px\",\r\n            backgroundColor: \"white\",\r\n            border: \"1px solid black\",\r\n            boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\",\r\n            zIndex: 1000\r\n          }}>\r\n          <h3>Network Info</h3>\r\n          <p><strong>Name:</strong> {selectedNode.name}</p>\r\n          <p><strong>Title:</strong> {selectedNode.title || \"N/A\"}</p>\r\n          <p><strong>Role:</strong> {selectedNode.role || \"N/A\"}</p>\r\n          <p>\r\n          <strong>Website:</strong>{\" \"}\r\n          {selectedNode.website && selectedNode.website !== \"N/A\" ? (\r\n            <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {selectedNode.website.length > 30 \r\n              ? `${selectedNode.website.substring(0, 30)}...`\r\n            : selectedNode.website}\r\n            </a>\r\n            ) : (\r\n            \"N/A\"\r\n          )}\r\n          </p>\r\n          <button onClick={() => setSelectedNode(null)}>Close</button>\r\n          </div>\r\n        )}\r\n          </div>\r\n          );\r\n        };\r\n\r\n\r\n\r\n\r\n        export default CypherViz;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}