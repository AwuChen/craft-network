{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","session","database","run","state","query","res","close","nodes","Set","links","records","map","r","source","get","target","add","Array","from","name","x","Math","random","y","updatedData","localStorage","setItem","JSON","stringify","setState","data","addNodeNFC","newUser","user","prevUser","length","renderGraph","graphData","nodeId","nodeLabel","nodeCanvasObject","node","ctx","fillStyle","beginPath","arc","PI","fill","fillText","linkDirectionalArrowRelPos","linkDirectionalArrowLength","defaultData","this","path","element","addNode","React","Component","NFCTrigger","location","useLocation","useEffect","Date","now","to","App","className","Boolean","window","hostname","match","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAKMA,E,kDACJ,cAAyB,IAAD,EAAVC,EAAU,EAAVA,OAAU,4BACtB,gBAaFC,SAdwB,sBAcb,oCAAAC,EAAA,6DACLC,EAAU,EAAKH,OAAOG,QAAQ,CAAEC,SAAU,UADrC,SAEOD,EAAQE,IAAI,EAAKC,MAAMC,OAF9B,OAELC,EAFK,OAGTL,EAAQM,QAEJC,EAAQ,IAAIC,IACZC,EAAQJ,EAAIK,QAAQC,KAAI,SAAAC,GAC1B,IAAIC,EAASD,EAAEE,IAAI,UACfC,EAASH,EAAEE,IAAI,UAGnB,OAFAP,EAAMS,IAAIH,GACVN,EAAMS,IAAID,GACH,CAAEF,SAAQE,aAGnBR,EAAQU,MAAMC,KAAKX,GAAOI,KAAI,SAAAQ,GAAI,MAAK,CAAEA,OAAMC,EAAmB,IAAhBC,KAAKC,SAAgBC,EAAmB,IAAhBF,KAAKC,aACzEE,EAAc,CAAEjB,QAAOE,SAC7BgB,aAAaC,QAAQ,YAAaC,KAAKC,UAAUJ,IACjD,EAAKK,SAAS,CAAEC,KAAMN,IAjBb,4CAda,EAsCxBO,WAtCwB,uCAsCX,WAAOC,GAAP,iBAAAjC,EAAA,6DACPC,EAAU,EAAKH,OAAOG,QAAQ,CAAEC,SAAU,UADnC,SAELD,EAAQE,IACZ,qGACA,CAAE+B,KAAMD,EAASE,UAAU,YAAK/B,MAAM2B,KAAKvB,MAAM,EAAKJ,MAAM2B,KAAKvB,MAAM4B,OAAS,UAArD,eAAyDhB,OAAQ,SAJnF,OAMXnB,EAAQM,QACR,EAAKR,WAPM,2CAtCW,wDA2DxBsC,YAAc,kBACZ,6BACE,kBAAC,IAAD,CACEC,UAAW,EAAKlC,MAAM2B,KACtBQ,OAAO,OACPC,UAAU,OACVC,iBAAkB,SAACC,EAAMC,GACvBA,EAAIC,UAAY,OAChBD,EAAIE,YACJF,EAAIG,IAAIJ,EAAKrB,GAAqB,IAAhBC,KAAKC,SAAgBmB,EAAKlB,GAAqB,IAAhBF,KAAKC,SAAgB,EAAG,EAAG,EAAID,KAAKyB,IACrFJ,EAAIK,OACJL,EAAIC,UAAY,QAChBD,EAAIM,SAASP,EAAKtB,KAAMsB,EAAKrB,EAAI,GAAIqB,EAAKlB,IAE5C0B,2BAA4B,EAC5BC,2BAA4B,MAxEhC,EAAKrD,OAASA,EAEd,EAAKsD,YAAc,CACjB5C,MAAO,GACPE,MAAO,IAET,EAAKN,MAAQ,CACX2B,KAAM,EAAKqB,YACX/C,MAAO,uFAVa,E,gEAmCtBgD,KAAKtD,a,+BAcL,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuD,KAAK,OAAOC,QAAS,kBAAC,EAAD,CAAYC,QAASH,KAAKrB,eACtD,kBAAC,IAAD,CAAOsB,KAAK,IAAIC,QAASF,KAAKhB,sB,GAtDhBoB,IAAMC,WAiFxBC,EAAa,SAAC,GAAiB,IAAfH,EAAc,EAAdA,QACdI,EAAWC,cAMjB,OALAJ,IAAMK,WAAU,WACd,IAAM7B,EAAO,eAAW8B,KAAKC,OAC7BR,EAAQvB,KACP,CAAC2B,IAEG,kBAAC,IAAD,CAAUK,GAAG,OAGPpE,ICpFAqE,MARf,YAAwB,IAAVpE,EAAS,EAATA,OACZ,OACE,yBAAKqE,UAAU,OACb,kBAAC,EAAD,CAAWrE,OAAQA,MCKLsE,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2D,aCXAzE,EAAS0E,SACbC,iIAAYC,WAAa,wCACzBF,OAAWG,MACTF,iIAAYG,YAAc,QAC1BH,iIAAYI,gBAAkB,+CAEhC,IAMFC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKlF,OAAQA,KAEfmF,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44d3d3e2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { HashRouter as Router, Route, Routes, useLocation, Navigate } from 'react-router-dom';\r\nimport './App.css';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nclass CypherViz extends React.Component {\r\n  constructor({ driver }) {\r\n    super();\r\n    this.driver = driver;\r\n\r\n    this.defaultData = {\r\n      nodes: [],\r\n      links: []\r\n    };\r\n    this.state = {\r\n      data: this.defaultData,\r\n      query: \"MATCH (u:User)-[r:CONNECTED_TO]->(v:User) RETURN u.name AS source, v.name AS target\"\r\n    };\r\n  }\r\n\r\n  loadData = async () => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    let res = await session.run(this.state.query);\r\n    session.close();\r\n\r\n    let nodes = new Set();\r\n    let links = res.records.map(r => {\r\n      let source = r.get(\"source\");\r\n      let target = r.get(\"target\");\r\n      nodes.add(source);\r\n      nodes.add(target);\r\n      return { source, target };\r\n    });\r\n\r\n    nodes = Array.from(nodes).map(name => ({ name, x: Math.random() * 500, y: Math.random() * 500 }));\r\n    const updatedData = { nodes, links };\r\n    localStorage.setItem('graphData', JSON.stringify(updatedData));\r\n    this.setState({ data: updatedData });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  addNodeNFC = async (newUser) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    await session.run(\r\n      \"MERGE (u:User {name: $user}) MERGE (prev:User {name: $prevUser}) MERGE (u)-[:CONNECTED_TO]->(prev)\",\r\n      { user: newUser, prevUser: this.state.data.nodes[this.state.data.nodes.length - 1]?.name || \"Root\" }\r\n    );\r\n    session.close();\r\n    this.loadData();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Routes>\r\n          <Route path=\"/NFC\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\r\n          <Route path=\"/\" element={this.renderGraph()} />\r\n        </Routes>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n  renderGraph = () => (\r\n    <div>\r\n      <ForceGraph2D\r\n        graphData={this.state.data}\r\n        nodeId=\"name\"\r\n        nodeLabel=\"name\"\r\n        nodeCanvasObject={(node, ctx) => {\r\n          ctx.fillStyle = \"blue\";\r\n          ctx.beginPath();\r\n          ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\r\n          ctx.fill();\r\n          ctx.fillStyle = \"black\";\r\n          ctx.fillText(node.name, node.x + 10, node.y);\r\n        }}\r\n        linkDirectionalArrowRelPos={1}\r\n        linkDirectionalArrowLength={5}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst NFCTrigger = ({ addNode }) => {\r\n  const location = useLocation();\r\n  React.useEffect(() => {\r\n    const newUser = `User-${Date.now()}`;\r\n    addNode(newUser);\r\n  }, [location]);\r\n\r\n  return <Navigate to=\"/\" />;\r\n};\r\n\r\nexport default CypherViz;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}