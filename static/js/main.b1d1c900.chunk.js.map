{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","queryOverride","session","database","run","state","query","res","console","error","setState","data","nodes","links","close","nodesMap","Map","records","forEach","record","has","source","get","target","set","name","role","title","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","latestNode","setTimeout","newNode","find","n","fgRef","current","log","centerAt","zoom","addNodeNFC","newUser","nfcUserName","user","nfcUser","awuUser","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","location","useLocation","username","useParams","useEffect","Date","now","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","setFocusNode","clickedNode","setClickedNode","oneDegreeNodes","Set","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","nDegreeNodes","trim","filter","toLowerCase","includes","match","neighbor","size","visibleNodes","length","xs","map","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","handleEditChange","prev","saveNodeChanges","formattedWebsite","startsWith","oldName","newName","onSubmit","placeholder","display","margin","onChange","input","type","id","onClick","open","ref","graphData","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkColor","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","position","top","left","transform","backgroundColor","border","boxShadow","zIndex","onFocus","onBlur","href","rel","substring","App","className","Boolean","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b1d1c900.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite`,\n      latestNode: null\n    };\n\n  }\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    try {\n      res = await session.run(queryOverride || this.state.query);\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\")) {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            title: record.get(\"sourceTitle\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            title: record.get(\"targetTitle\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                title: node.properties.title || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\n      if (newNodeName) {\n        setTimeout(() => {\n          let newNode = nodes.find((n) => n.name === newNodeName);\n          if (newNode && this.fgRef.current) {\n            console.log(\"Focusing on:\", newNode);\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n            this.fgRef.current.zoom(1.25);\n          }\n        }, 2000);\n      }\n    });\n  };\n\n\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = 'affiliate', \n                       u.title = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = 'ambassador', \n                       nfc.title = $nfcUser + \"'s network\", \n                       nfc.website = ''\n\n         MERGE (awu:User {name: $awuUser}) \n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\n        { \n          user: newUser, \n          nfcUser: nfcUserName, \n          awuUser: \"Awu Chen\" \n        }\n        );\n      await this.loadData(newUser);\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    this.setState({ query: event.target.value });\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n    driver={this.driver} // Pass the driver\n    />\n  } />\n  </Routes>\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      const newUser = `User-${Date.now()}`;\n\n      try {\n        await addNode(newUser, username); // pass dynamic user\n        } catch (error) {\n          console.error(\"Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/craft-network/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap for {username}...</div>\n      };\n\n      const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        const currentFocus = clickedNode || latestNode;\n        let nDegreeNodes = getNDegreeNodes(currentFocus, visibleDegree);\n        \n        // If there's a search term, also include nodes that match the search and their n-degree neighbors\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => nDegreeNodes.add(neighbor));\n          });\n        }\n\n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && nDegreeNodes.size > 0) {\n            // Priority: clicked nodes > search > latestNode\n            if (clickedNode && clickedNode !== latestNode) {\n              const visibleNodes = data.nodes.filter(node => nDegreeNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (inputValue && !clickedNode) {\n              const visibleNodes = data.nodes.filter(node => nDegreeNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (latestNode && !clickedNode && !inputValue) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => nDegreeNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n          }\n        }, [nDegreeNodes, data.nodes, fgRef, inputValue, clickedNode, latestNode]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            setInputValue(generatedQuery);\n            handleChange({ target: { value: generatedQuery } });\n\n            await loadData(null, generatedQuery);\n\n            // Then reload the full graph with your default MATCH query\n            const defaultQuery = `\n              MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n              RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \n                     v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite\n            `;\n            await loadData(null, defaultQuery);\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Ensure the website has \"https://\" if missing\n          let formattedWebsite = editedNode.website.trim();\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\n            formattedWebsite = \"https://\" + formattedWebsite;\n          }\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.title = $title, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: editedNode.name,\n                role: editedNode.role,\n                title: editedNode.title,\n                website: formattedWebsite, // Use the corrected website\n              }\n            );\n            await loadData(editedNode.name); // Keep the edited node as latestNode\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Enter natural language query, search for nodes...\"\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.title || \"No Title\"}\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())));\n    const isOneDegree = oneDegreeNodes.has(node.name);\n    const isNDegree = nDegreeNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = \"gray\";\n    ctx.fillText(node.role, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = nDegreeNodes.has(sourceName) && nDegreeNodes.has(targetName);\n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = nDegreeNodes.has(sourceName) && nDegreeNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {selectedNode && editedNode && (\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\n    {selectedNode.name === latestNode ? (\n      <>\n      <h3>Edit Network Info</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n      placeholder=\"Enter name\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \n      /></p>\n\n      <p><strong>Title:</strong>\n      <input \n      name=\"title\" \n      value={editedNode.title} \n      placeholder=\"Enter title\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter title\"} \n      /></p>\n\n      <p><strong>Role:</strong>\n      <input \n      name=\"role\" \n      value={editedNode.role} \n      placeholder=\"Enter role\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \n      /></p>\n\n      <p><strong>Website:</strong>\n      <input \n      name=\"website\" \n      value={editedNode.website} \n      placeholder=\"Enter website\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \n      /></p>\n\n      <p><button onClick={saveNodeChanges}>Save</button></p>\n      </>\n      ) : (\n      <>\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      <p><strong>Title:</strong> {selectedNode?.title}</p>\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\n      <p><strong>Website:</strong>{\" \"}\n      {selectedNode.website && selectedNode.website !== \"\" ? (\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n        ) : (\n        \"\"\n      )}</p>\n      </>\n    )}\n    <button onClick={() => setSelectedNode(null)}>Close</button>\n    </div>\n  )}\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}