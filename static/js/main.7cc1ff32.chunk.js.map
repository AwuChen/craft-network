{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","updateUserActivity","now","Date","setState","lastUserActivity","isUserActive","idleTimeout","clearTimeout","setTimeout","checkIdleAndReturnToDefault","state","processingMutation","customQueryActive","customQueryTimeout","loadData","defaultQuery","startIdleDetection","forEach","event","document","addEventListener","idleCheckInterval","setInterval","stopIdleDetection","removeEventListener","clearInterval","a","newNodeName","queryOverride","session","database","isCustomQuery","queryToExecute","query","pendingNFCNode","isMutationQuery","test","trim","console","error","validStartKeywords","queryStart","toUpperCase","some","keyword","startsWith","run","res","mutationReloadTimeout","pendingNode","isNFCOperation","focusOnNewNode","data","nodes","links","close","nodesMap","Map","records","record","has","get","source","target","set","name","role","location","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","u_name","u_role","u_location","u_website","includes","replace","Array","from","values","updatedData","find","n","currentDataHash","calculateDataHash","hasChanged","lastDataHash","hasDetailedChange","isInitialLoad","hasDataChanged","isDataIdentical","JSON","stringify","localStorage","setItem","timeSinceLastUpdate","lastUpdateTime","forceUpdateForNFC","updateDebounceTime","updateCount","maxUpdatesPerCycle","nodeToSet","latestNode","changedNodesFromPolling","length","firstChangedNode","focusOnPollingNode","pollingFocusTimeout","pollingFocusNode","nodeName","graphData","attemptFocus","attempt","newNode","fgRef","current","centerAt","zoom","focusOnMultipleNodes","nodeNames","nodesStr","map","sort","join","linksStr","l","newData","oldData","changedNodes","hasChanges","oldNodesMap","oldNode","oldLinksSet","Set","newLink","startPolling","pollingInterval","isPolling","hidden","updateCountResetInterval","stopPolling","connectWebSocket","disconnectWebSocket","websocket","wsConnected","useWebSocket","addNodeNFC","newUser","nfcUserName","capitalizedNewUser","capitalizeWords","str","split","word","charAt","slice","toLowerCase","user","nfcUser","awuUser","waitForStateUpdate","nodeExists","handleChange","newQuery","value","resetQuery","validateAndCleanQuery","currentQuery","React","createRef","defaultData","this","handleVisibilityChange","path","element","addNode","Component","NFCTrigger","useLocation","username","useParams","useEffect","log","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","mutatedNodes","setMutatedNodes","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","visibilityFocus","zoomFocus","visibilityNodes","filter","match","neighbor","zoomNodes","searchMatches","searchNodes","mutationNodes","size","visibleNodes","xs","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","extractedNodes","deleteMatches","nameMatch","Boolean","matchClause","nodeMatches","handleEditChange","prev","saveNodeChanges","formattedWebsite","oldName","newName","type","placeholder","display","margin","border","borderRadius","onChange","input","onKeyPress","id","onClick","open","position","top","right","backgroundColor","zIndex","alignItems","gap","animation","ref","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","fillColor","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkColor","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","left","transform","boxShadow","onFocus","onBlur","href","rel","substring","App","className","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7cc1ff32.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\r\nimport './App.css';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nclass CypherViz extends React.Component {\r\n  constructor({ driver }) {\r\n    super();\r\n    this.driver = driver;\r\n    this.fgRef = React.createRef();\r\n    \r\n    this.defaultData = {\r\n      nodes: [],\r\n      links: []\r\n    };\r\n    \r\n    this.state = {\r\n      data: this.defaultData,\r\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \r\n          RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \r\n      v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\r\n      latestNode: null, // For NFC editing\r\n      pollingFocusNode: null, // For polling focus (non-editable)\r\n      lastUpdateTime: null,\r\n      isPolling: false,\r\n      useWebSocket: false,\r\n      wsConnected: false,\r\n      customQueryActive: false,\r\n      customQueryTimeout: null,\r\n      processingMutation: false,\r\n      lastUserActivity: Date.now(),\r\n      isUserActive: true,\r\n\r\n    };\r\n\r\n    // Store the default query for polling (separate from user input)\r\n    this.defaultQuery = `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \r\n        RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \r\n        v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`;\r\n\r\n    // Store the last known data hash for change detection\r\n    this.lastDataHash = null;\r\n    this.pollingInterval = null;\r\n    this.websocket = null;\r\n    this.lastUpdateTime = 0;\r\n    this.updateDebounceTime = 2000; // 2 seconds debounce\r\n    this.updateCount = 0;\r\n    this.maxUpdatesPerCycle = 3; // Prevent infinite loops\r\n    this.mutationReloadTimeout = null;\r\n    this.idleTimeout = null;\r\n    this.idleCheckInterval = null;\r\n    this.isNFCOperation = false; // Flag to prevent double reload during NFC operations\r\n    this.changedNodesFromPolling = []; // Track nodes changed during polling\r\n    this.isInitialLoad = true; // Flag to prevent focusing on initial load\r\n    this.pollingFocusTimeout = null; // Timeout to clear polling focus\r\n\r\n  }\r\n\r\n\r\n\r\n  // Update user activity timestamp\r\n  updateUserActivity = () => {\r\n    const now = Date.now();\r\n    this.setState({ \r\n      lastUserActivity: now,\r\n      isUserActive: true \r\n    });\r\n    \r\n    // Clear existing idle timeout\r\n    if (this.idleTimeout) {\r\n      clearTimeout(this.idleTimeout);\r\n    }\r\n    \r\n    // Set new idle timeout (5 seconds of inactivity)\r\n    this.idleTimeout = setTimeout(() => {\r\n      this.setState({ isUserActive: false });\r\n    }, 5000); // 5 seconds of inactivity\r\n  };\r\n\r\n  // Check if user is idle and should return to default query\r\n  checkIdleAndReturnToDefault = () => {\r\n    // Don't interfere if a mutation is being processed\r\n    if (this.state.processingMutation) {\r\n      return;\r\n    }\r\n    \r\n    if (this.state.customQueryActive && !this.state.isUserActive) {\r\n      this.setState({ \r\n        customQueryActive: false, \r\n        customQueryTimeout: null \r\n      });\r\n      \r\n      // Clear any existing timeout\r\n      if (this.state.customQueryTimeout) {\r\n        clearTimeout(this.state.customQueryTimeout);\r\n      }\r\n      \r\n      // Reload with default query\r\n      this.loadData(null, this.defaultQuery);\r\n    }\r\n  };\r\n\r\n  // Start idle detection system\r\n  startIdleDetection = () => {\r\n    // Set up activity listeners\r\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\r\n    \r\n    activityEvents.forEach(event => {\r\n      document.addEventListener(event, this.updateUserActivity, true);\r\n    });\r\n    \r\n    // Check for idle state every 2 seconds\r\n    this.idleCheckInterval = setInterval(() => {\r\n      this.checkIdleAndReturnToDefault();\r\n    }, 2000);\r\n    \r\n    // Initial activity update\r\n    this.updateUserActivity();\r\n  };\r\n\r\n  // Stop idle detection\r\n  stopIdleDetection = () => {\r\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\r\n    \r\n    activityEvents.forEach(event => {\r\n      document.removeEventListener(event, this.updateUserActivity, true);\r\n    });\r\n    \r\n    if (this.idleCheckInterval) {\r\n      clearInterval(this.idleCheckInterval);\r\n      this.idleCheckInterval = null;\r\n    }\r\n    \r\n    if (this.idleTimeout) {\r\n      clearTimeout(this.idleTimeout);\r\n      this.idleTimeout = null;\r\n    }\r\n  };\r\n\r\n  loadData = async (newNodeName = null, queryOverride = null) => {\r\n\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    let res;\r\n    \r\n    // Determine which query to use\r\n    let queryToExecute = queryOverride;\r\n    let isCustomQuery = false;\r\n    \r\n    if (!queryToExecute) {\r\n      // For polling, use default query unless a custom query is active\r\n      if (newNodeName === null && !queryOverride && !this.state.customQueryActive) {\r\n        queryToExecute = this.defaultQuery;\r\n      } else {\r\n        // For user-initiated queries, use state.query but validate it\r\n        queryToExecute = this.state.query;\r\n        isCustomQuery = true;\r\n      }\r\n    } else if (queryOverride !== this.defaultQuery) {\r\n      // If a custom query is being executed\r\n      isCustomQuery = true;\r\n    }\r\n    \r\n    // Special handling for NFC operations - if we have a pending NFC node, \r\n    // we should use the default query to reload the graph after mutation\r\n    if (newNodeName && this.pendingNFCNode && newNodeName === this.pendingNFCNode) {\r\n      queryToExecute = this.defaultQuery;\r\n      isCustomQuery = false;\r\n    }\r\n    \r\n\r\n    \r\n    // Check if this is a mutation query BEFORE determining if it's custom\r\n    const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(queryToExecute.trim());\r\n    \r\n    // If it's a mutation query, it should never be treated as a custom query\r\n    if (isMutationQuery) {\r\n      isCustomQuery = false;\r\n    }\r\n    \r\n    // Validate the query\r\n    if (!queryToExecute || typeof queryToExecute !== 'string' || queryToExecute.trim() === '') {\r\n      console.error(\"Invalid query:\", queryToExecute);\r\n      return;\r\n    }\r\n    \r\n    // Check if query starts with valid Cypher keywords\r\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\r\n    const queryStart = queryToExecute.trim().toUpperCase();\r\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\r\n    \r\n    if (!isValidQuery) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n  \r\n              res = await session.run(queryToExecute);\r\n      \r\n              // Handle mutations for ALL queries (not just custom ones)\r\n        if (isMutationQuery) {\r\n        // For mutation queries, immediately return to default query\r\n        \r\n        // Force return to default state regardless of idle detection\r\n        this.setState({ \r\n          customQueryActive: false, \r\n          customQueryTimeout: null,\r\n          processingMutation: true,\r\n          isUserActive: true // Temporarily mark as active to prevent idle interference\r\n        });\r\n        \r\n        // Clear any existing timeout\r\n        if (this.state.customQueryTimeout) {\r\n          clearTimeout(this.state.customQueryTimeout);\r\n        }\r\n        \r\n        // Prevent multiple mutation reloads\r\n        if (this.mutationReloadTimeout) {\r\n          clearTimeout(this.mutationReloadTimeout);\r\n        }\r\n        \r\n        // Store the pending NFC node before reloading\r\n        const pendingNode = this.pendingNFCNode;\r\n        \r\n        // For NFC operations, don't trigger another reload since addNodeNFC already handles it\r\n        if (this.isNFCOperation) {\r\n          // Skip additional reload for NFC operations\r\n        } else if (!this.state.processingMutation) {\r\n          // Immediately reload with default query to show updated graph\r\n          this.loadData(pendingNode, this.defaultQuery);\r\n        }\r\n        \r\n        this.setState({ processingMutation: false });\r\n        this.mutationReloadTimeout = null;\r\n        \r\n        // For NFC operations, focusing is handled in addNodeNFC, so skip here\r\n        if (pendingNode && !this.isNFCOperation) {\r\n          setTimeout(() => {\r\n            this.focusOnNewNode(pendingNode, this.state.data);\r\n            this.pendingNFCNode = null;\r\n          }, 1500);\r\n        } else if (this.isNFCOperation) {\r\n          // NFC operation - focusing will be handled by addNodeNFC\r\n        } else {\r\n          // Reset NFC operation flag if no pending node\r\n          this.isNFCOperation = false;\r\n        }\r\n        \r\n        // Reset user activity state after a short delay to allow idle detection to work normally\r\n        setTimeout(() => {\r\n          this.updateUserActivity();\r\n        }, 100);\r\n        \r\n        // Return early to prevent processing mutation query results\r\n        return;\r\n      } else if (isCustomQuery) {\r\n        // For non-mutation custom queries, activate custom query state\r\n        this.setState({ customQueryActive: true });\r\n        \r\n        // Clear any existing timeout\r\n        if (this.state.customQueryTimeout) {\r\n          clearTimeout(this.state.customQueryTimeout);\r\n        }\r\n        \r\n        // Update user activity to reset idle timer\r\n        this.updateUserActivity();\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Neo4j query failed:\", err);\r\n      console.error(\"Query was:\", queryToExecute);\r\n      this.setState({ data: { nodes: [], links: [] } });\r\n      return;\r\n    } finally {\r\n      session.close();\r\n    }\r\n\r\n\r\n    let nodesMap = new Map();\r\n    let links = [];\r\n\r\n    // Intelligent parser\r\n    res.records.forEach((record) => {\r\n      if (record.has(\"source\") && record.has(\"target\") && record.get(\"source\") && record.get(\"target\") && \r\n          typeof record.get(\"source\") === 'string' && typeof record.get(\"target\") === 'string') {\r\n        // standard case\r\n        let source = record.get(\"source\");\r\n        let target = record.get(\"target\");\r\n\r\n        if (!nodesMap.has(source)) {\r\n          nodesMap.set(source, {\r\n            name: source,\r\n            role: record.get(\"sourceRole\"),\r\n            location: record.get(\"sourceLocation\"),\r\n            website: record.get(\"sourceWebsite\"),\r\n            x: Math.random() * 500,\r\n            y: Math.random() * 500,\r\n          });\r\n        }\r\n\r\n        if (!nodesMap.has(target)) {\r\n          nodesMap.set(target, {\r\n            name: target,\r\n            role: record.get(\"targetRole\"),\r\n            location: record.get(\"targetLocation\"),\r\n            website: record.get(\"targetWebsite\"),\r\n            x: Math.random() * 500,\r\n            y: Math.random() * 500,\r\n          });\r\n        }\r\n\r\n        if (nodesMap.has(source) && nodesMap.has(target)) {\r\n          links.push({ source, target });\r\n        } else {\r\n  console.warn(\"Invalid link skipped:\", { source, target });\r\n}\r\n      } else {\r\n        // fallback: node-only query\r\n        record.keys.forEach((key) => {\r\n          const node = record.get(key);\r\n          if (node && node.properties && node.identity) {\r\n            const name = node.properties.name || `Node-${node.identity.low}`;\r\n            if (!nodesMap.has(name)) {\r\n              nodesMap.set(name, {\r\n                name,\r\n                role: node.properties.role || \"\",\r\n                location: node.properties.location || \"\",\r\n                website: node.properties.website || \"\",\r\n                x: Math.random() * 500,\r\n                y: Math.random() * 500,\r\n              });\r\n            }\r\n          } else if (node && typeof node === 'object') {\r\n            // Handle SET query results that might have different structure\r\n            const name = node.name || node.u_name || `Node-${Date.now()}`;\r\n            if (!nodesMap.has(name)) {\r\n              nodesMap.set(name, {\r\n                name,\r\n                role: node.role || node.u_role || \"\",\r\n                location: node.location || node.u_location || \"\",\r\n                website: node.website || node.u_website || \"\",\r\n                x: Math.random() * 500,\r\n                y: Math.random() * 500,\r\n              });\r\n            }\r\n          } else if (typeof node === 'string' && key.includes('name')) {\r\n            // Handle direct string values from queries like RETURN u.name, u.role\r\n            const name = node;\r\n            if (!nodesMap.has(name)) {\r\n              nodesMap.set(name, {\r\n                name,\r\n                role: record.get(key.replace('name', 'role')) || \"\",\r\n                location: record.get(key.replace('name', 'location')) || \"\",\r\n                website: record.get(key.replace('name', 'website')) || \"\",\r\n                x: Math.random() * 500,\r\n                y: Math.random() * 500,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    const nodes = Array.from(nodesMap.values());\r\n    const updatedData = { nodes, links };\r\n    \r\n    // Check if our NFC node is in the parsed results\r\n    if (this.pendingNFCNode) {\r\n      const nfcNodeInResults = nodes.find(n => n.name === this.pendingNFCNode);\r\n    }\r\n\r\n    // Calculate hash of current data for change detection\r\n    const currentDataHash = this.calculateDataHash(updatedData);\r\n    const hasChanged = this.lastDataHash !== currentDataHash;\r\n    \r\n    // Also use more detailed change detection (but not during initial load)\r\n    const hasDetailedChange = this.isInitialLoad ? false : this.hasDataChanged(updatedData, this.state.data);\r\n    \r\n    // Additional check: if the data is exactly the same, don't update\r\n    const isDataIdentical = JSON.stringify(updatedData) === JSON.stringify(this.state.data);\r\n    \r\n\r\n    \r\n\r\n\r\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\r\n    \r\n    // Only update state if there's a change or if it's the initial load\r\n    const now = Date.now();\r\n    const timeSinceLastUpdate = now - this.lastUpdateTime;\r\n    \r\n    // Force update if we have a newNodeName (NFC operation) regardless of debounce\r\n    const forceUpdateForNFC = newNodeName && this.pendingNFCNode && newNodeName === this.pendingNFCNode;\r\n    \r\n    if ((hasChanged || hasDetailedChange || this.lastDataHash === null || forceUpdateForNFC) && \r\n        !isDataIdentical &&\r\n        (timeSinceLastUpdate > this.updateDebounceTime || this.lastDataHash === null || forceUpdateForNFC) &&\r\n        this.updateCount < this.maxUpdatesPerCycle) {\r\n      // Update the hash only when we actually update the state\r\n      this.lastDataHash = currentDataHash;\r\n      this.lastUpdateTime = now;\r\n      this.updateCount++;\r\n      \r\n      // Mark initial load as complete after first successful update\r\n      if (this.isInitialLoad) {\r\n        this.isInitialLoad = false;\r\n      }\r\n      \r\n      // Preserve latestNode if newNodeName is null but we have a valid latestNode\r\n      // Don't set latestNode during initial load\r\n      const nodeToSet = this.isInitialLoad ? null : (newNodeName || this.state.latestNode);\r\n      this.setState({ \r\n        data: updatedData, \r\n        latestNode: nodeToSet,\r\n        lastUpdateTime: hasChanged ? now : this.state.lastUpdateTime\r\n      }, () => {\r\n      if (newNodeName) {\r\n        // Focus on the new node with multiple attempts to ensure it works (NFC editing)\r\n        this.focusOnNewNode(newNodeName, updatedData);\r\n      } else if (this.changedNodesFromPolling.length > 0 && !this.isInitialLoad) {\r\n        // Focus on the first changed node from polling (but not on initial load) - non-editable\r\n        const firstChangedNode = this.changedNodesFromPolling[0];\r\n        this.focusOnPollingNode(firstChangedNode, updatedData);\r\n        \r\n        // Set a 10-second timeout to clear the focus\r\n        if (this.pollingFocusTimeout) {\r\n          clearTimeout(this.pollingFocusTimeout);\r\n        }\r\n        this.pollingFocusTimeout = setTimeout(() => {\r\n          this.setState({ pollingFocusNode: null });\r\n          this.pollingFocusTimeout = null;\r\n        }, 10000); // 10 seconds\r\n        \r\n        // Clear the changed nodes list after focusing\r\n        this.changedNodesFromPolling = [];\r\n      }\r\n    });\r\n    } else {\r\n      // Even if no change, we might need to update latestNode for new additions\r\n      if (newNodeName && this.state.latestNode !== newNodeName) {\r\n        this.setState({ latestNode: newNodeName });\r\n      }\r\n      // Reset update count when no changes are detected\r\n      this.updateCount = 0;\r\n    }\r\n  };\r\n\r\n    // Focus on a newly added node with multiple attempts\r\n  focusOnNewNode = (nodeName, graphData) => {\r\n    \r\n    const attemptFocus = (attempt = 1) => {\r\n      if (attempt > 5) {\r\n        return;\r\n      }\r\n\r\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\r\n      if (!newNode) {\r\n        setTimeout(() => attemptFocus(attempt + 1), 500);\r\n        return;\r\n      }\r\n\r\n      if (!this.fgRef.current) {\r\n        setTimeout(() => attemptFocus(attempt + 1), 500);\r\n        return;\r\n      }\r\n\r\n      try {\r\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\r\n            this.fgRef.current.zoom(1.25);\r\n        \r\n        // Also ensure the latestNode state is set\r\n        this.setState({ latestNode: nodeName });\r\n      } catch (error) {\r\n        setTimeout(() => attemptFocus(attempt + 1), 500);\r\n      }\r\n    };\r\n\r\n    // Start with a longer delay for the first attempt to ensure graph is rendered\r\n    setTimeout(() => attemptFocus(1), 1000);\r\n  };\r\n\r\n  // Focus on polling changes (non-editable - sets pollingFocusNode)\r\n  focusOnPollingNode = (nodeName, graphData) => {\r\n    \r\n    const attemptFocus = (attempt = 1) => {\r\n      if (attempt > 5) {\r\n        return;\r\n      }\r\n\r\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\r\n      if (!newNode) {\r\n        setTimeout(() => attemptFocus(attempt + 1), 500);\r\n        return;\r\n      }\r\n\r\n      if (!this.fgRef.current) {\r\n        setTimeout(() => attemptFocus(attempt + 1), 500);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\r\n        this.fgRef.current.zoom(1.25);\r\n        \r\n        // Set pollingFocusNode (non-editable)\r\n        this.setState({ pollingFocusNode: nodeName });\r\n      } catch (error) {\r\n        setTimeout(() => attemptFocus(attempt + 1), 500);\r\n      }\r\n    };\r\n\r\n    // Start with a longer delay for the first attempt to ensure graph is rendered\r\n    setTimeout(() => attemptFocus(1), 1000);\r\n  };\r\n\r\n  // Focus on multiple nodes (for future use)\r\n  focusOnMultipleNodes = (nodeNames, graphData) => {\r\n    if (!nodeNames || nodeNames.length === 0) return;\r\n    \r\n    // For now, focus on the first node\r\n    // In the future, this could calculate a bounding box of all nodes\r\n    this.focusOnNewNode(nodeNames[0], graphData);\r\n  };\r\n\r\n  // Calculate a simple hash of the graph data for change detection\r\n  calculateDataHash = (data) => {\r\n    // Only hash the actual data, not the random coordinates\r\n    const nodesStr = data.nodes.map(n => `${n.name}:${n.role}:${n.location}:${n.website}`).sort().join('|');\r\n    const linksStr = data.links.map(l => {\r\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\r\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\r\n      return `${source}:${target}`;\r\n    }).sort().join('|');\r\n    return `${nodesStr}|${linksStr}`;\r\n  };\r\n\r\n  // More detailed change detection with change tracking\r\n  hasDataChanged = (newData, oldData) => {\r\n    if (!oldData || !oldData.nodes || !oldData.links) return true;\r\n    \r\n    let changedNodes = [];\r\n    let hasChanges = false;\r\n    \r\n    // Check if number of nodes or links changed\r\n    if (newData.nodes.length !== oldData.nodes.length || \r\n        newData.links.length !== oldData.links.length) {\r\n      hasChanges = true;\r\n    }\r\n    \r\n    // Check if any node properties changed\r\n    const oldNodesMap = new Map(oldData.nodes.map(n => [n.name, n]));\r\n    for (const newNode of newData.nodes) {\r\n      const oldNode = oldNodesMap.get(newNode.name);\r\n      if (!oldNode) {\r\n        // New node added\r\n        changedNodes.push(newNode.name);\r\n        hasChanges = true;\r\n      } else if (oldNode.role !== newNode.role || \r\n                 oldNode.location !== newNode.location || \r\n                 oldNode.website !== newNode.website) {\r\n        // Existing node modified\r\n        changedNodes.push(newNode.name);\r\n        hasChanges = true;\r\n      }\r\n    }\r\n    \r\n    // Check if any links changed\r\n    const oldLinksSet = new Set(oldData.links.map(l => {\r\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\r\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\r\n      return `${source}:${target}`;\r\n    }));\r\n    \r\n    for (const newLink of newData.links) {\r\n      const source = typeof newLink.source === 'object' ? newLink.source.name : newLink.source;\r\n      const target = typeof newLink.target === 'object' ? newLink.target.name : newLink.target;\r\n      if (!oldLinksSet.has(`${source}:${target}`)) {\r\n        // New link added - focus on both source and target nodes\r\n        if (!changedNodes.includes(source)) changedNodes.push(source);\r\n        if (!changedNodes.includes(target)) changedNodes.push(target);\r\n        hasChanges = true;\r\n      }\r\n    }\r\n    \r\n    // Store changed nodes for focusing\r\n    if (hasChanges && changedNodes.length > 0) {\r\n      this.changedNodesFromPolling = changedNodes;\r\n    }\r\n    \r\n    return hasChanges;\r\n  };\r\n\r\n  // Start polling for changes\r\n  startPolling = () => {\r\n    if (this.pollingInterval) {\r\n      clearInterval(this.pollingInterval);\r\n    }\r\n    \r\n    this.setState({ isPolling: true });\r\n    this.pollingInterval = setInterval(() => {\r\n      // Only poll if the tab is active (to save resources)\r\n      if (!document.hidden) {\r\n        // Use default query for polling, but respect custom query state, mutation processing, and NFC operations\r\n        if (this.state.customQueryActive || this.state.processingMutation || this.isNFCOperation) {\r\n          return;\r\n        }\r\n        // Don't preserve latestNode during polling - let change detection determine focus\r\n        this.loadData(null, this.defaultQuery);\r\n      }\r\n    }, 5000); // Check every 5 seconds\r\n    \r\n    // Reset update count every 30 seconds to prevent permanent blocking\r\n    if (this.updateCountResetInterval) {\r\n      clearInterval(this.updateCountResetInterval);\r\n    }\r\n    this.updateCountResetInterval = setInterval(() => {\r\n      this.updateCount = 0;\r\n    }, 30000);\r\n  };\r\n\r\n  // Stop polling\r\n  stopPolling = () => {\r\n    if (this.pollingInterval) {\r\n      clearInterval(this.pollingInterval);\r\n      this.pollingInterval = null;\r\n    }\r\n    if (this.updateCountResetInterval) {\r\n      clearInterval(this.updateCountResetInterval);\r\n      this.updateCountResetInterval = null;\r\n    }\r\n    this.setState({ isPolling: false });\r\n  };\r\n\r\n  // WebSocket methods for real-time updates (disabled for now)\r\n  connectWebSocket = () => {\r\n    // WebSocket is disabled - using polling instead\r\n    // Uncomment and configure when WebSocket server is available\r\n    /*\r\n    try {\r\n      this.websocket = new WebSocket('wss://your-websocket-server.com');\r\n      \r\n      this.websocket.onopen = () => {\r\n        this.setState({ wsConnected: true, useWebSocket: true });\r\n      };\r\n      \r\n      this.websocket.onmessage = (event) => {\r\n        const message = JSON.parse(event.data);\r\n        if (message.type === 'graph_update') {\r\n          this.loadData(null, this.defaultQuery);\r\n        }\r\n      };\r\n      \r\n      this.websocket.onclose = () => {\r\n        this.setState({ wsConnected: false });\r\n        setTimeout(() => {\r\n          if (!this.state.isPolling) {\r\n            this.startPolling();\r\n          }\r\n        }, 5000);\r\n      };\r\n      \r\n      this.websocket.onerror = (error) => {\r\n        this.setState({ wsConnected: false });\r\n      };\r\n    } catch (error) {\r\n      this.startPolling();\r\n    }\r\n    */\r\n    \r\n    // Start polling directly since WebSocket is disabled\r\n    this.startPolling();\r\n  };\r\n\r\n  disconnectWebSocket = () => {\r\n    if (this.websocket) {\r\n      this.websocket.close();\r\n      this.websocket = null;\r\n    }\r\n    this.setState({ wsConnected: false, useWebSocket: false });\r\n  };\r\n\r\n  // Enhanced componentDidMount to start polling directly\r\n  componentDidMount() {\r\n    // Validate and clean the query state first\r\n    this.validateAndCleanQuery();\r\n    \r\n    this.loadData();\r\n    \r\n    // Start polling (WebSocket is disabled)\r\n    this.connectWebSocket();\r\n    \r\n    // Add visibility change listener to pause polling when tab is not active\r\n    this.handleVisibilityChange = () => {\r\n      // Tab visibility change handling\r\n    };\r\n    \r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n    \r\n    // Start idle detection\r\n    this.startIdleDetection();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Clean up both polling and WebSocket\r\n    this.stopPolling();\r\n    this.disconnectWebSocket();\r\n    \r\n    // Clear custom query timeout\r\n    if (this.state.customQueryTimeout) {\r\n      clearTimeout(this.state.customQueryTimeout);\r\n    }\r\n    \r\n    // Clear mutation reload timeout\r\n    if (this.mutationReloadTimeout) {\r\n      clearTimeout(this.mutationReloadTimeout);\r\n      this.mutationReloadTimeout = null;\r\n    }\r\n    \r\n    // Clear processing mutation state\r\n    this.setState({ processingMutation: false });\r\n    \r\n    // Clear polling focus timeout\r\n    if (this.pollingFocusTimeout) {\r\n      clearTimeout(this.pollingFocusTimeout);\r\n      this.pollingFocusTimeout = null;\r\n    }\r\n    \r\n    // Stop idle detection\r\n    this.stopIdleDetection();\r\n    \r\n    // Remove visibility change listener\r\n    if (this.handleVisibilityChange) {\r\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n    }\r\n  }\r\n\r\n  addNodeNFC = async (newUser, nfcUserName) => {\r\n    // Helper function to capitalize first letter of each word\r\n    const capitalizeWords = (str) => {\r\n      if (!str) return str;\r\n      return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\r\n    };\r\n\r\n    const capitalizedNewUser = capitalizeWords(newUser);\r\n\r\n    // Set NFC operation flag to prevent double reload\r\n    this.isNFCOperation = true;\r\n\r\n    // Clear any existing pending NFC node to prevent conflicts\r\n    if (this.pendingNFCNode) {\r\n      this.pendingNFCNode = null;\r\n    }\r\n\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    try {\r\n      await session.run(\r\n        `MERGE (u:User {name: $user}) \r\n         ON CREATE SET u.role = 'Affiliate', \r\n                       u.location = '', \r\n                       u.website = ''\r\n\r\n         MERGE (nfc:User {name: $nfcUser}) \r\n         ON CREATE SET nfc.role = 'Holder', \r\n                       nfc.location = '', \r\n                       nfc.website = ''\r\n\r\n         MERGE (awu:User {name: $awuUser}) \r\n\r\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \r\n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\r\n        { \r\n          user: capitalizedNewUser, \r\n          nfcUser: capitalizeWords(nfcUserName), \r\n          awuUser: \"Awu Chen\" \r\n        }\r\n        );\r\n      \r\n      // Store the new user name for focusing after mutation completes\r\n      this.pendingNFCNode = capitalizedNewUser;\r\n      \r\n      // Trigger a single loadData call to reload the graph with the new node\r\n      await this.loadData(capitalizedNewUser, this.defaultQuery);\r\n      \r\n      // Wait for the state to be updated, then focus\r\n      let checkCount = 0;\r\n      const waitForStateUpdate = () => {\r\n        const nodeExists = this.state.data.nodes.find(n => n.name === capitalizedNewUser);\r\n        checkCount++;\r\n        \r\n        if (nodeExists) {\r\n          this.focusOnNewNode(capitalizedNewUser, this.state.data);\r\n          this.pendingNFCNode = null;\r\n          this.isNFCOperation = false;\r\n        } else {\r\n          setTimeout(waitForStateUpdate, 500);\r\n        }\r\n      };\r\n      \r\n      // Start checking for state update after a short delay\r\n      setTimeout(waitForStateUpdate, 1000);\r\n      \r\n      // Old focusing logic removed - replaced with state-aware focusing above\r\n    } catch (error) {\r\n      console.error(\"Error adding user:\", error);\r\n    } finally {\r\n      session.close();\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    // Only update the query state if it's a valid Cypher query or empty\r\n    const newQuery = event.target.value;\r\n    \r\n    // Allow empty queries (for clearing)\r\n    if (!newQuery || newQuery.trim() === '') {\r\n      this.setState({ query: this.defaultQuery });\r\n      return;\r\n    }\r\n    \r\n    // Check if it starts with valid Cypher keywords\r\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\r\n    const queryStart = newQuery.trim().toUpperCase();\r\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\r\n    \r\n    if (isValidQuery) {\r\n      this.setState({ query: newQuery });\r\n    }\r\n  };\r\n\r\n  // Method to reset query to default\r\n  resetQuery = () => {\r\n    this.setState({ \r\n      query: this.defaultQuery,\r\n      customQueryActive: false,\r\n      customQueryTimeout: null,\r\n      processingMutation: false\r\n    });\r\n    \r\n    // Clear any existing timeout\r\n    if (this.state.customQueryTimeout) {\r\n      clearTimeout(this.state.customQueryTimeout);\r\n    }\r\n  };\r\n\r\n  // Method to validate and clean the current query state\r\n  validateAndCleanQuery = () => {\r\n    const currentQuery = this.state.query;\r\n    \r\n    // Check if current query is valid\r\n    if (!currentQuery || typeof currentQuery !== 'string' || currentQuery.trim() === '') {\r\n      this.setState({ query: this.defaultQuery });\r\n      return;\r\n    }\r\n    \r\n    // Check if it starts with valid Cypher keywords\r\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\r\n    const queryStart = currentQuery.trim().toUpperCase();\r\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\r\n    \r\n    if (!isValidQuery) {\r\n      this.setState({ query: this.defaultQuery });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div>\r\n      <Routes>\r\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\r\n      <Route path=\"/\" element={\r\n        <GraphView \r\n        data={this.state.data} \r\n        handleChange={this.handleChange} \r\n        loadData={this.loadData} \r\n        fgRef={this.fgRef} \r\n        latestNode={this.state.latestNode} \r\n        pollingFocusNode={this.state.pollingFocusNode}\r\n    driver={this.driver} // Pass the driver\r\n        processingMutation={this.state.processingMutation}\r\n        updateUserActivity={this.updateUserActivity}\r\n        isUserActive={this.state.isUserActive}\r\n    />\r\n  } />\r\n  </Routes>\r\n  \r\n\r\n  </div>\r\n  </Router>\r\n  );\r\n}\r\n}\r\n\r\nconst NFCTrigger = ({ addNode }) => {\r\n  const location = useLocation();\r\n  const { username } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    const addAndRedirect = async () => {\r\n      const newUser = `User-${Date.now()}`;\r\n      console.log(`NFC Trigger: Starting NFC operation for ${username} with new user ${newUser}`);\r\n\r\n      try {\r\n        await addNode(newUser, username); // pass dynamic user\r\n        console.log(`NFC Trigger: addNode completed successfully`);\r\n        } catch (error) {\r\n          console.error(\"NFC Trigger: Error adding user:\", error);\r\n          return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location.assign(\"/craft-network/#/\");\r\n          }, 2000);\r\n        };\r\n\r\n        addAndRedirect();\r\n        }, [location, username]);\r\n\r\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Adding you to {username}'s network...</div>\r\n      };\r\n\r\n              const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, pollingFocusNode, driver, processingMutation, updateUserActivity, isUserActive }) => {\r\n        const [inputValue, setInputValue] = useState(\"\"); \r\n        const [selectedNode, setSelectedNode] = useState(null);\r\n        const [editedNode, setEditedNode] = useState(null);\r\n        const [focusNode, setFocusNode] = useState(null);\r\n        const [clickedNode, setClickedNode] = useState(null);\r\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', 'latestNode', or 'mutation'\r\n        const [mutatedNodes, setMutatedNodes] = useState([]); // Track nodes created/modified by mutation queries\r\n\r\n        // Detect when latestNode changes (NFC addition) and set lastAction\r\n        useEffect(() => {\r\n          if (latestNode) {\r\n            setLastAction('latestNode');\r\n          }\r\n        }, [latestNode]);\r\n\r\n        // Initial zoom when graph first loads\r\n        useEffect(() => {\r\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\r\n            // Wait a bit for the graph to settle, then zoom to 2x\r\n            setTimeout(() => {\r\n              if (fgRef.current) {\r\n                fgRef.current.zoom(2, 1000);\r\n              }\r\n            }, 1000);\r\n          }\r\n        }, [data.nodes, fgRef, lastAction]);\r\n\r\n        // Compute 1-degree neighbors of latestNode\r\n        const getOneDegreeNodes = () => {\r\n          if (!latestNode || !data) return new Set();\r\n          const neighbors = new Set();\r\n          neighbors.add(latestNode);\r\n          data.links.forEach(link => {\r\n            if (link.source === latestNode) neighbors.add(link.target);\r\n            if (link.target === latestNode) neighbors.add(link.source);\r\n          });\r\n          return neighbors;\r\n        };\r\n        const oneDegreeNodes = getOneDegreeNodes();\r\n\r\n        // Compute N-degree neighbors of latestNode\r\n        const visibleDegree = 1; // Change this value to adjust visible degree\r\n        const getNDegreeNodes = (startNode, degree) => {\r\n          if (!startNode || !data) return new Set();\r\n          const visited = new Set();\r\n          let currentLevel = new Set([startNode]);\r\n          for (let d = 0; d < degree; d++) {\r\n            const nextLevel = new Set();\r\n            data.links.forEach(link => {\r\n              // Normalize source/target to node names if they are objects\r\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\r\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\r\n              currentLevel.forEach(n => {\r\n                if (n === sourceName && !visited.has(targetName)) {\r\n                  nextLevel.add(targetName);\r\n                }\r\n                if (n === targetName && !visited.has(sourceName)) {\r\n                  nextLevel.add(sourceName);\r\n                }\r\n              });\r\n            });\r\n            nextLevel.forEach(n => visited.add(n));\r\n            currentLevel.forEach(n => visited.add(n));\r\n            currentLevel = nextLevel;\r\n          }\r\n          visited.add(startNode);\r\n          return visited;\r\n        };\r\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\r\n        const visibilityFocus = focusNode || clickedNode || latestNode;\r\n        // For zoom: use the most recent action\r\n        const zoomFocus = lastAction === 'search' ? 'search' : \r\n                         lastAction === 'click' ? clickedNode : \r\n                         lastAction === 'latestNode' ? latestNode :\r\n                         lastAction === 'mutation' ? mutatedNodes[0] : null;\r\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\r\n        \r\n        // Always include search results in visibility if there's a search term\r\n        if (inputValue && inputValue.trim()) {\r\n          const searchMatches = data.nodes.filter(node => \r\n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n            (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\r\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\r\n          );\r\n          searchMatches.forEach(match => {\r\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\r\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\r\n          });\r\n        }\r\n        \r\n        // Always include mutated nodes in visibility if there was a mutation\r\n        if (lastAction === 'mutation' && mutatedNodes.length > 0) {\r\n          mutatedNodes.forEach(nodeName => {\r\n            const nodeNeighbors = getNDegreeNodes(nodeName, 0); // Always use 0 degree for mutations\r\n            nodeNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\r\n          });\r\n        }\r\n        \r\n        const zoomNodes = lastAction === 'search' ? \r\n                         (() => {\r\n                           const searchMatches = data.nodes.filter(node => \r\n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n                             (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\r\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\r\n                           );\r\n                           const searchNodes = new Set();\r\n                           searchMatches.forEach(match => {\r\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\r\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\r\n                           });\r\n                           return searchNodes;\r\n                         })() : \r\n                         lastAction === 'mutation' ?\r\n                         (() => {\r\n                           const mutationNodes = new Set();\r\n                           mutatedNodes.forEach(nodeName => {\r\n                             const nodeNeighbors = getNDegreeNodes(nodeName, 1); // Always use 1 degree for mutations\r\n                             nodeNeighbors.forEach(neighbor => mutationNodes.add(neighbor));\r\n                           });\r\n                           return mutationNodes;\r\n                         })() :\r\n                         getNDegreeNodes(zoomFocus, visibleDegree);\r\n        \r\n        // Auto-zoom to visible nodes\r\n        useEffect(() => {\r\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\r\n          // Don't auto-zoom for latestNode unless there's no other focus\r\n          if (fgRef.current && zoomNodes.size > 0) {\r\n            // Zoom based on last action\r\n            if (lastAction === 'click' && clickedNode) {\r\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\r\n              if (visibleNodes.length > 0) {\r\n                // Calculate bounding box of visible nodes\r\n                const xs = visibleNodes.map(n => n.x);\r\n                const ys = visibleNodes.map(n => n.y);\r\n                const minX = Math.min(...xs);\r\n                const maxX = Math.max(...xs);\r\n                const minY = Math.min(...ys);\r\n                const maxY = Math.max(...ys);\r\n                \r\n                const centerX = (minX + maxX) / 2;\r\n                const centerY = (minY + maxY) / 2;\r\n                const width = maxX - minX;\r\n                const height = maxY - minY;\r\n                \r\n                // Add some padding\r\n                const padding = 100;\r\n                const scale = Math.min(\r\n                  (window.innerWidth - padding) / width,\r\n                  (window.innerHeight - padding) / height,\r\n                  2 // Max zoom level\r\n                );\r\n                \r\n                fgRef.current.centerAt(centerX, centerY, 1000);\r\n                fgRef.current.zoom(scale, 1000);\r\n              }\r\n            }\r\n            // For search results (only if no node is clicked)\r\n            else if (lastAction === 'search' && inputValue) {\r\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\r\n              if (visibleNodes.length > 0) {\r\n                // Calculate bounding box of visible nodes\r\n                const xs = visibleNodes.map(n => n.x);\r\n                const ys = visibleNodes.map(n => n.y);\r\n                const minX = Math.min(...xs);\r\n                const maxX = Math.max(...xs);\r\n                const minY = Math.min(...ys);\r\n                const maxY = Math.max(...ys);\r\n                \r\n                const centerX = (minX + maxX) / 2;\r\n                const centerY = (minY + maxY) / 2;\r\n                const width = maxX - minX;\r\n                const height = maxY - minY;\r\n                \r\n                // Add some padding\r\n                const padding = 100;\r\n                const scale = Math.min(\r\n                  (window.innerWidth - padding) / width,\r\n                  (window.innerHeight - padding) / height,\r\n                  2 // Max zoom level\r\n                );\r\n                \r\n                fgRef.current.centerAt(centerX, centerY, 1000);\r\n                fgRef.current.zoom(scale, 1000);\r\n              }\r\n            }\r\n            // For latestNode, delay the zoom to allow graph to stabilize\r\n            else if (lastAction === 'latestNode' && latestNode) {\r\n              setTimeout(() => {\r\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\r\n                if (visibleNodes.length > 0 && fgRef.current) {\r\n                  // Calculate bounding box of visible nodes\r\n                  const xs = visibleNodes.map(n => n.x);\r\n                  const ys = visibleNodes.map(n => n.y);\r\n                  const minX = Math.min(...xs);\r\n                  const maxX = Math.max(...xs);\r\n                  const minY = Math.min(...ys);\r\n                  const maxY = Math.max(...ys);\r\n                  \r\n                  const centerX = (minX + maxX) / 2;\r\n                  const centerY = (minY + maxY) / 2;\r\n                  const width = maxX - minX;\r\n                  const height = maxY - minY;\r\n                  \r\n                  // Add some padding\r\n                  const padding = 100;\r\n                  const scale = Math.min(\r\n                    (window.innerWidth - padding) / width,\r\n                    (window.innerHeight - padding) / height,\r\n                    2 // Max zoom level\r\n                  );\r\n                  \r\n                  fgRef.current.centerAt(centerX, centerY, 1000);\r\n                  fgRef.current.zoom(scale, 1000);\r\n                }\r\n              }, 1000); // 1 second delay for latestNode\r\n            }\r\n            // For mutation queries, zoom to the mutated nodes\r\n            else if (lastAction === 'mutation' && mutatedNodes.length > 0) {\r\n              setTimeout(() => {\r\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\r\n                if (visibleNodes.length > 0 && fgRef.current) {\r\n                  // Calculate bounding box of visible nodes\r\n                  const xs = visibleNodes.map(n => n.x);\r\n                  const ys = visibleNodes.map(n => n.y);\r\n                  const minX = Math.min(...xs);\r\n                  const maxX = Math.max(...xs);\r\n                  const minY = Math.min(...ys);\r\n                  const maxY = Math.max(...ys);\r\n                  \r\n                  const centerX = (minX + maxX) / 2;\r\n                  const centerY = (minY + maxY) / 2;\r\n                  const width = maxX - minX;\r\n                  const height = maxY - minY;\r\n                  \r\n                  // Add some padding\r\n                  const padding = 100;\r\n                  const scale = Math.min(\r\n                    (window.innerWidth - padding) / width,\r\n                    (window.innerHeight - padding) / height,\r\n                    2 // Max zoom level\r\n                  );\r\n                  \r\n                  fgRef.current.centerAt(centerX, centerY, 1000);\r\n                  fgRef.current.zoom(scale, 1000);\r\n                }\r\n              }, 1000); // 1 second delay for mutation\r\n            }\r\n          }\r\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue, mutatedNodes]);\r\n\r\n        const handleInputChange = (event) => {\r\n          const input = event.target.value;\r\n          setInputValue(input);\r\n          handleChange(event); // updates CypherViz state.query too\r\n          \r\n          // Update user activity when typing\r\n          updateUserActivity();\r\n          \r\n          // Clear other actions when searching\r\n          if (input.trim()) {\r\n            setClickedNode(null);\r\n            setLastAction('search');\r\n          }\r\n        };\r\n\r\n        const handleSubmit = async (e) => {\r\n          e.preventDefault();\r\n\r\n          try {\r\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({ question: inputValue })\r\n            });\r\n\r\n            const data = await response.json();\r\n            const generatedQuery = data.text || data.query || \"\";\r\n\r\n            setInputValue(generatedQuery);\r\n            handleChange({ target: { value: generatedQuery } });\r\n\r\n            await loadData(null, generatedQuery);\r\n\r\n            // Check if the generated query is a mutation query (updates the graph)\r\n            const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(generatedQuery.trim());\r\n            \r\n            // If it's a mutation query, immediately return to default state\r\n            if (isMutationQuery) {\r\n              \r\n              // Extract node names from the mutation query to track what was created/modified\r\n              let extractedNodes = [];\r\n              \r\n              // Handle different mutation query patterns\r\n              if (generatedQuery.includes('DELETE')) {\r\n                // For DELETE queries, extract from patterns like DELETE (u:User {name: \"John\"}) or MATCH (u:User {name: \"John\"}) DELETE u\r\n                const deleteMatches = generatedQuery.match(/\\{name:\\s*['\"]([^'\"]+)['\"]\\}/g);\r\n                if (deleteMatches) {\r\n                  extractedNodes = deleteMatches.map(match => {\r\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\r\n                    return nameMatch ? nameMatch[1] : null;\r\n                  }).filter(Boolean);\r\n                }\r\n              } else if (generatedQuery.includes('SET')) {\r\n                // For SET queries, extract from MATCH clause like MATCH (u:User {name: \"John\"}) SET u.role = 'admin'\r\n                const matchClause = generatedQuery.match(/MATCH\\s*\\([^)]*\\{name:\\s*['\"]([^'\"]+)['\"][^}]*\\}\\)/i);\r\n                if (matchClause) {\r\n                  extractedNodes = [matchClause[1]];\r\n                }\r\n              } else {\r\n                // For CREATE/MERGE queries, extract from {name: \"nodeName\"} patterns\r\n                const nodeMatches = generatedQuery.match(/\\{([^}]+)\\}/g);\r\n                extractedNodes = nodeMatches ? \r\n                  nodeMatches.map(match => {\r\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\r\n                    return nameMatch ? nameMatch[1] : null;\r\n                  }).filter(Boolean) : [];\r\n              }\r\n              \r\n              setMutatedNodes(extractedNodes);\r\n              setLastAction('mutation');\r\n              \r\n              // Immediately return to default query without any delay\r\n              const defaultQuery = `\r\n                MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\r\n                RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \r\n                       v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite\r\n              `;\r\n              await loadData(null, defaultQuery);\r\n            }\r\n            \r\n            // Clear the input after 3 seconds\r\n            setTimeout(() => {\r\n              setInputValue(\"\");\r\n            }, 3000);\r\n            \r\n            } catch (error) {\r\n              console.error(\"Flowise call failed:\", error);\r\n            }\r\n        };\r\n\r\n        const handleNodeClick = (node) => {\r\n          if (!node) return;\r\n          setSelectedNode(node);\r\n          setEditedNode({ ...node });\r\n          setFocusNode(node.name);\r\n          setClickedNode(node.name);\r\n          setLastAction('click');\r\n          \r\n          // Update user activity when clicking nodes\r\n          updateUserActivity();\r\n          \r\n          // Clear search when clicking a node to avoid zoom conflicts\r\n          setInputValue(\"\");\r\n        };\r\n\r\n        const handleNodeHover = (node) => {\r\n          if (node) {\r\n            setFocusNode(node.name);\r\n          } else {\r\n            setFocusNode(null);\r\n          }\r\n        };\r\n\r\n        const handleEditChange = (event) => {\r\n          const { name, value } = event.target;\r\n          setEditedNode((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n          }));\r\n        };\r\n\r\n        const saveNodeChanges = async () => {\r\n          if (!editedNode || !selectedNode) return;\r\n\r\n          // Helper function to capitalize first letter of each word\r\n          const capitalizeWords = (str) => {\r\n            if (!str) return str;\r\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\r\n          };\r\n\r\n          // Ensure the website has \"https://\" if missing\r\n          let formattedWebsite = editedNode.website.trim();\r\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\r\n            formattedWebsite = \"https://\" + formattedWebsite;\r\n          }\r\n\r\n          const session = driver.session();\r\n          try {\r\n            await session.run(\r\n              `MATCH (u:User {name: $oldName}) \r\n              SET u.name = $newName, u.role = $role, u.location = $location, u.website = $website`,\r\n              {\r\n                oldName: selectedNode.name,\r\n                newName: capitalizeWords(editedNode.name),\r\n                role: capitalizeWords(editedNode.role),\r\n                location: capitalizeWords(editedNode.location),\r\n                website: formattedWebsite, // Use the corrected website\r\n              }\r\n            );\r\n            await loadData(editedNode.name); // Keep the edited node as latestNode\r\n            setSelectedNode(null); // Close the panel\r\n          } catch (error) {\r\n            console.error(\"Error updating node:\", error);\r\n          } finally {\r\n            session.close();\r\n          }\r\n        };\r\n\r\n\r\nreturn (\r\n    <div width=\"95%\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Show me all the artist in Kyoto...\"\r\n        style={{ display: \"block\", width: \"95%\", height: \"40px\", margin: \"0 auto\", textAlign: \"center\", padding: \"8px\", border: \"1px solid #ccc\", borderRadius: \"4px\" }}\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        onKeyPress={(e) => {\r\n          if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handleSubmit(e);\r\n          }\r\n        }}\r\n      />\r\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\r\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\r\n      \r\n\r\n      \r\n      {/* Mutation processing indicator */}\r\n      {processingMutation && (\r\n        <div style={{\r\n          position: \"fixed\",\r\n          top: \"60px\",\r\n          right: \"10px\",\r\n          padding: \"8px 12px\",\r\n          backgroundColor: \"#9C27B0\",\r\n          color: \"white\",\r\n          borderRadius: \"4px\",\r\n          fontSize: \"12px\",\r\n          zIndex: 1000,\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          gap: \"8px\"\r\n        }}>\r\n          <div style={{\r\n            width: \"8px\",\r\n            height: \"8px\",\r\n            borderRadius: \"50%\",\r\n            backgroundColor: \"#fff\",\r\n            animation: \"pulse 0.5s infinite\"\r\n          }}></div>\r\n          Processing Mutation...\r\n        </div>\r\n      )}\r\n      \r\n\r\n      \r\n      <style>{`\r\n        @keyframes pulse {\r\n          0% { opacity: 1; }\r\n          50% { opacity: 0.5; }\r\n          100% { opacity: 1; }\r\n        }\r\n      `}</style>\r\n\r\n  <ForceGraph2D\r\n  ref={fgRef}\r\n  graphData={data}\r\n  nodeId=\"name\"\r\n  nodeLabel={(node) => node.location || \"No Location\"}\r\n  onNodeClick={handleNodeClick}\r\n  onNodeHover={handleNodeHover}\r\n  onBackgroundClick={() => {\r\n    setFocusNode(null);\r\n    setClickedNode(null);\r\n    setLastAction(null);\r\n    setMutatedNodes([]);\r\n  }}\r\n  nodeCanvasObject={(node, ctx) => {\r\n    const isHighlighted =\r\n      inputValue &&\r\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n        (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\r\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())));\r\n    const isNDegree = visibilityNodes.has(node.name);\r\n\r\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\r\n    // Use latestNode for editing (black), pollingFocusNode for viewing (blue), or white for normal\r\n    let fillColor = \"white\";\r\n    if (node.name === latestNode) {\r\n      fillColor = \"black\"; // Editable node\r\n    } else if (node.name === pollingFocusNode) {\r\n      fillColor = \"green\"; // Non-editable polling focus\r\n    }\r\n    ctx.fillStyle = fillColor;\r\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\r\n    ctx.lineWidth = isHighlighted ? 3 : 2;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    ctx.fillStyle = \"gray\";\r\n    ctx.fillText(node.role, node.x + 10, node.y);\r\n\r\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\r\n  }}\r\n  linkColor={(link) => {\r\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\r\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\r\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\r\n    return isConnected ? '#999' : '#ccc';\r\n  }}\r\n  linkOpacity={(link) => {\r\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\r\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\r\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\r\n    return isConnected ? 1.0 : 0.15;\r\n  }}\r\n  linkCurvature={0.2}\r\n  linkDirectionalArrowRelPos={1}\r\n  linkDirectionalArrowLength={5}\r\n  />\r\n\r\n  {selectedNode && editedNode && (\r\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\r\n    {selectedNode.name === latestNode ? (\r\n      <>\r\n      <h3>Edit Network Info</h3>\r\n      <p><strong>Name:</strong>\r\n      <input \r\n      name=\"name\" \r\n      value={editedNode.name} \r\n      placeholder=\"Enter name\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \r\n      /></p>\r\n\r\n      <p><strong>Role:</strong>\r\n      <input \r\n      name=\"role\" \r\n      value={editedNode.role} \r\n      placeholder=\"Enter role\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \r\n      /></p>\r\n\r\n      <p><strong>Location:</strong>\r\n      <input \r\n      name=\"location\" \r\n      value={editedNode.location} \r\n      placeholder=\"Enter location\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter location\"} \r\n      /></p>\r\n\r\n      <p><strong>Website:</strong>\r\n      <input \r\n      name=\"website\" \r\n      value={editedNode.website} \r\n      placeholder=\"Enter website\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \r\n      /></p>\r\n\r\n      <p><button onClick={saveNodeChanges}>Save</button></p>\r\n      </>\r\n      ) : (\r\n      <>\r\n      <h3>Network Info</h3>\r\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\r\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\r\n      <p><strong>Location:</strong> {selectedNode?.location}</p>\r\n      <p><strong>Website:</strong>{\" \"}\r\n      {selectedNode.website && selectedNode.website !== \"\" ? (\r\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {selectedNode.website.length > 30 \r\n          ? `${selectedNode.website.substring(0, 30)}...`\r\n        : selectedNode.website}\r\n        </a>\r\n        ) : (\r\n        \"\"\r\n      )}</p>\r\n      </>\r\n    )}\r\n    <button onClick={() => setSelectedNode(null)}>Close</button>\r\n    </div>\r\n  )}\r\n  </div>\r\n  );\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    export default CypherViz;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}