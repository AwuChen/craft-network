{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","queryOverride","session","database","run","state","query","res","close","nodesMap","Map","links","records","map","r","source","get","target","has","set","name","role","title","website","x","Math","random","y","nodes","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","setState","data","latestNode","setTimeout","newNode","find","n","fgRef","current","console","log","centerAt","zoom","addNodeNFC","newUser","user","nfcUser","awuUser","error","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","location","useLocation","useEffect","Date","now","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","handleSubmit","e","preventDefault","fetch","method","headers","body","prompt","response","json","generatedQuery","trim","alert","zoomToFit","handleEditChange","prev","saveNodeChanges","formattedWebsite","startsWith","oldName","newName","width","onSubmit","placeholder","display","height","margin","onChange","input","type","id","onClick","open","ref","graphData","nodeId","nodeLabel","node","onNodeClick","nodeCanvasObject","ctx","isHighlighted","toLowerCase","includes","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","position","top","left","transform","backgroundColor","border","boxShadow","zIndex","onFocus","onBlur","href","rel","length","substring","App","className","Boolean","hostname","match","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.80c3b1ab.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { HashRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\r\nimport './App.css';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nclass CypherViz extends React.Component {\r\n  constructor({ driver }) {\r\n    super();\r\n    this.driver = driver;\r\n    this.fgRef = React.createRef();\r\n    \r\n    this.defaultData = {\r\n      nodes: [],\r\n      links: []\r\n    };\r\n    \r\n    this.state = {\r\n      data: this.defaultData,\r\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \r\n          RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \r\n      v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite`,\r\n      latestNode: null\r\n    };\r\n\r\n  }\r\n\r\n  loadData = async (newNodeName = null, queryOverride = null) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    let res = await session.run(queryOverride || this.state.query);\r\n    session.close();\r\n\r\n    let nodesMap = new Map();\r\n    let links = res.records.map(r => {\r\n      let source = r.get(\"source\");\r\n      let target = r.get(\"target\");\r\n\r\n    // Add or update source node\r\n      if (!nodesMap.has(source)) {\r\n        nodesMap.set(source, {\r\n          name: source,\r\n          role: r.get(\"sourceRole\"),\r\n          title: r.get(\"sourceTitle\"),\r\n          website: r.get(\"sourceWebsite\"),\r\n          x: Math.random() * 500,\r\n          y: Math.random() * 500\r\n        });\r\n      }\r\n\r\n    // Add or update target node\r\n      if (!nodesMap.has(target)) {\r\n        nodesMap.set(target, {\r\n          name: target,\r\n          role: r.get(\"targetRole\"),\r\n          title: r.get(\"targetTitle\"),\r\n          website: r.get(\"targetWebsite\"),\r\n          x: Math.random() * 500,\r\n          y: Math.random() * 500\r\n        });\r\n      }\r\n\r\n      return { source, target };\r\n    });\r\n\r\n    const nodes = Array.from(nodesMap.values());\r\n    const updatedData = { nodes, links };\r\n\r\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\r\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\r\n      if (newNodeName) {\r\n        setTimeout(() => {\r\n          let newNode = nodes.find(n => n.name === newNodeName);\r\n          if (newNode && this.fgRef.current) {\r\n            console.log(\"Focusing on:\", newNode);\r\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\r\n            this.fgRef.current.zoom(1.25);\r\n          }\r\n        }, 2000);\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  addNodeNFC = async (newUser) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    try {\r\n      await session.run(\r\n        `MERGE (u:User {name: $user}) \r\n         ON CREATE SET u.role = 'attendee', \r\n                       u.title = '', \r\n                       u.website = ''\r\n\r\n         MERGE (nfc:User {name: $nfcUser}) \r\n         ON CREATE SET nfc.role = 'CHI 2025', \r\n                       nfc.title = 'Conference on Human Factors in Computing Systems', \r\n                       nfc.website = 'https://chi2025.acm.org/'\r\n\r\n         MERGE (awu:User {name: $awuUser}) \r\n\r\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \r\n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\r\n        { \r\n          user: newUser, \r\n          nfcUser: \"CHI\", \r\n          awuUser: \"Awu Chen\" \r\n        }\r\n        );\r\n      await this.loadData(newUser);\r\n    } catch (error) {\r\n      console.error(\"Error adding user:\", error);\r\n    } finally {\r\n      session.close();\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ query: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div>\r\n      <Routes>\r\n      <Route path=\"/NFC\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\r\n      <Route path=\"/\" element={\r\n        <GraphView \r\n        data={this.state.data} \r\n        handleChange={this.handleChange} \r\n        loadData={this.loadData} \r\n        fgRef={this.fgRef} \r\n        latestNode={this.state.latestNode} \r\n    driver={this.driver} // Pass the driver\r\n    />\r\n  } />\r\n  </Routes>\r\n  </div>\r\n  </Router>\r\n  );\r\n}\r\n}\r\n\r\nconst NFCTrigger = ({ addNode }) => {\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    const addAndRedirect = async () => {\r\n      const newUser = `User-${Date.now()}`;\r\n\r\n      try {\r\n        await addNode(newUser);\r\n        } catch (error) {\r\n          console.error(\"Error adding user:\", error);\r\n          return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location.assign(\"/craft-network/#/\");\r\n          }, 1000);\r\n        };\r\n\r\n        addAndRedirect();\r\n        }, [location]);\r\n\r\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap...</div>;\r\n      };\r\n\r\n      const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver }) => {\r\n        const [inputValue, setInputValue] = useState(\"\"); // input text\r\n        const [selectedNode, setSelectedNode] = useState(null);\r\n        const [editedNode, setEditedNode] = useState(null);\r\n\r\n        const handleInputChange = (event) => {\r\n          const input = event.target.value;\r\n          setInputValue(input);\r\n          handleChange(event); // updates CypherViz state.query too\r\n        };\r\n\r\n        const handleSubmit = async (e) => {\r\n          e.preventDefault();\r\n\r\n          try {\r\n            const response = await fetch('/api/flowise', {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify({ prompt: inputValue })\r\n            });\r\n\r\n            const data = await response.json();\r\n            const generatedQuery = data.query?.trim();\r\n\r\n            if (!generatedQuery) {\r\n              alert(\"Flowise did not return a query.\");\r\n              return;\r\n            }\r\n\r\n            // Update the input field and state with the generated Cypher query\r\n            setInputValue(generatedQuery);\r\n            handleChange({ target: { value: generatedQuery } });\r\n\r\n            // Load and display the graph\r\n            await loadData(null, generatedQuery);\r\n\r\n            // Soft reset the graph view\r\n            if (fgRef.current) {\r\n              fgRef.current.zoomToFit(400); // duration in ms\r\n              fgRef.current.centerAt(0, 0, 400); // optional: re-center\r\n            }\r\n\r\n          } catch (error) {\r\n            console.error(\"Error handling user prompt:\", error);\r\n            alert(\"An error occurred while processing your request.\");\r\n          }\r\n        };\r\n\r\n        const handleNodeClick = (node) => {\r\n          if (!node) return; // Prevent errors if node is null\r\n          setSelectedNode(node);\r\n          setEditedNode({ ...node }); // Clone the selected node for editing\r\n        };\r\n\r\n        const handleEditChange = (event) => {\r\n          const { name, value } = event.target;\r\n          setEditedNode((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n          }));\r\n        };\r\n\r\n        const saveNodeChanges = async () => {\r\n          if (!editedNode || !selectedNode) return;\r\n\r\n          // Ensure the website has \"https://\" if missing\r\n          let formattedWebsite = editedNode.website.trim();\r\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\r\n            formattedWebsite = \"https://\" + formattedWebsite;\r\n          }\r\n\r\n          const session = driver.session();\r\n          try {\r\n            await session.run(\r\n              `MATCH (u:User {name: $oldName}) \r\n              SET u.name = $newName, u.role = $role, u.title = $title, u.website = $website`,\r\n              {\r\n                oldName: selectedNode.name,\r\n                newName: editedNode.name,\r\n                role: editedNode.role,\r\n                title: editedNode.title,\r\n                website: formattedWebsite, // Use the corrected website\r\n              }\r\n            );\r\n            await loadData(editedNode.name); // Keep the edited node as latestNode\r\n            setTimeout(() => setSelectedNode(null), 100); // Close the panel after a brief delay\r\n          } catch (error) {\r\n            console.error(\"Error updating node:\", error);\r\n          } finally {\r\n            session.close();\r\n          }\r\n        };\r\n\r\n\r\nreturn (\r\n    <div width=\"95%\">\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          placeholder=\"Enter natural language query, search for nodes...\"\r\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button type=\"submit\">Run</button>\r\n      </form>\r\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\r\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\r\n\r\n  <ForceGraph2D\r\n  ref={fgRef}\r\n  graphData={data}\r\n  nodeId=\"name\"\r\n  nodeLabel={(node) => node.title || \"No Title\"}\r\n  onNodeClick={handleNodeClick}\r\n  nodeCanvasObject={(node, ctx) => {\r\n    const isHighlighted =\r\n    inputValue &&\r\n    (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n    (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())));\r\n\r\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\"; // Keep latestNode in black\r\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\r\n    ctx.lineWidth = isHighlighted ? 3 : 2;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    ctx.fillStyle = \"gray\";\r\n    ctx.fillText(node.role, node.x + 10, node.y);\r\n  }}\r\n  linkCurvature={0.2}\r\n  linkDirectionalArrowRelPos={1}\r\n  linkDirectionalArrowLength={5}\r\n  />\r\n\r\n  {selectedNode && editedNode && (\r\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\r\n    {selectedNode.name === latestNode ? (\r\n      <>\r\n      <h3>Edit Network Info</h3>\r\n      <p><strong>Name:</strong>\r\n      <input \r\n      name=\"name\" \r\n      value={editedNode.name} \r\n      placeholder=\"Enter name\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \r\n      /></p>\r\n\r\n      <p><strong>Title:</strong>\r\n      <input \r\n      name=\"title\" \r\n      value={editedNode.title} \r\n      placeholder=\"Enter title\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter title\"} \r\n      /></p>\r\n\r\n      <p><strong>Role:</strong>\r\n      <input \r\n      name=\"role\" \r\n      value={editedNode.role} \r\n      placeholder=\"Enter role\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \r\n      /></p>\r\n\r\n      <p><strong>Website:</strong>\r\n      <input \r\n      name=\"website\" \r\n      value={editedNode.website} \r\n      placeholder=\"Enter website\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \r\n      /></p>\r\n\r\n      <p><button onClick={saveNodeChanges}>Save</button></p>\r\n      </>\r\n      ) : (\r\n      <>\r\n      <h3>Network Info</h3>\r\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\r\n      <p><strong>Title:</strong> {selectedNode?.title}</p>\r\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\r\n      <p><strong>Website:</strong>{\" \"}\r\n      {selectedNode.website && selectedNode.website !== \"\" ? (\r\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {selectedNode.website.length > 30 \r\n          ? `${selectedNode.website.substring(0, 30)}...`\r\n        : selectedNode.website}\r\n        </a>\r\n        ) : (\r\n        \"\"\r\n      )}</p>\r\n      </>\r\n    )}\r\n    <button onClick={() => setSelectedNode(null)}>Close</button>\r\n    </div>\r\n  )}\r\n  </div>\r\n  );\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    export default CypherViz;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}