{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","updateUserActivity","now","Date","setState","lastUserActivity","isUserActive","idleTimeout","clearTimeout","setTimeout","checkIdleAndReturnToDefault","state","processingMutation","customQueryActive","customQueryTimeout","loadData","defaultQuery","startIdleDetection","forEach","event","document","addEventListener","idleCheckInterval","setInterval","stopIdleDetection","removeEventListener","clearInterval","a","newNodeName","queryOverride","session","database","isCustomQuery","queryToExecute","query","isMutationQuery","test","trim","console","error","validStartKeywords","queryStart","toUpperCase","some","keyword","startsWith","run","res","mutationReloadTimeout","pendingNFCNode","focusOnNewNode","data","nodes","links","close","nodesMap","Map","records","record","has","get","source","target","set","name","role","location","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","u_name","u_role","u_location","u_website","includes","replace","Array","from","values","updatedData","currentDataHash","calculateDataHash","hasChanged","lastDataHash","hasDetailedChange","hasDataChanged","isDataIdentical","JSON","stringify","localStorage","setItem","timeSinceLastUpdate","lastUpdateTime","updateDebounceTime","updateCount","maxUpdatesPerCycle","latestNode","nodeName","graphData","attemptFocus","attempt","log","newNode","find","n","fgRef","current","centerAt","zoom","nodesStr","map","sort","join","linksStr","l","newData","oldData","length","oldNodesMap","oldNode","oldLinksSet","Set","newLink","startPolling","pollingInterval","isPolling","hidden","updateCountResetInterval","stopPolling","connectWebSocket","websocket","WebSocket","onopen","wsConnected","useWebSocket","onmessage","parse","type","onclose","onerror","disconnectWebSocket","addNodeNFC","newUser","nfcUserName","capitalizeWords","str","split","word","charAt","slice","toLowerCase","user","nfcUser","awuUser","handleChange","newQuery","value","resetQuery","validateAndCleanQuery","currentQuery","React","createRef","defaultData","this","handleVisibilityChange","path","element","addNode","Component","NFCTrigger","useLocation","username","useParams","useEffect","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","mutatedNodes","setMutatedNodes","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","visibilityFocus","zoomFocus","visibilityNodes","filter","match","neighbor","zoomNodes","searchMatches","searchNodes","mutationNodes","size","visibleNodes","xs","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","extractedNodes","deleteMatches","nameMatch","Boolean","matchClause","nodeMatches","handleEditChange","prev","saveNodeChanges","formattedWebsite","oldName","newName","onSubmit","placeholder","display","margin","onChange","input","id","onClick","open","position","top","right","backgroundColor","borderRadius","zIndex","alignItems","gap","animation","ref","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkColor","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","left","transform","border","boxShadow","onFocus","onBlur","href","rel","substring","App","className","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c7bfd889.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\n      latestNode: null,\n      lastUpdateTime: null,\n      isPolling: false,\n      useWebSocket: false,\n      wsConnected: false,\n      customQueryActive: false,\n      customQueryTimeout: null,\n      processingMutation: false,\n      lastUserActivity: Date.now(),\n      isUserActive: true\n    };\n\n    // Store the default query for polling (separate from user input)\n    this.defaultQuery = `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n        RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n        v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`;\n\n    // Store the last known data hash for change detection\n    this.lastDataHash = null;\n    this.pollingInterval = null;\n    this.websocket = null;\n    this.lastUpdateTime = 0;\n    this.updateDebounceTime = 2000; // 2 seconds debounce\n    this.updateCount = 0;\n    this.maxUpdatesPerCycle = 3; // Prevent infinite loops\n    this.mutationReloadTimeout = null;\n    this.idleTimeout = null;\n    this.idleCheckInterval = null;\n  }\n\n  // Update user activity timestamp\n  updateUserActivity = () => {\n    const now = Date.now();\n    this.setState({ \n      lastUserActivity: now,\n      isUserActive: true \n    });\n    \n    // Clear existing idle timeout\n    if (this.idleTimeout) {\n      clearTimeout(this.idleTimeout);\n    }\n    \n    // Set new idle timeout (5 seconds of inactivity)\n    this.idleTimeout = setTimeout(() => {\n      this.setState({ isUserActive: false });\n    }, 5000); // 5 seconds of inactivity\n  };\n\n  // Check if user is idle and should return to default query\n  checkIdleAndReturnToDefault = () => {\n    // Don't interfere if a mutation is being processed\n    if (this.state.processingMutation) {\n      return;\n    }\n    \n    if (this.state.customQueryActive && !this.state.isUserActive) {\n      this.setState({ \n        customQueryActive: false, \n        customQueryTimeout: null \n      });\n      \n      // Clear any existing timeout\n      if (this.state.customQueryTimeout) {\n        clearTimeout(this.state.customQueryTimeout);\n      }\n      \n      // Reload with default query\n      this.loadData(null, this.defaultQuery);\n    }\n  };\n\n  // Start idle detection system\n  startIdleDetection = () => {\n    // Set up activity listeners\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    activityEvents.forEach(event => {\n      document.addEventListener(event, this.updateUserActivity, true);\n    });\n    \n    // Check for idle state every 2 seconds\n    this.idleCheckInterval = setInterval(() => {\n      this.checkIdleAndReturnToDefault();\n    }, 2000);\n    \n    // Initial activity update\n    this.updateUserActivity();\n  };\n\n  // Stop idle detection\n  stopIdleDetection = () => {\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    activityEvents.forEach(event => {\n      document.removeEventListener(event, this.updateUserActivity, true);\n    });\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.idleTimeout) {\n      clearTimeout(this.idleTimeout);\n      this.idleTimeout = null;\n    }\n  };\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    \n    // Determine which query to use\n    let queryToExecute = queryOverride;\n    let isCustomQuery = false;\n    \n    if (!queryToExecute) {\n      // For polling, use default query unless a custom query is active\n      if (newNodeName === null && !queryOverride && !this.state.customQueryActive) {\n        queryToExecute = this.defaultQuery;\n      } else {\n        // For user-initiated queries, use state.query but validate it\n        queryToExecute = this.state.query;\n        isCustomQuery = true;\n      }\n    } else if (queryOverride !== this.defaultQuery) {\n      // If a custom query is being executed\n      isCustomQuery = true;\n    }\n    \n    // Check if this is a mutation query BEFORE determining if it's custom\n    const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(queryToExecute.trim());\n    \n    // If it's a mutation query, it should never be treated as a custom query\n    if (isMutationQuery) {\n      isCustomQuery = false;\n    }\n    \n    // Validate the query\n    if (!queryToExecute || typeof queryToExecute !== 'string' || queryToExecute.trim() === '') {\n      console.error(\"Invalid query:\", queryToExecute);\n      return;\n    }\n    \n    // Check if query starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = queryToExecute.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      return;\n    }\n    \n    try {\n      res = await session.run(queryToExecute);\n      \n      // Handle mutations for ALL queries (not just custom ones)\n      if (isMutationQuery) {\n        // For mutation queries, immediately return to default query\n        \n        // Force return to default state regardless of idle detection\n        this.setState({ \n          customQueryActive: false, \n          customQueryTimeout: null,\n          processingMutation: true,\n          isUserActive: true // Temporarily mark as active to prevent idle interference\n        });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Prevent multiple mutation reloads\n        if (this.mutationReloadTimeout) {\n          clearTimeout(this.mutationReloadTimeout);\n        }\n        \n        // Immediately reload with default query to show updated graph\n        this.loadData(null, this.defaultQuery);\n        this.setState({ processingMutation: false });\n        this.mutationReloadTimeout = null;\n        \n        // If this was an NFC addition, focus on the new node after mutation completes\n        if (this.pendingNFCNode) {\n          setTimeout(() => {\n            this.focusOnNewNode(this.pendingNFCNode, this.state.data);\n            this.pendingNFCNode = null;\n          }, 1500); // Wait for mutation reload to complete\n        }\n        \n        // Reset user activity state after a short delay to allow idle detection to work normally\n        setTimeout(() => {\n          this.updateUserActivity();\n        }, 100);\n        \n        // Return early to prevent processing mutation query results\n        return;\n      } else if (isCustomQuery) {\n        // For non-mutation custom queries, activate custom query state\n        this.setState({ customQueryActive: true });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Update user activity to reset idle timer\n        this.updateUserActivity();\n      }\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      console.error(\"Query was:\", queryToExecute);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\") && record.get(\"source\") && record.get(\"target\") && \n          typeof record.get(\"source\") === 'string' && typeof record.get(\"target\") === 'string') {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            location: record.get(\"sourceLocation\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            location: record.get(\"targetLocation\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node && node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                location: node.properties.location || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (node && typeof node === 'object') {\n            // Handle SET query results that might have different structure\n            const name = node.name || node.u_name || `Node-${Date.now()}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.role || node.u_role || \"\",\n                location: node.location || node.u_location || \"\",\n                website: node.website || node.u_website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (typeof node === 'string' && key.includes('name')) {\n            // Handle direct string values from queries like RETURN u.name, u.role\n            const name = node;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: record.get(key.replace('name', 'role')) || \"\",\n                location: record.get(key.replace('name', 'location')) || \"\",\n                website: record.get(key.replace('name', 'website')) || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n\n    // Calculate hash of current data for change detection\n    const currentDataHash = this.calculateDataHash(updatedData);\n    const hasChanged = this.lastDataHash !== currentDataHash;\n    \n    // Also use more detailed change detection\n    const hasDetailedChange = this.hasDataChanged(updatedData, this.state.data);\n    \n    // Additional check: if the data is exactly the same, don't update\n    const isDataIdentical = JSON.stringify(updatedData) === JSON.stringify(this.state.data);\n    \n\n    \n\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    \n    // Only update state if there's a change or if it's the initial load\n    const now = Date.now();\n    const timeSinceLastUpdate = now - this.lastUpdateTime;\n    \n    if ((hasChanged || hasDetailedChange || this.lastDataHash === null) && \n        !isDataIdentical &&\n        (timeSinceLastUpdate > this.updateDebounceTime || this.lastDataHash === null) &&\n        this.updateCount < this.maxUpdatesPerCycle) {\n      // Update the hash only when we actually update the state\n      this.lastDataHash = currentDataHash;\n      this.lastUpdateTime = now;\n      this.updateCount++;\n      \n      this.setState({ \n        data: updatedData, \n        latestNode: newNodeName,\n        lastUpdateTime: hasChanged ? now : this.state.lastUpdateTime\n      }, () => {\n      if (newNodeName) {\n        // Focus on the new node with multiple attempts to ensure it works\n        this.focusOnNewNode(newNodeName, updatedData);\n      }\n    });\n    } else {\n      // Even if no change, we might need to update latestNode for new additions\n      if (newNodeName && this.state.latestNode !== newNodeName) {\n        this.setState({ latestNode: newNodeName });\n      }\n      // Reset update count when no changes are detected\n      this.updateCount = 0;\n    }\n  };\n\n  // Focus on a newly added node with multiple attempts\n  focusOnNewNode = (nodeName, graphData) => {\n    const attemptFocus = (attempt = 1) => {\n      if (attempt > 5) {\n        console.log(\"Failed to focus on node after 5 attempts:\", nodeName);\n        return;\n      }\n\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\n      if (!newNode) {\n        console.log(`Node ${nodeName} not found in graph data, attempt ${attempt}`);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      if (!this.fgRef.current) {\n        console.log(\"Graph reference not ready, attempt\", attempt);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      try {\n        console.log(`Focusing on node: ${nodeName} at (${newNode.x}, ${newNode.y})`);\n        this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n        this.fgRef.current.zoom(1.25);\n      } catch (error) {\n        console.log(\"Focus attempt failed, retrying:\", error);\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n      }\n    };\n\n    // Start with a longer delay for the first attempt to ensure graph is rendered\n    setTimeout(() => attemptFocus(1), 1000);\n  };\n\n  // Calculate a simple hash of the graph data for change detection\n  calculateDataHash = (data) => {\n    // Only hash the actual data, not the random coordinates\n    const nodesStr = data.nodes.map(n => `${n.name}:${n.role}:${n.location}:${n.website}`).sort().join('|');\n    const linksStr = data.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }).sort().join('|');\n    return `${nodesStr}|${linksStr}`;\n  };\n\n  // More detailed change detection\n  hasDataChanged = (newData, oldData) => {\n    if (!oldData || !oldData.nodes || !oldData.links) return true;\n    \n    // Check if number of nodes or links changed\n    if (newData.nodes.length !== oldData.nodes.length || \n        newData.links.length !== oldData.links.length) {\n      return true;\n    }\n    \n    // Check if any node properties changed\n    const oldNodesMap = new Map(oldData.nodes.map(n => [n.name, n]));\n    for (const newNode of newData.nodes) {\n      const oldNode = oldNodesMap.get(newNode.name);\n      if (!oldNode || \n          oldNode.role !== newNode.role || \n          oldNode.location !== newNode.location || \n          oldNode.website !== newNode.website) {\n        return true;\n      }\n    }\n    \n    // Check if any links changed\n    const oldLinksSet = new Set(oldData.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }));\n    \n    for (const newLink of newData.links) {\n      const source = typeof newLink.source === 'object' ? newLink.source.name : newLink.source;\n      const target = typeof newLink.target === 'object' ? newLink.target.name : newLink.target;\n      if (!oldLinksSet.has(`${source}:${target}`)) {\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // Start polling for changes\n  startPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    \n    this.setState({ isPolling: true });\n    this.pollingInterval = setInterval(() => {\n      // Only poll if the tab is active (to save resources)\n      if (!document.hidden) {\n        // Use default query for polling, but respect custom query state and mutation processing\n        if (this.state.customQueryActive || this.state.processingMutation) {\n          return;\n        }\n        this.loadData(null, this.defaultQuery);\n      }\n    }, 5000); // Check every 5 seconds\n    \n    // Reset update count every 30 seconds to prevent permanent blocking\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n    }\n    this.updateCountResetInterval = setInterval(() => {\n      this.updateCount = 0;\n    }, 30000);\n  };\n\n  // Stop polling\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n      this.updateCountResetInterval = null;\n    }\n    this.setState({ isPolling: false });\n  };\n\n  // WebSocket methods for real-time updates\n  connectWebSocket = () => {\n    try {\n      // Replace with your WebSocket server URL\n      this.websocket = new WebSocket('wss://your-websocket-server.com');\n      \n      this.websocket.onopen = () => {\n        this.setState({ wsConnected: true, useWebSocket: true });\n      };\n      \n      this.websocket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        if (message.type === 'graph_update') {\n          this.loadData(null, this.defaultQuery); // Reload data when update is received\n        }\n      };\n      \n      this.websocket.onclose = () => {\n        this.setState({ wsConnected: false });\n        // Fallback to polling if WebSocket fails\n        setTimeout(() => {\n          if (!this.state.isPolling) {\n            this.startPolling();\n          }\n        }, 5000);\n      };\n      \n      this.websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.setState({ wsConnected: false });\n      };\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      // Fallback to polling\n      this.startPolling();\n    }\n  };\n\n  disconnectWebSocket = () => {\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n    this.setState({ wsConnected: false, useWebSocket: false });\n  };\n\n  // Enhanced componentDidMount to try WebSocket first, then fallback to polling\n  componentDidMount() {\n    // Validate and clean the query state first\n    this.validateAndCleanQuery();\n    \n    this.loadData();\n    \n    // Try WebSocket first, fallback to polling\n    this.connectWebSocket();\n    \n    // Add visibility change listener to pause polling when tab is not active\n    this.handleVisibilityChange = () => {\n      // Tab visibility change handling\n    };\n    \n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n    \n    // Start idle detection\n    this.startIdleDetection();\n  }\n\n  componentWillUnmount() {\n    // Clean up both polling and WebSocket\n    this.stopPolling();\n    this.disconnectWebSocket();\n    \n    // Clear custom query timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n    \n    // Clear mutation reload timeout\n    if (this.mutationReloadTimeout) {\n      clearTimeout(this.mutationReloadTimeout);\n      this.mutationReloadTimeout = null;\n    }\n    \n    // Clear processing mutation state\n    this.setState({ processingMutation: false });\n    \n    // Stop idle detection\n    this.stopIdleDetection();\n    \n    // Remove visibility change listener\n    if (this.handleVisibilityChange) {\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    // Helper function to capitalize first letter of each word\n    const capitalizeWords = (str) => {\n      if (!str) return str;\n      return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    };\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = 'Affiliate', \n                       u.location = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = 'Holder', \n                       nfc.location = $nfcUser + \"'s network\", \n                       nfc.website = ''\n\n         MERGE (awu:User {name: $awuUser}) \n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\n        { \n          user: capitalizeWords(newUser), \n          nfcUser: capitalizeWords(nfcUserName), \n          awuUser: \"Awu Chen\" \n        }\n        );\n      \n      // Store the new user name for focusing after mutation completes\n      this.pendingNFCNode = capitalizeWords(newUser);\n      \n      // Load data with the new user name\n      await this.loadData(capitalizeWords(newUser));\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    // Only update the query state if it's a valid Cypher query or empty\n    const newQuery = event.target.value;\n    \n    // Allow empty queries (for clearing)\n    if (!newQuery || newQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = newQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (isValidQuery) {\n      this.setState({ query: newQuery });\n    }\n  };\n\n  // Method to reset query to default\n  resetQuery = () => {\n    this.setState({ \n      query: this.defaultQuery,\n      customQueryActive: false,\n      customQueryTimeout: null,\n      processingMutation: false\n    });\n    \n    // Clear any existing timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n  };\n\n  // Method to validate and clean the current query state\n  validateAndCleanQuery = () => {\n    const currentQuery = this.state.query;\n    \n    // Check if current query is valid\n    if (!currentQuery || typeof currentQuery !== 'string' || currentQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = currentQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      this.setState({ query: this.defaultQuery });\n    }\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n                <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n        driver={this.driver} // Pass the driver\n        processingMutation={this.state.processingMutation}\n        updateUserActivity={this.updateUserActivity}\n        isUserActive={this.state.isUserActive}\n    />\n  } />\n  </Routes>\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      const newUser = `User-${Date.now()}`;\n\n      try {\n        await addNode(newUser, username); // pass dynamic user\n        } catch (error) {\n          console.error(\"Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/craft-network/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap for {username}...</div>\n      };\n\n              const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver, processingMutation, updateUserActivity, isUserActive }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', 'latestNode', or 'mutation'\n        const [mutatedNodes, setMutatedNodes] = useState([]); // Track nodes created/modified by mutation queries\n\n        // Detect when latestNode changes (NFC addition) and set lastAction\n        useEffect(() => {\n          if (latestNode) {\n            setLastAction('latestNode');\n          }\n        }, [latestNode]);\n\n        // Initial zoom when graph first loads\n        useEffect(() => {\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\n            // Wait a bit for the graph to settle, then zoom to 2x\n            setTimeout(() => {\n              if (fgRef.current) {\n                fgRef.current.zoom(2, 1000);\n              }\n            }, 1000);\n          }\n        }, [data.nodes, fgRef, lastAction]);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\n        const visibilityFocus = focusNode || clickedNode || latestNode;\n        // For zoom: use the most recent action\n        const zoomFocus = lastAction === 'search' ? 'search' : \n                         lastAction === 'click' ? clickedNode : \n                         lastAction === 'latestNode' ? latestNode :\n                         lastAction === 'mutation' ? mutatedNodes[0] : null;\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\n        \n        // Always include search results in visibility if there's a search term\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        // Always include mutated nodes in visibility if there was a mutation\n        if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n          mutatedNodes.forEach(nodeName => {\n            const nodeNeighbors = getNDegreeNodes(nodeName, 0); // Always use 0 degree for mutations\n            nodeNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        const zoomNodes = lastAction === 'search' ? \n                         (() => {\n                           const searchMatches = data.nodes.filter(node => \n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                             (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n                           );\n                           const searchNodes = new Set();\n                           searchMatches.forEach(match => {\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\n                           });\n                           return searchNodes;\n                         })() : \n                         lastAction === 'mutation' ?\n                         (() => {\n                           const mutationNodes = new Set();\n                           mutatedNodes.forEach(nodeName => {\n                             const nodeNeighbors = getNDegreeNodes(nodeName, 1); // Always use 1 degree for mutations\n                             nodeNeighbors.forEach(neighbor => mutationNodes.add(neighbor));\n                           });\n                           return mutationNodes;\n                         })() :\n                         getNDegreeNodes(zoomFocus, visibleDegree);\n        \n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && zoomNodes.size > 0) {\n            // Zoom based on last action\n            if (lastAction === 'click' && clickedNode) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (lastAction === 'search' && inputValue) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (lastAction === 'latestNode' && latestNode) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n            // For mutation queries, zoom to the mutated nodes\n            else if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for mutation\n            }\n          }\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue, mutatedNodes]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n          \n          // Update user activity when typing\n          updateUserActivity();\n          \n          // Clear other actions when searching\n          if (input.trim()) {\n            setClickedNode(null);\n            setLastAction('search');\n          }\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            setInputValue(generatedQuery);\n            handleChange({ target: { value: generatedQuery } });\n\n            await loadData(null, generatedQuery);\n\n            // Check if the generated query is a mutation query (updates the graph)\n            const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(generatedQuery.trim());\n            \n            // If it's a mutation query, immediately return to default state\n            if (isMutationQuery) {\n              console.log(\"Mutation query from Flowise detected, immediately returning to default state\");\n              \n              // Extract node names from the mutation query to track what was created/modified\n              let extractedNodes = [];\n              \n              // Handle different mutation query patterns\n              if (generatedQuery.includes('DELETE')) {\n                // For DELETE queries, extract from patterns like DELETE (u:User {name: \"John\"}) or MATCH (u:User {name: \"John\"}) DELETE u\n                const deleteMatches = generatedQuery.match(/\\{name:\\s*['\"]([^'\"]+)['\"]\\}/g);\n                if (deleteMatches) {\n                  extractedNodes = deleteMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean);\n                }\n              } else if (generatedQuery.includes('SET')) {\n                // For SET queries, extract from MATCH clause like MATCH (u:User {name: \"John\"}) SET u.role = 'admin'\n                const matchClause = generatedQuery.match(/MATCH\\s*\\([^)]*\\{name:\\s*['\"]([^'\"]+)['\"][^}]*\\}\\)/i);\n                if (matchClause) {\n                  extractedNodes = [matchClause[1]];\n                }\n              } else {\n                // For CREATE/MERGE queries, extract from {name: \"nodeName\"} patterns\n                const nodeMatches = generatedQuery.match(/\\{([^}]+)\\}/g);\n                extractedNodes = nodeMatches ? \n                  nodeMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean) : [];\n              }\n              \n              setMutatedNodes(extractedNodes);\n              setLastAction('mutation');\n              \n              // Immediately return to default query without any delay\n              const defaultQuery = `\n                MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n                RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n                       v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite\n              `;\n              await loadData(null, defaultQuery);\n            }\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          setLastAction('click');\n          \n          // Update user activity when clicking nodes\n          updateUserActivity();\n          \n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          // Ensure the website has \"https://\" if missing\n          let formattedWebsite = editedNode.website.trim();\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\n            formattedWebsite = \"https://\" + formattedWebsite;\n          }\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.location = $location, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: capitalizeWords(editedNode.name),\n                role: capitalizeWords(editedNode.role),\n                location: capitalizeWords(editedNode.location),\n                website: formattedWebsite, // Use the corrected website\n              }\n            );\n            await loadData(editedNode.name); // Keep the edited node as latestNode\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Show me all the artist in Kyoto...\"\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n      \n\n      \n      {/* Mutation processing indicator */}\n      {processingMutation && (\n        <div style={{\n          position: \"fixed\",\n          top: \"60px\",\n          right: \"10px\",\n          padding: \"8px 12px\",\n          backgroundColor: \"#9C27B0\",\n          color: \"white\",\n          borderRadius: \"4px\",\n          fontSize: \"12px\",\n          zIndex: 1000,\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"8px\"\n        }}>\n          <div style={{\n            width: \"8px\",\n            height: \"8px\",\n            borderRadius: \"50%\",\n            backgroundColor: \"#fff\",\n            animation: \"pulse 0.5s infinite\"\n          }}></div>\n          Processing Mutation...\n        </div>\n      )}\n      \n\n      \n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.location || \"No Location\"}\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n    setLastAction(null);\n    setMutatedNodes([]);\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())));\n    const isNDegree = visibilityNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = \"gray\";\n    ctx.fillText(node.role, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {selectedNode && editedNode && (\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\n    {selectedNode.name === latestNode ? (\n      <>\n      <h3>Edit Network Info</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n      placeholder=\"Enter name\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \n      /></p>\n\n      <p><strong>Role:</strong>\n      <input \n      name=\"role\" \n      value={editedNode.role} \n      placeholder=\"Enter role\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \n      /></p>\n\n      <p><strong>Location:</strong>\n      <input \n      name=\"location\" \n      value={editedNode.location} \n      placeholder=\"Enter location\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter location\"} \n      /></p>\n\n      <p><strong>Website:</strong>\n      <input \n      name=\"website\" \n      value={editedNode.website} \n      placeholder=\"Enter website\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \n      /></p>\n\n      <p><button onClick={saveNodeChanges}>Save</button></p>\n      </>\n      ) : (\n      <>\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\n      <p><strong>Location:</strong> {selectedNode?.location}</p>\n      <p><strong>Website:</strong>{\" \"}\n      {selectedNode.website && selectedNode.website !== \"\" ? (\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n        ) : (\n        \"\"\n      )}</p>\n      </>\n    )}\n    <button onClick={() => setSelectedNode(null)}>Close</button>\n    </div>\n  )}\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}