{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","queryOverride","session","database","run","state","query","res","console","error","setState","data","nodes","links","close","nodesMap","Map","records","forEach","record","has","source","get","target","set","name","role","title","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","latestNode","setTimeout","newNode","find","n","fgRef","current","log","centerAt","zoom","addNodeNFC","newUser","nfcUserName","user","nfcUser","awuUser","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","location","useLocation","username","useParams","useEffect","Date","now","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","oneDegreeNodes","Set","neighbors","add","link","getOneDegreeNodes","nDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","getNDegreeNodes","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","handleEditChange","prev","saveNodeChanges","formattedWebsite","trim","startsWith","oldName","newName","width","onSubmit","placeholder","display","height","margin","onChange","input","type","id","onClick","open","ref","graphData","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","toLowerCase","includes","isNDegree","globalAlpha","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkCanvasObjectMode","linkCanvasObject","isConnected","save","moveTo","lineTo","restore","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","position","top","left","transform","backgroundColor","border","boxShadow","zIndex","onFocus","onBlur","href","rel","length","substring","App","className","Boolean","hostname","match","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2f83cbd1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite`,\n      latestNode: null\n    };\n\n  }\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    try {\n      res = await session.run(queryOverride || this.state.query);\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\")) {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            title: record.get(\"sourceTitle\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            title: record.get(\"targetTitle\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                title: node.properties.title || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\n      if (newNodeName) {\n        setTimeout(() => {\n          let newNode = nodes.find((n) => n.name === newNodeName);\n          if (newNode && this.fgRef.current) {\n            console.log(\"Focusing on:\", newNode);\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n            this.fgRef.current.zoom(1.25);\n          }\n        }, 2000);\n      }\n    });\n  };\n\n\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = 'affiliate', \n                       u.title = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = 'ambassador', \n                       nfc.title = $nfcUser + \"'s network\", \n                       nfc.website = ''\n\n         MERGE (awu:User {name: $awuUser}) \n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\n        { \n          user: newUser, \n          nfcUser: nfcUserName, \n          awuUser: \"Awu Chen\" \n        }\n        );\n      await this.loadData(newUser);\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    this.setState({ query: event.target.value });\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n    driver={this.driver} // Pass the driver\n    />\n  } />\n  </Routes>\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      const newUser = `User-${Date.now()}`;\n\n      try {\n        await addNode(newUser, username); // pass dynamic user\n        } catch (error) {\n          console.error(\"Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/craft-network/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap for {username}...</div>\n      };\n\n      const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 2; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              if (currentLevel.has(link.source) && !visited.has(link.target)) {\n                nextLevel.add(link.target);\n              }\n              if (currentLevel.has(link.target) && !visited.has(link.source)) {\n                nextLevel.add(link.source);\n              }\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        const currentFocus = focusNode || latestNode;\n        const nDegreeNodes = getNDegreeNodes(currentFocus, visibleDegree);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            setInputValue(generatedQuery);\n            handleChange({ target: { value: generatedQuery } });\n\n            await loadData(null, generatedQuery);\n\n            // Then reload the full graph with your default MATCH query\n            const defaultQuery = `\n              MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n              RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \n                     v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite\n            `;\n            await loadData(null, defaultQuery);\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Ensure the website has \"https://\" if missing\n          let formattedWebsite = editedNode.website.trim();\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\n            formattedWebsite = \"https://\" + formattedWebsite;\n          }\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.title = $title, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: editedNode.name,\n                role: editedNode.role,\n                title: editedNode.title,\n                website: formattedWebsite, // Use the corrected website\n              }\n            );\n            await loadData(editedNode.name); // Keep the edited node as latestNode\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Enter natural language query, search for nodes...\"\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.title || \"No Title\"}\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onBackgroundClick={() => setFocusNode(null)}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())));\n    const isOneDegree = oneDegreeNodes.has(node.name);\n    const isNDegree = nDegreeNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = \"gray\";\n    ctx.fillText(node.role, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkCanvasObjectMode={() => 'after'}\n  linkCanvasObject={(link, ctx) => {\n    // A link is visible if both ends are in the nDegreeNodes set\n    const isConnected = nDegreeNodes.has(link.source) && nDegreeNodes.has(link.target);\n    ctx.save();\n    ctx.globalAlpha = isConnected ? 1.0 : 0.15;\n    // Draw the link line manually (after default rendering)\n    ctx.beginPath();\n    ctx.moveTo(link.source.x, link.source.y);\n    ctx.lineTo(link.target.x, link.target.y);\n    ctx.strokeStyle = '#999';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    ctx.restore();\n  }}\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {selectedNode && editedNode && (\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\n    {selectedNode.name === latestNode ? (\n      <>\n      <h3>Edit Network Info</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n      placeholder=\"Enter name\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \n      /></p>\n\n      <p><strong>Title:</strong>\n      <input \n      name=\"title\" \n      value={editedNode.title} \n      placeholder=\"Enter title\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter title\"} \n      /></p>\n\n      <p><strong>Role:</strong>\n      <input \n      name=\"role\" \n      value={editedNode.role} \n      placeholder=\"Enter role\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \n      /></p>\n\n      <p><strong>Website:</strong>\n      <input \n      name=\"website\" \n      value={editedNode.website} \n      placeholder=\"Enter website\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \n      /></p>\n\n      <p><button onClick={saveNodeChanges}>Save</button></p>\n      </>\n      ) : (\n      <>\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      <p><strong>Title:</strong> {selectedNode?.title}</p>\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\n      <p><strong>Website:</strong>{\" \"}\n      {selectedNode.website && selectedNode.website !== \"\" ? (\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n        ) : (\n        \"\"\n      )}</p>\n      </>\n    )}\n    <button onClick={() => setSelectedNode(null)}>Close</button>\n    </div>\n  )}\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}