{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","queryOverride","session","database","run","state","query","res","console","error","setState","data","nodes","links","close","nodesMap","Map","records","forEach","record","has","source","get","target","set","name","role","title","website","x","Math","random","y","push","keys","key","node","properties","identity","low","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","latestNode","setTimeout","newNode","find","n","fgRef","current","log","centerAt","zoom","addNodeNFC","newUser","user","nfcUser","awuUser","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","location","useLocation","useEffect","Date","now","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","handleEditChange","prev","saveNodeChanges","formattedWebsite","trim","startsWith","oldName","newName","width","onSubmit","placeholder","display","height","margin","onChange","input","type","id","onClick","open","ref","graphData","nodeId","nodeLabel","onNodeClick","nodeCanvasObject","ctx","isHighlighted","toLowerCase","includes","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","position","top","left","transform","backgroundColor","border","boxShadow","zIndex","onFocus","onBlur","href","rel","length","substring","App","className","Boolean","hostname","match","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6bc8ff5a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { HashRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\r\nimport './App.css';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nclass CypherViz extends React.Component {\r\n  constructor({ driver }) {\r\n    super();\r\n    this.driver = driver;\r\n    this.fgRef = React.createRef();\r\n    \r\n    this.defaultData = {\r\n      nodes: [],\r\n      links: []\r\n    };\r\n    \r\n    this.state = {\r\n      data: this.defaultData,\r\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \r\n          RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \r\n      v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite`,\r\n      latestNode: null\r\n    };\r\n\r\n  }\r\n\r\n  loadData = async (newNodeName = null, queryOverride = null) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    let res;\r\n    try {\r\n      res = await session.run(queryOverride || this.state.query);\r\n    } catch (err) {\r\n      console.error(\"Neo4j query failed:\", err);\r\n      this.setState({ data: { nodes: [], links: [] } });\r\n      return;\r\n    } finally {\r\n      session.close();\r\n    }\r\n\r\n    let nodesMap = new Map();\r\n    let links = [];\r\n\r\n    // Intelligent parser\r\n    res.records.forEach((record) => {\r\n      if (record.has(\"source\") && record.has(\"target\")) {\r\n        // standard case\r\n        let source = record.get(\"source\");\r\n        let target = record.get(\"target\");\r\n\r\n        if (!nodesMap.has(source)) {\r\n          nodesMap.set(source, {\r\n            name: source,\r\n            role: record.get(\"sourceRole\"),\r\n            title: record.get(\"sourceTitle\"),\r\n            website: record.get(\"sourceWebsite\"),\r\n            x: Math.random() * 500,\r\n            y: Math.random() * 500,\r\n          });\r\n        }\r\n\r\n        if (!nodesMap.has(target)) {\r\n          nodesMap.set(target, {\r\n            name: target,\r\n            role: record.get(\"targetRole\"),\r\n            title: record.get(\"targetTitle\"),\r\n            website: record.get(\"targetWebsite\"),\r\n            x: Math.random() * 500,\r\n            y: Math.random() * 500,\r\n          });\r\n        }\r\n\r\n        links.push({ source, target });\r\n      } else {\r\n        // fallback: node-only query\r\n        record.keys.forEach((key) => {\r\n          const node = record.get(key);\r\n          if (node.properties && node.identity) {\r\n            const name = node.properties.name || `Node-${node.identity.low}`;\r\n            if (!nodesMap.has(name)) {\r\n              nodesMap.set(name, {\r\n                name,\r\n                role: node.properties.role || \"\",\r\n                title: node.properties.title || \"\",\r\n                website: node.properties.website || \"\",\r\n                x: Math.random() * 500,\r\n                y: Math.random() * 500,\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    const nodes = Array.from(nodesMap.values());\r\n    const updatedData = { nodes, links };\r\n\r\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\r\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\r\n      if (newNodeName) {\r\n        setTimeout(() => {\r\n          let newNode = nodes.find((n) => n.name === newNodeName);\r\n          if (newNode && this.fgRef.current) {\r\n            console.log(\"Focusing on:\", newNode);\r\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\r\n            this.fgRef.current.zoom(1.25);\r\n          }\r\n        }, 2000);\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  addNodeNFC = async (newUser) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    try {\r\n      await session.run(\r\n        `MERGE (u:User {name: $user}) \r\n         ON CREATE SET u.role = 'attendee', \r\n                       u.title = '', \r\n                       u.website = ''\r\n\r\n         MERGE (nfc:User {name: $nfcUser}) \r\n         ON CREATE SET nfc.role = 'CHI 2025', \r\n                       nfc.title = 'Conference on Human Factors in Computing Systems', \r\n                       nfc.website = 'https://chi2025.acm.org/'\r\n\r\n         MERGE (awu:User {name: $awuUser}) \r\n\r\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \r\n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\r\n        { \r\n          user: newUser, \r\n          nfcUser: \"CHI\", \r\n          awuUser: \"Awu Chen\" \r\n        }\r\n        );\r\n      await this.loadData(newUser);\r\n    } catch (error) {\r\n      console.error(\"Error adding user:\", error);\r\n    } finally {\r\n      session.close();\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ query: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div>\r\n      <Routes>\r\n      <Route path=\"/NFC\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\r\n      <Route path=\"/\" element={\r\n        <GraphView \r\n        data={this.state.data} \r\n        handleChange={this.handleChange} \r\n        loadData={this.loadData} \r\n        fgRef={this.fgRef} \r\n        latestNode={this.state.latestNode} \r\n    driver={this.driver} // Pass the driver\r\n    />\r\n  } />\r\n  </Routes>\r\n  </div>\r\n  </Router>\r\n  );\r\n}\r\n}\r\n\r\nconst NFCTrigger = ({ addNode }) => {\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    const addAndRedirect = async () => {\r\n      const newUser = `User-${Date.now()}`;\r\n\r\n      try {\r\n        await addNode(newUser);\r\n        } catch (error) {\r\n          console.error(\"Error adding user:\", error);\r\n          return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location.assign(\"/craft-network/#/\");\r\n          }, 1000);\r\n        };\r\n\r\n        addAndRedirect();\r\n        }, [location]);\r\n\r\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap...</div>;\r\n      };\r\n\r\n      const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver }) => {\r\n        const [inputValue, setInputValue] = useState(\"\"); // input text\r\n        const [selectedNode, setSelectedNode] = useState(null);\r\n        const [editedNode, setEditedNode] = useState(null);\r\n\r\n        const handleInputChange = (event) => {\r\n          const input = event.target.value;\r\n          setInputValue(input);\r\n          handleChange(event); // updates CypherViz state.query too\r\n        };\r\n\r\n        const handleSubmit = async (e) => {\r\n          e.preventDefault();\r\n\r\n          try {\r\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({ question: inputValue })\r\n            });\r\n\r\n            const data = await response.json();\r\n            const generatedQuery = data.text || data.query || \"\";\r\n\r\n            setInputValue(generatedQuery);\r\n            handleChange({ target: { value: generatedQuery } });\r\n\r\n            await loadData(null, generatedQuery);\r\n\r\n            // Then reload the full graph with your default MATCH query\r\n            const defaultQuery = `\r\n              MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\r\n              RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \r\n                     v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite\r\n            `;\r\n            await loadData(null, defaultQuery);\r\n            \r\n            } catch (error) {\r\n              console.error(\"Flowise call failed:\", error);\r\n            }\r\n        };\r\n\r\n        const handleNodeClick = (node) => {\r\n          if (!node) return; // Prevent errors if node is null\r\n          setSelectedNode(node);\r\n          setEditedNode({ ...node }); // Clone the selected node for editing\r\n        };\r\n\r\n        const handleEditChange = (event) => {\r\n          const { name, value } = event.target;\r\n          setEditedNode((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n          }));\r\n        };\r\n\r\n        const saveNodeChanges = async () => {\r\n          if (!editedNode || !selectedNode) return;\r\n\r\n          // Ensure the website has \"https://\" if missing\r\n          let formattedWebsite = editedNode.website.trim();\r\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\r\n            formattedWebsite = \"https://\" + formattedWebsite;\r\n          }\r\n\r\n          const session = driver.session();\r\n          try {\r\n            await session.run(\r\n              `MATCH (u:User {name: $oldName}) \r\n              SET u.name = $newName, u.role = $role, u.title = $title, u.website = $website`,\r\n              {\r\n                oldName: selectedNode.name,\r\n                newName: editedNode.name,\r\n                role: editedNode.role,\r\n                title: editedNode.title,\r\n                website: formattedWebsite, // Use the corrected website\r\n              }\r\n            );\r\n            await loadData(editedNode.name); // Keep the edited node as latestNode\r\n            setTimeout(() => setSelectedNode(null), 100); // Close the panel after a brief delay\r\n          } catch (error) {\r\n            console.error(\"Error updating node:\", error);\r\n          } finally {\r\n            session.close();\r\n          }\r\n        };\r\n\r\n\r\nreturn (\r\n    <div width=\"95%\">\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          placeholder=\"Enter natural language query, search for nodes...\"\r\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button type=\"submit\">Run</button>\r\n      </form>\r\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\r\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\r\n\r\n  <ForceGraph2D\r\n  ref={fgRef}\r\n  graphData={data}\r\n  nodeId=\"name\"\r\n  nodeLabel={(node) => node.title || \"No Title\"}\r\n  onNodeClick={handleNodeClick}\r\n  nodeCanvasObject={(node, ctx) => {\r\n    const isHighlighted =\r\n    inputValue &&\r\n    (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n    (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())));\r\n\r\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\"; // Keep latestNode in black\r\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\r\n    ctx.lineWidth = isHighlighted ? 3 : 2;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    ctx.fillStyle = \"gray\";\r\n    ctx.fillText(node.role, node.x + 10, node.y);\r\n  }}\r\n  linkCurvature={0.2}\r\n  linkDirectionalArrowRelPos={1}\r\n  linkDirectionalArrowLength={5}\r\n  />\r\n\r\n  {selectedNode && editedNode && (\r\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\r\n    {selectedNode.name === latestNode ? (\r\n      <>\r\n      <h3>Edit Network Info</h3>\r\n      <p><strong>Name:</strong>\r\n      <input \r\n      name=\"name\" \r\n      value={editedNode.name} \r\n      placeholder=\"Enter name\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \r\n      /></p>\r\n\r\n      <p><strong>Title:</strong>\r\n      <input \r\n      name=\"title\" \r\n      value={editedNode.title} \r\n      placeholder=\"Enter title\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter title\"} \r\n      /></p>\r\n\r\n      <p><strong>Role:</strong>\r\n      <input \r\n      name=\"role\" \r\n      value={editedNode.role} \r\n      placeholder=\"Enter role\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \r\n      /></p>\r\n\r\n      <p><strong>Website:</strong>\r\n      <input \r\n      name=\"website\" \r\n      value={editedNode.website} \r\n      placeholder=\"Enter website\" \r\n      onChange={handleEditChange}\r\n      onFocus={(e) => e.target.placeholder = \"\"}\r\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \r\n      /></p>\r\n\r\n      <p><button onClick={saveNodeChanges}>Save</button></p>\r\n      </>\r\n      ) : (\r\n      <>\r\n      <h3>Network Info</h3>\r\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\r\n      <p><strong>Title:</strong> {selectedNode?.title}</p>\r\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\r\n      <p><strong>Website:</strong>{\" \"}\r\n      {selectedNode.website && selectedNode.website !== \"\" ? (\r\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {selectedNode.website.length > 30 \r\n          ? `${selectedNode.website.substring(0, 30)}...`\r\n        : selectedNode.website}\r\n        </a>\r\n        ) : (\r\n        \"\"\r\n      )}</p>\r\n      </>\r\n    )}\r\n    <button onClick={() => setSelectedNode(null)}>Close</button>\r\n    </div>\r\n  )}\r\n  </div>\r\n  );\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    export default CypherViz;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}