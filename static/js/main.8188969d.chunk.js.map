{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","session","database","run","state","query","res","close","nodesMap","Map","links","records","map","r","source","get","target","has","set","name","role","title","website","x","Math","random","y","nodes","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","setState","data","latestNode","setTimeout","newNode","find","n","fgRef","current","console","log","centerAt","zoom","addNodeNFC","newUser","user","prevUser","error","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","location","useLocation","useEffect","Date","now","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","handleEditChange","prev","saveNodeChanges","oldName","newName","width","placeholder","display","height","margin","onChange","input","test","matchedNodes","filter","node","toLowerCase","includes","length","firstMatch","id","onClick","open","ref","graphData","nodeId","nodeLabel","onNodeClick","nodeCanvasObject","ctx","isHighlighted","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","position","top","left","transform","backgroundColor","border","boxShadow","zIndex","onFocus","e","onBlur","href","rel","substring","App","className","Boolean","hostname","match","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8188969d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { HashRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\r\nimport './App.css';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nclass CypherViz extends React.Component {\r\n  constructor({ driver }) {\r\n    super();\r\n    this.driver = driver;\r\n    this.fgRef = React.createRef();\r\n    \r\n    this.defaultData = {\r\n      nodes: [],\r\n      links: []\r\n    };\r\n    \r\n    this.state = {\r\n      data: this.defaultData,\r\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \r\n          RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \r\n      v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite`,\r\n      latestNode: null\r\n    };\r\n\r\n  }\r\n\r\n  loadData = async (newNodeName = null) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    let res = await session.run(this.state.query);\r\n    session.close();\r\n\r\n    let nodesMap = new Map();\r\n    let links = res.records.map(r => {\r\n      let source = r.get(\"source\");\r\n      let target = r.get(\"target\");\r\n\r\n    // Add or update source node\r\n      if (!nodesMap.has(source)) {\r\n        nodesMap.set(source, {\r\n          name: source,\r\n          role: r.get(\"sourceRole\"),\r\n          title: r.get(\"sourceTitle\"),\r\n          website: r.get(\"sourceWebsite\"),\r\n          x: Math.random() * 500,\r\n          y: Math.random() * 500\r\n        });\r\n      }\r\n\r\n    // Add or update target node\r\n      if (!nodesMap.has(target)) {\r\n        nodesMap.set(target, {\r\n          name: target,\r\n          role: r.get(\"targetRole\"),\r\n          title: r.get(\"targetTitle\"),\r\n          website: r.get(\"targetWebsite\"),\r\n          x: Math.random() * 500,\r\n          y: Math.random() * 500\r\n        });\r\n      }\r\n\r\n      return { source, target };\r\n    });\r\n\r\n    const nodes = Array.from(nodesMap.values());\r\n    const updatedData = { nodes, links };\r\n\r\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\r\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\r\n      if (newNodeName) {\r\n        setTimeout(() => {\r\n          let newNode = nodes.find(n => n.name === newNodeName);\r\n          if (newNode && this.fgRef.current) {\r\n            console.log(\"Focusing on:\", newNode);\r\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\r\n            this.fgRef.current.zoom(1.25);\r\n          }\r\n        }, 2000);\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  addNodeNFC = async (newUser) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    try {\r\n      await session.run(\r\n        `MERGE (u:User {name: $user}) \r\n             ON CREATE SET u.role = 'new user', \r\n                           u.title = '', \r\n                           u.website = ''\r\n             MERGE (prev:User {name: \"Awu Chen\"}) \r\n        MERGE (u)-[:CONNECTED_TO]->(prev)`,\r\n        { user: newUser, prevUser: \"Awu Chen\" }\r\n        );\r\n      await this.loadData(newUser);\r\n    } catch (error) {\r\n      console.error(\"Error adding user:\", error);\r\n    } finally {\r\n      session.close();\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ query: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div>\r\n      <Routes>\r\n      <Route path=\"/NFC\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\r\n      <Route path=\"/\" element={\r\n        <GraphView \r\n        data={this.state.data} \r\n        handleChange={this.handleChange} \r\n        loadData={this.loadData} \r\n        fgRef={this.fgRef} \r\n        latestNode={this.state.latestNode} \r\n    driver={this.driver} // Pass the driver\r\n    />\r\n  } />\r\n  </Routes>\r\n  </div>\r\n  </Router>\r\n  );\r\n}\r\n}\r\n\r\nconst NFCTrigger = ({ addNode }) => {\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    const addAndRedirect = async () => {\r\n      const newUser = `User-${Date.now()}`;\r\n\r\n      try {\r\n        await addNode(newUser);\r\n        } catch (error) {\r\n          console.error(\"Error adding user:\", error);\r\n          return;\r\n        }\r\n\r\n        setTimeout(() => {\r\n          window.location.assign(\"/craft-network/#/\");\r\n          }, 1000);\r\n        };\r\n\r\n        addAndRedirect();\r\n        }, [location]);\r\n\r\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap...</div>;\r\n      };\r\n\r\n      const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver }) => {\r\n  const [inputValue, setInputValue] = useState(\"\"); // Keep input empty initially\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [editedNode, setEditedNode] = useState(null); // Stores edited node details\r\n\r\n  const handleInputChange = (event) => {\r\n    const input = event.target.value;\r\n    setInputValue(input);\r\n    handleChange(event); // Update query state (even if blank)\r\n\r\n    const isCypherQuery = /\\b(MATCH|RETURN|WHERE|SET|CREATE|MERGE|DELETE)\\b/i.test(input);\r\n\r\n    if (!isCypherQuery && fgRef.current) {\r\n      const matchedNodes = data.nodes.filter(\r\n        (node) =>\r\n        node.name.toLowerCase().includes(input.toLowerCase()) ||\r\n        (node.title && node.title.toLowerCase().includes(input.toLowerCase()))\r\n        );\r\n\r\n      if (matchedNodes.length > 0) {\r\n        const firstMatch = matchedNodes[0];\r\n        fgRef.current.centerAt(firstMatch.x, firstMatch.y+100, 1500);\r\n        fgRef.current.zoom(2.5);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleNodeClick = (node) => {\r\n  if (!node) return; // Prevent errors if node is null\r\n  setSelectedNode(node);\r\n  setEditedNode({ ...node }); // Clone the selected node for editing\r\n};\r\n\r\nconst handleEditChange = (event) => {\r\n  const { name, value } = event.target;\r\n  setEditedNode((prev) => ({\r\n    ...prev,\r\n    [name]: value,\r\n  }));\r\n};\r\n\r\nconst saveNodeChanges = async () => {\r\n  if (!editedNode || !selectedNode) return;\r\n  \r\n  const session = driver.session();\r\n  try {\r\n    await session.run(\r\n      `MATCH (u:User {name: $oldName}) \r\n      SET u.name = $newName, u.role = $role, u.title = $title, u.website = $website`,\r\n      {\r\n        oldName: selectedNode.name,\r\n        newName: editedNode.name,\r\n        role: editedNode.role,\r\n        title: editedNode.title,\r\n        website: editedNode.website\r\n      }\r\n      );\r\n    await loadData(); // Reload the graph data to reflect changes\r\n    setSelectedNode(null); // Automatically close the edit form\r\n  } catch (error) {\r\n    console.error(\"Error updating node:\", error);\r\n  } finally {\r\n    session.close();\r\n  }\r\n};\r\n\r\nreturn (\r\n  <div width=\"95%\">\r\n  <textarea\r\n  placeholder=\"Enter query, node name, or title...\"\r\n  style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\r\n  value={inputValue}\r\n  onChange={handleInputChange}\r\n  />\r\n  <button id=\"simulate\" onClick={() => loadData()}>Run</button>\r\n  <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\r\n  <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\r\n\r\n  <ForceGraph2D\r\n  ref={fgRef}\r\n  graphData={data}\r\n  nodeId=\"name\"\r\n  nodeLabel={(node) => node.title || \"No Title\"}\r\n  onNodeClick={handleNodeClick}\r\n  nodeCanvasObject={(node, ctx) => {\r\n    const isHighlighted =\r\n    inputValue &&\r\n    (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n    (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())));\r\n\r\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\r\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\r\n    ctx.lineWidth = isHighlighted ? 3 : 2;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    ctx.fillStyle = \"gray\";\r\n    ctx.fillText(node.role, node.x + 10, node.y);\r\n    }}\r\n    linkCurvature={0.2}\r\n    linkDirectionalArrowRelPos={1}\r\n    linkDirectionalArrowLength={5}\r\n    />\r\n\r\n    {selectedNode && editedNode && (\r\n      <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\r\n      {selectedNode.name === latestNode ? (\r\n        <>\r\n        <h3>Edit Network Info</h3>\r\n        <p><strong>Name:</strong>\r\n        <input \r\n        name=\"name\" \r\n        value={editedNode.name} \r\n        placeholder=\"Enter name\" \r\n        onChange={handleEditChange}\r\n        onFocus={(e) => e.target.placeholder = \"\"}\r\n        onBlur={(e) => e.target.placeholder = \"Enter name\"} \r\n        /></p>\r\n\r\n        <p><strong>Title:</strong>\r\n        <input \r\n        name=\"title\" \r\n        value={editedNode.title} \r\n        placeholder=\"Enter title\" \r\n        onChange={handleEditChange}\r\n        onFocus={(e) => e.target.placeholder = \"\"}\r\n        onBlur={(e) => e.target.placeholder = \"Enter title\"} \r\n        /></p>\r\n\r\n        <p><strong>Role:</strong>\r\n        <input \r\n        name=\"role\" \r\n        value={editedNode.role} \r\n        placeholder=\"Enter role\" \r\n        onChange={handleEditChange}\r\n        onFocus={(e) => e.target.placeholder = \"\"}\r\n        onBlur={(e) => e.target.placeholder = \"Enter role\"} \r\n        /></p>\r\n\r\n        <p><strong>Website:</strong>\r\n        <input \r\n        name=\"website\" \r\n        value={editedNode.website} \r\n        placeholder=\"Enter website\" \r\n        onChange={handleEditChange}\r\n        onFocus={(e) => e.target.placeholder = \"\"}\r\n        onBlur={(e) => e.target.placeholder = \"Enter website\"} \r\n        /></p>\r\n\r\n        <p><button onClick={saveNodeChanges}>Save</button></p>\r\n        </>\r\n        ) : (\r\n        <>\r\n        <h3>Network Info</h3>\r\n        <p><strong>Name:</strong> {selectedNode?.name}</p>\r\n        <p><strong>Title:</strong> {selectedNode?.title}</p>\r\n        <p><strong>Role:</strong> {selectedNode?.role}</p>\r\n        <p><strong>Website:</strong>{\" \"}\r\n        {selectedNode.website && selectedNode.website !== \"\" ? (\r\n          <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {selectedNode.website.length > 30 \r\n            ? `${selectedNode.website.substring(0, 30)}...`\r\n          : selectedNode.website}\r\n          </a>\r\n          ) : (\r\n          \"\"\r\n        )}</p>\r\n        </>\r\n      )}\r\n      <button onClick={() => setSelectedNode(null)}>Close</button>\r\n      </div>\r\n    )}\r\n    </div>\r\n    );\r\n      };\r\n\r\n\r\n\r\n\r\n\r\n      export default CypherViz;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}