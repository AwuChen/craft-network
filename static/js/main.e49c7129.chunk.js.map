{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","queryOverride","session","database","run","state","query","res","console","error","setState","data","nodes","links","close","nodesMap","Map","records","forEach","record","has","source","get","target","set","name","role","title","website","x","Math","random","y","push","warn","u","v","properties","identity","low","sourceName","targetName","keys","key","node","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","latestNode","setTimeout","newNode","find","n","fgRef","current","log","centerAt","zoom","addNodeNFC","newUser","nfcUserName","user","nfcUser","awuUser","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","location","useLocation","username","useParams","useEffect","Date","now","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","length","oneDegreeNodes","Set","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","zoomFocus","visibilityNodes","trim","filter","toLowerCase","includes","match","neighbor","zoomNodes","searchMatches","searchNodes","size","visibleNodes","xs","map","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","toUpperCase","queryToExecute","fetch","method","headers","body","question","response","json","text","handleEditChange","prev","saveNodeChanges","formattedWebsite","startsWith","oldName","newName","onSubmit","placeholder","display","margin","onChange","input","type","id","onClick","open","ref","graphData","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkColor","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","position","top","left","transform","backgroundColor","border","boxShadow","zIndex","onFocus","onBlur","href","rel","substring","App","className","Boolean","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e49c7129.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.title AS sourceTitle, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.title AS targetTitle, v.website AS targetWebsite`,\n      latestNode: null\n    };\n\n  }\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    try {\n      res = await session.run(queryOverride || this.state.query);\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      // Check for standard source/target format\n      if (record.has(\"source\") && record.has(\"target\")) {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            title: record.get(\"sourceTitle\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            title: record.get(\"targetTitle\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n          console.warn(\"Invalid link skipped:\", { source, target });\n        }\n      } else if (record.has(\"u\") && record.has(\"v\")) {\n        // Handle queries that return nodes as u and v\n        const u = record.get(\"u\");\n        const v = record.get(\"v\");\n        \n        if (u && u.properties) {\n          const name = u.properties.name || `Node-${u.identity.low}`;\n          if (!nodesMap.has(name)) {\n            nodesMap.set(name, {\n              name,\n              role: u.properties.role || \"\",\n              title: u.properties.title || \"\",\n              website: u.properties.website || \"\",\n              x: Math.random() * 500,\n              y: Math.random() * 500,\n            });\n          }\n        }\n        \n        if (v && v.properties) {\n          const name = v.properties.name || `Node-${v.identity.low}`;\n          if (!nodesMap.has(name)) {\n            nodesMap.set(name, {\n              name,\n              role: v.properties.role || \"\",\n              title: v.properties.title || \"\",\n              website: v.properties.website || \"\",\n              x: Math.random() * 500,\n              y: Math.random() * 500,\n            });\n          }\n        }\n        \n        // Try to create a link if both nodes exist\n        if (u && v && u.properties && v.properties) {\n          const sourceName = u.properties.name || `Node-${u.identity.low}`;\n          const targetName = v.properties.name || `Node-${v.identity.low}`;\n          links.push({ source: sourceName, target: targetName });\n        }\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                title: node.properties.title || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\n      if (newNodeName) {\n        setTimeout(() => {\n          let newNode = nodes.find((n) => n.name === newNodeName);\n          if (newNode && this.fgRef.current) {\n            console.log(\"Focusing on:\", newNode);\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n            this.fgRef.current.zoom(1.25);\n          }\n        }, 2000);\n      }\n    });\n  };\n\n\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = 'affiliate', \n                       u.title = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = 'ambassador', \n                       nfc.title = $nfcUser + \"'s network\", \n                       nfc.website = ''\n\n         MERGE (awu:User {name: $awuUser}) \n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\n        { \n          user: newUser, \n          nfcUser: nfcUserName, \n          awuUser: \"Awu Chen\" \n        }\n        );\n      await this.loadData(newUser);\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    this.setState({ query: event.target.value });\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n    driver={this.driver} // Pass the driver\n    />\n  } />\n  </Routes>\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      const newUser = `User-${Date.now()}`;\n\n      try {\n        await addNode(newUser, username); // pass dynamic user\n        } catch (error) {\n          console.error(\"Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/craft-network/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap for {username}...</div>\n      };\n\n      const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', or 'latestNode'\n\n        // Detect when latestNode changes (NFC addition) and set lastAction\n        useEffect(() => {\n          if (latestNode) {\n            setLastAction('latestNode');\n          }\n        }, [latestNode]);\n\n        // Initial zoom when graph first loads\n        useEffect(() => {\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\n            // Wait a bit for the graph to settle, then zoom to 2x\n            setTimeout(() => {\n              if (fgRef.current) {\n                fgRef.current.zoom(2, 1000);\n              }\n            }, 1000);\n          }\n        }, [data.nodes, fgRef, lastAction]);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\n        const visibilityFocus = focusNode || clickedNode || latestNode;\n        // For zoom: use the most recent action\n        const zoomFocus = lastAction === 'search' ? 'search' : \n                         lastAction === 'click' ? clickedNode : \n                         lastAction === 'latestNode' ? latestNode : null;\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\n        \n        // Always include search results in visibility if there's a search term\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        const zoomNodes = lastAction === 'search' ? \n                         (() => {\n                           const searchMatches = data.nodes.filter(node => \n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                             (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n                           );\n                           const searchNodes = new Set();\n                           searchMatches.forEach(match => {\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\n                           });\n                           return searchNodes;\n                         })() : \n                         getNDegreeNodes(zoomFocus, visibleDegree);\n        \n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && zoomNodes.size > 0) {\n            // Zoom based on last action\n            if (lastAction === 'click' && clickedNode) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (lastAction === 'search' && inputValue) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (lastAction === 'latestNode' && latestNode) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n          }\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n          // Clear other actions when searching\n          if (input.trim()) {\n            setClickedNode(null);\n            setLastAction('search');\n          }\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          // Check if input looks like a Cypher query\n          const isCypherQuery = inputValue.trim().toUpperCase().includes('MATCH') || \n                               inputValue.trim().toUpperCase().includes('RETURN') ||\n                               inputValue.trim().toUpperCase().includes('CYPHER');\n\n          let queryToExecute;\n\n          if (isCypherQuery) {\n            // Use the input directly as a Cypher query\n            queryToExecute = inputValue.trim();\n          } else {\n            // Use Flowise API to generate a query from natural language\n            try {\n              const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ question: inputValue })\n              });\n\n              const data = await response.json();\n              queryToExecute = data.text || data.query || \"\";\n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n              return;\n            }\n          }\n\n          if (queryToExecute) {\n            setInputValue(queryToExecute);\n            handleChange({ target: { value: queryToExecute } });\n            await loadData(null, queryToExecute);\n          }\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          setLastAction('click');\n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Ensure the website has \"https://\" if missing\n          let formattedWebsite = editedNode.website.trim();\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\n            formattedWebsite = \"https://\" + formattedWebsite;\n          }\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.title = $title, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: editedNode.name,\n                role: editedNode.role,\n                title: editedNode.title,\n                website: formattedWebsite, // Use the corrected website\n              }\n            );\n            await loadData(editedNode.name); // Keep the edited node as latestNode\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Enter natural language query, search for nodes...\"\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.title || \"No Title\"}\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n    setLastAction(null);\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.title && node.title.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())));\n    const isOneDegree = oneDegreeNodes.has(node.name);\n    const isNDegree = visibilityNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = \"gray\";\n    ctx.fillText(node.role, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {selectedNode && editedNode && (\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\n    {selectedNode.name === latestNode ? (\n      <>\n      <h3>Edit Network Info</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n      placeholder=\"Enter name\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \n      /></p>\n\n      <p><strong>Title:</strong>\n      <input \n      name=\"title\" \n      value={editedNode.title} \n      placeholder=\"Enter title\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter title\"} \n      /></p>\n\n      <p><strong>Role:</strong>\n      <input \n      name=\"role\" \n      value={editedNode.role} \n      placeholder=\"Enter role\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \n      /></p>\n\n      <p><strong>Website:</strong>\n      <input \n      name=\"website\" \n      value={editedNode.website} \n      placeholder=\"Enter website\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \n      /></p>\n\n      <p><button onClick={saveNodeChanges}>Save</button></p>\n      </>\n      ) : (\n      <>\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      <p><strong>Title:</strong> {selectedNode?.title}</p>\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\n      <p><strong>Website:</strong>{\" \"}\n      {selectedNode.website && selectedNode.website !== \"\" ? (\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n        ) : (\n        \"\"\n      )}</p>\n      </>\n    )}\n    <button onClick={() => setSelectedNode(null)}>Close</button>\n    </div>\n  )}\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}