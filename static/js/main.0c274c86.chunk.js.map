{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","queryOverride","session","database","run","state","query","res","console","error","setState","data","nodes","links","close","nodesMap","Map","records","forEach","record","has","get","source","target","set","name","role","location","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","u_name","Date","now","u_role","u_location","u_website","includes","replace","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","latestNode","setTimeout","newNode","find","n","fgRef","current","log","centerAt","zoom","addNodeNFC","newUser","nfcUserName","user","nfcUser","awuUser","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","useLocation","username","useParams","useEffect","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","mutatedNodes","setMutatedNodes","length","oneDegreeNodes","Set","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","visibilityFocus","zoomFocus","visibilityNodes","trim","filter","toLowerCase","match","neighbor","nodeName","zoomNodes","searchMatches","searchNodes","mutationNodes","size","visibleNodes","xs","map","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","test","extractedNodes","deleteMatches","nameMatch","Boolean","matchClause","nodeMatches","handleEditChange","prev","saveNodeChanges","formattedWebsite","startsWith","oldName","newName","onSubmit","placeholder","display","margin","onChange","input","type","id","onClick","open","ref","graphData","nodeId","nodeLabel","onNodeClick","onNodeHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkColor","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","position","top","left","transform","backgroundColor","border","boxShadow","zIndex","onFocus","onBlur","href","rel","substring","App","className","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0c274c86.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\n      latestNode: null\n    };\n\n  }\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    try {\n      res = await session.run(queryOverride || this.state.query);\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\") && record.get(\"source\") && record.get(\"target\") && \n          typeof record.get(\"source\") === 'string' && typeof record.get(\"target\") === 'string') {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            location: record.get(\"sourceLocation\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            location: record.get(\"targetLocation\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node && node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                location: node.properties.location || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (node && typeof node === 'object') {\n            // Handle SET query results that might have different structure\n            const name = node.name || node.u_name || `Node-${Date.now()}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.role || node.u_role || \"\",\n                location: node.location || node.u_location || \"\",\n                website: node.website || node.u_website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (typeof node === 'string' && key.includes('name')) {\n            // Handle direct string values from queries like RETURN u.name, u.role\n            const name = node;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: record.get(key.replace('name', 'role')) || \"\",\n                location: record.get(key.replace('name', 'location')) || \"\",\n                website: record.get(key.replace('name', 'website')) || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\n      if (newNodeName) {\n        setTimeout(() => {\n          let newNode = nodes.find((n) => n.name === newNodeName);\n          if (newNode && this.fgRef.current) {\n            console.log(\"Focusing on:\", newNode);\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n            this.fgRef.current.zoom(1.25);\n          }\n        }, 2000);\n      }\n    });\n  };\n\n\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = 'affiliate', \n                       u.location = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = 'ambassador', \n                       nfc.location = $nfcUser + \"'s network\", \n                       nfc.website = ''\n\n         MERGE (awu:User {name: $awuUser}) \n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        MERGE (nfc)-[:CONNECTED_TO]->(awu)`,\n        { \n          user: newUser, \n          nfcUser: nfcUserName, \n          awuUser: \"Awu Chen\" \n        }\n        );\n      await this.loadData(newUser);\n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    this.setState({ query: event.target.value });\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n    driver={this.driver} // Pass the driver\n    />\n  } />\n  </Routes>\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      const newUser = `User-${Date.now()}`;\n\n      try {\n        await addNode(newUser, username); // pass dynamic user\n        } catch (error) {\n          console.error(\"Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/craft-network/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap for {username}...</div>\n      };\n\n      const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, driver }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', 'latestNode', or 'mutation'\n        const [mutatedNodes, setMutatedNodes] = useState([]); // Track nodes created/modified by mutation queries\n\n        // Detect when latestNode changes (NFC addition) and set lastAction\n        useEffect(() => {\n          if (latestNode) {\n            setLastAction('latestNode');\n          }\n        }, [latestNode]);\n\n        // Initial zoom when graph first loads\n        useEffect(() => {\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\n            // Wait a bit for the graph to settle, then zoom to 2x\n            setTimeout(() => {\n              if (fgRef.current) {\n                fgRef.current.zoom(2, 1000);\n              }\n            }, 1000);\n          }\n        }, [data.nodes, fgRef, lastAction]);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\n        const visibilityFocus = focusNode || clickedNode || latestNode;\n        // For zoom: use the most recent action\n        const zoomFocus = lastAction === 'search' ? 'search' : \n                         lastAction === 'click' ? clickedNode : \n                         lastAction === 'latestNode' ? latestNode :\n                         lastAction === 'mutation' ? mutatedNodes[0] : null;\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\n        \n        // Always include search results in visibility if there's a search term\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        // Always include mutated nodes in visibility if there was a mutation\n        if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n          mutatedNodes.forEach(nodeName => {\n            const nodeNeighbors = getNDegreeNodes(nodeName, 0); // Always use 0 degree for mutations\n            nodeNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        const zoomNodes = lastAction === 'search' ? \n                         (() => {\n                           const searchMatches = data.nodes.filter(node => \n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                             (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase()))\n                           );\n                           const searchNodes = new Set();\n                           searchMatches.forEach(match => {\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\n                           });\n                           return searchNodes;\n                         })() : \n                         lastAction === 'mutation' ?\n                         (() => {\n                           const mutationNodes = new Set();\n                           mutatedNodes.forEach(nodeName => {\n                             const nodeNeighbors = getNDegreeNodes(nodeName, 1); // Always use 1 degree for mutations\n                             nodeNeighbors.forEach(neighbor => mutationNodes.add(neighbor));\n                           });\n                           return mutationNodes;\n                         })() :\n                         getNDegreeNodes(zoomFocus, visibleDegree);\n        \n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && zoomNodes.size > 0) {\n            // Zoom based on last action\n            if (lastAction === 'click' && clickedNode) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (lastAction === 'search' && inputValue) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (lastAction === 'latestNode' && latestNode) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n            // For mutation queries, zoom to the mutated nodes\n            else if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for mutation\n            }\n          }\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue, mutatedNodes]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n          // Clear other actions when searching\n          if (input.trim()) {\n            setClickedNode(null);\n            setLastAction('search');\n          }\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            setInputValue(generatedQuery);\n            handleChange({ target: { value: generatedQuery } });\n\n            await loadData(null, generatedQuery);\n\n            // Check if the generated query is a mutation query (updates the graph)\n            const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(generatedQuery.trim());\n            \n            // If it's a mutation query, reload with the default MATCH query to show the updated graph\n            if (isMutationQuery) {\n              // Extract node names from the mutation query to track what was created/modified\n              let extractedNodes = [];\n              \n              // Handle different mutation query patterns\n              if (generatedQuery.includes('DELETE')) {\n                // For DELETE queries, extract from patterns like DELETE (u:User {name: \"John\"}) or MATCH (u:User {name: \"John\"}) DELETE u\n                const deleteMatches = generatedQuery.match(/\\{name:\\s*['\"]([^'\"]+)['\"]\\}/g);\n                if (deleteMatches) {\n                  extractedNodes = deleteMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean);\n                }\n              } else if (generatedQuery.includes('SET')) {\n                // For SET queries, extract from MATCH clause like MATCH (u:User {name: \"John\"}) SET u.role = 'admin'\n                const matchClause = generatedQuery.match(/MATCH\\s*\\([^)]*\\{name:\\s*['\"]([^'\"]+)['\"][^}]*\\}\\)/i);\n                if (matchClause) {\n                  extractedNodes = [matchClause[1]];\n                }\n              } else {\n                // For CREATE/MERGE queries, extract from {name: \"nodeName\"} patterns\n                const nodeMatches = generatedQuery.match(/\\{([^}]+)\\}/g);\n                extractedNodes = nodeMatches ? \n                  nodeMatches.map(match => {\n                    const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                    return nameMatch ? nameMatch[1] : null;\n                  }).filter(Boolean) : [];\n              }\n              \n              setMutatedNodes(extractedNodes);\n              setLastAction('mutation');\n              \n              const defaultQuery = `\n                MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n                RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n                       v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite\n              `;\n              await loadData(null, defaultQuery);\n            }\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          setLastAction('click');\n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Ensure the website has \"https://\" if missing\n          let formattedWebsite = editedNode.website.trim();\n          if (formattedWebsite && !formattedWebsite.startsWith(\"http://\") && !formattedWebsite.startsWith(\"https://\")) {\n            formattedWebsite = \"https://\" + formattedWebsite;\n          }\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.location = $location, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: editedNode.name,\n                role: editedNode.role,\n                location: editedNode.location,\n                website: formattedWebsite, // Use the corrected website\n              }\n            );\n            await loadData(editedNode.name); // Keep the edited node as latestNode\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <form onSubmit={handleSubmit}>\n        <textarea\n          placeholder=\"Show me all the artist...\"\n          style={{ display: \"block\", width: \"95%\", height: \"60px\", margin: \"0 auto\", textAlign: \"center\" }}\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.location || \"No Location\"}\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n    setLastAction(null);\n    setMutatedNodes([]);\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())));\n    const isOneDegree = oneDegreeNodes.has(node.name);\n    const isNDegree = visibilityNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    ctx.fillStyle = \"gray\";\n    ctx.fillText(node.role, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {selectedNode && editedNode && (\n    <div style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}>\n    {selectedNode.name === latestNode ? (\n      <>\n      <h3>Edit Network Info</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n      placeholder=\"Enter name\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter name\"} \n      /></p>\n\n      <p><strong>Location:</strong>\n      <input \n      name=\"location\" \n      value={editedNode.location} \n      placeholder=\"Enter location\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter location\"} \n      /></p>\n\n      <p><strong>Role:</strong>\n      <input \n      name=\"role\" \n      value={editedNode.role} \n      placeholder=\"Enter role\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter role\"} \n      /></p>\n\n      <p><strong>Website:</strong>\n      <input \n      name=\"website\" \n      value={editedNode.website} \n      placeholder=\"Enter website\" \n      onChange={handleEditChange}\n      onFocus={(e) => e.target.placeholder = \"\"}\n      onBlur={(e) => e.target.placeholder = \"Enter website\"} \n      /></p>\n\n      <p><button onClick={saveNodeChanges}>Save</button></p>\n      </>\n      ) : (\n      <>\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      <p><strong>Location:</strong> {selectedNode?.location}</p>\n      <p><strong>Role:</strong> {selectedNode?.role}</p>\n      <p><strong>Website:</strong>{\" \"}\n      {selectedNode.website && selectedNode.website !== \"\" ? (\n        <a href={selectedNode.website} target=\"_blank\" rel=\"noopener noreferrer\">\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n        ) : (\n        \"\"\n      )}</p>\n      </>\n    )}\n    <button onClick={() => setSelectedNode(null)}>Close</button>\n    </div>\n  )}\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}