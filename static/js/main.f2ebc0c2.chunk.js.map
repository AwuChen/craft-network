{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","loadData","a","newNodeName","session","database","run","state","query","res","close","nodesMap","Map","links","records","map","r","source","get","target","has","set","name","x","Math","random","y","nodes","Array","from","values","updatedData","localStorage","setItem","JSON","stringify","setState","data","latestNode","newNode","find","n","fgRef","current","setTimeout","centerAt","zoomToFit","addNodeNFC","newUser","user","prevUser","console","error","handleChange","event","value","React","createRef","defaultData","this","path","element","addNode","Component","NFCTrigger","location","useLocation","useEffect","Date","now","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","width","display","height","margin","onChange","id","onClick","open","ref","graphData","nodeId","nodeLabel","nodeCanvasObject","node","ctx","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","fillText","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","App","className","Boolean","hostname","match","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f2ebc0c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { HashRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\r\nimport './App.css';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nclass CypherViz extends React.Component {\r\n  constructor({ driver }) {\r\n    super();\r\n    this.driver = driver;\r\n    this.fgRef = React.createRef();\r\n    \r\n    this.defaultData = {\r\n      nodes: [],\r\n      links: []\r\n    };\r\n    \r\n    this.state = {\r\n      data: this.defaultData,\r\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) RETURN u.name AS source, v.name AS target`,\r\n      latestNode: null\r\n    };\r\n  }\r\n\r\n  loadData = async (newNodeName = null) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    let res = await session.run(this.state.query);\r\n    session.close();\r\n\r\n    let nodesMap = new Map();\r\n    let links = res.records.map(r => {\r\n      let source = r.get(\"source\");\r\n      let target = r.get(\"target\");\r\n\r\n      if (!nodesMap.has(source)) nodesMap.set(source, { name: source, x: Math.random() * 500, y: Math.random() * 500 });\r\n      if (!nodesMap.has(target)) nodesMap.set(target, { name: target, x: Math.random() * 500, y: Math.random() * 500 });\r\n\r\n      return { source, target };\r\n    });\r\n\r\n    const nodes = Array.from(nodesMap.values());\r\n    const updatedData = { nodes, links };\r\n\r\n    localStorage.setItem('graphData', JSON.stringify(updatedData));\r\n    this.setState({ data: updatedData, latestNode: newNodeName }, () => {\r\n      if (newNodeName) {\r\n        let newNode = nodes.find(n => n.name === newNodeName);\r\n        if (newNode && this.fgRef.current) {\r\n          setTimeout(() => {\r\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1000);\r\n            this.fgRef.current.zoomToFit(500, 50);\r\n          }, 1000);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  addNodeNFC = async (newUser) => {\r\n    let session = this.driver.session({ database: \"neo4j\" });\r\n    try {\r\n      await session.run(\r\n        \"MERGE (u:User {name: $user}) MERGE (prev:User {name: $prevUser}) MERGE (u)-[:CONNECTED_TO]->(prev)\",\r\n        { user: newUser, prevUser: \"NFC Connect\" }\r\n        );\r\n      await this.loadData(newUser);\r\n    } catch (error) {\r\n      console.error(\"Error adding user:\", error);\r\n    }\r\n    session.close();\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ query: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div>\r\n      <Routes>\r\n      <Route path=\"/NFC\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\r\n      <Route path=\"/\" element={<GraphView data={this.state.data} query={this.state.query} handleChange={this.handleChange} loadData={this.loadData} fgRef={this.fgRef} latestNode={this.state.latestNode} />} />\r\n      </Routes>\r\n      </div>\r\n      </Router>\r\n      );\r\n    }\r\n  }\r\n\r\n  const NFCTrigger = ({ addNode }) => {\r\n    const location = useLocation();\r\n\r\n    React.useEffect(() => {\r\n      const addAndRedirect = async () => {\r\n        const newUser = `User-${Date.now()}`;\r\n\r\n        try {\r\n          await addNode(newUser);\r\n          } catch (error) {\r\n            console.error(\"Error adding user:\", error);\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            window.location.assign(\"/craft-network/#/\");\r\n            }, 1000);\r\n          };\r\n\r\n          addAndRedirect();\r\n          }, [location]);\r\n\r\n          return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Processing NFC tap...</div>;\r\n        };\r\n\r\n        const GraphView = ({ data, query, handleChange, loadData, fgRef, latestNode }) => (\r\n          <div width=\"95%\">\r\n          <textarea\r\n          style={{ display: \"block\", width: \"95%\", height: \"100px\", margin: \"0 auto\", textAlign: \"center\" }}\r\n          value={query}\r\n          onChange={handleChange}\r\n          />\r\n          <button id=\"simulate\" onClick={() => loadData()}>Simulate</button>\r\n          <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/craft-network-3d/\", \"_blank\")}>Visualize3D</button>\r\n          <ForceGraph2D\r\n          ref={fgRef}\r\n          graphData={data}\r\n          nodeId=\"name\"\r\n          nodeLabel=\"name\"\r\n          nodeCanvasObject={(node, ctx) => {\r\n            ctx.fillStyle = node.name === latestNode ? \"black\" : \"white\";\r\n            ctx.strokeStyle = \"black\";\r\n            ctx.lineWidth = 2;\r\n            ctx.beginPath();\r\n            ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, 6, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            ctx.fillStyle = \"gray\";\r\n            ctx.fillText(node.name, node.x + 10, node.y);\r\n          }}\r\n          linkCurvature={0.2}\r\n          linkDirectionalArrowRelPos={1}\r\n          linkDirectionalArrowLength={5}\r\n          />\r\n          </div>\r\n          );\r\n\r\n          export default CypherViz;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://7714be1a.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'lwW-hWpruNTNNrD-gCAMreXMZcUlAFcrjxmaeL94ZzM'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}